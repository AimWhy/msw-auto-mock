/**
 * This file is AUTO GENERATED by msw-auto-mock, you can also commit/edit as you prefer
 */
import { setupWorker, rest } from 'msw';
import faker from 'faker';

faker.seed(1);

const handlers = [
  rest.get('/', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          current_user_url: faker.random.words(),
          current_user_authorizations_html_url: faker.random.words(),
          authorizations_url: faker.random.words(),
          code_search_url: faker.random.words(),
          commit_search_url: faker.random.words(),
          emails_url: faker.random.words(),
          emojis_url: faker.random.words(),
          events_url: faker.random.words(),
          feeds_url: faker.random.words(),
          followers_url: faker.random.words(),
          following_url: faker.random.words(),
          gists_url: faker.random.words(),
          hub_url: faker.random.words(),
          issue_search_url: faker.random.words(),
          issues_url: faker.random.words(),
          keys_url: faker.random.words(),
          label_search_url: faker.random.words(),
          notifications_url: faker.random.words(),
          organization_url: faker.random.words(),
          organization_repositories_url: faker.random.words(),
          organization_teams_url: faker.random.words(),
          public_gists_url: faker.random.words(),
          rate_limit_url: faker.random.words(),
          repository_url: faker.random.words(),
          repository_search_url: faker.random.words(),
          current_user_repositories_url: faker.random.words(),
          starred_url: faker.random.words(),
          starred_gists_url: faker.random.words(),
          topic_search_url: faker.random.words(),
          user_url: faker.random.words(),
          user_organizations_url: faker.random.words(),
          user_repositories_url: faker.random.words(),
          user_search_url: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/admin/hooks', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            type: faker.random.words(),
            id: faker.datatype.number(),
            name: faker.random.words(),
            active: faker.datatype.boolean(),
            events: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            config: {
              url: faker.random.words(),
              content_type: faker.random.words(),
              insecure_ssl: faker.random.words(),
              secret: faker.random.words(),
            },
            updated_at: faker.random.words(),
            created_at: faker.random.words(),
            url: faker.random.words(),
            ping_url: faker.random.words(),
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/admin/hooks', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json({
          type: faker.random.words(),
          id: faker.datatype.number(),
          name: faker.random.words(),
          active: faker.datatype.boolean(),
          events: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
          config: {
            url: faker.random.words(),
            content_type: faker.random.words(),
            insecure_ssl: faker.random.words(),
            secret: faker.random.words(),
          },
          updated_at: faker.random.words(),
          created_at: faker.random.words(),
          url: faker.random.words(),
          ping_url: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/admin/hooks/:hook_id', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          type: faker.random.words(),
          id: faker.datatype.number(),
          name: faker.random.words(),
          active: faker.datatype.boolean(),
          events: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
          config: {
            url: faker.random.words(),
            content_type: faker.random.words(),
            insecure_ssl: faker.random.words(),
            secret: faker.random.words(),
          },
          updated_at: faker.random.words(),
          created_at: faker.random.words(),
          url: faker.random.words(),
          ping_url: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.patch('/admin/hooks/:hook_id', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          type: faker.random.words(),
          id: faker.datatype.number(),
          name: faker.random.words(),
          active: faker.datatype.boolean(),
          events: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
          config: {
            url: faker.random.words(),
            content_type: faker.random.words(),
            insecure_ssl: faker.random.words(),
          },
          updated_at: faker.random.words(),
          created_at: faker.random.words(),
          url: faker.random.words(),
          ping_url: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/admin/hooks/:hook_id', (req, res, ctx) => {
    const resultArrray = [[ctx.status(204), ctx.json({})]];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/admin/hooks/:hook_id/pings', (req, res, ctx) => {
    const resultArrray = [[ctx.status(204), ctx.json({})]];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/admin/keys', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.datatype.number(),
            key: faker.random.words(),
            user_id: faker.datatype.number(),
            repository_id: faker.datatype.number(),
            url: faker.random.words(),
            title: faker.random.words(),
            read_only: faker.datatype.boolean(),
            verified: faker.datatype.boolean(),
            created_at: faker.random.words(),
            last_used: faker.random.words(),
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/admin/keys/:key_ids', (req, res, ctx) => {
    const resultArrray = [[ctx.status(204), ctx.json({})]];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.patch('/admin/ldap/teams/:team_id/mapping', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          ldap_dn: faker.random.words(),
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          url: faker.random.words(),
          html_url: faker.random.words(),
          name: faker.random.words(),
          slug: faker.random.words(),
          description: faker.random.words(),
          privacy: faker.random.words(),
          permission: faker.random.words(),
          members_url: faker.random.words(),
          repositories_url: faker.random.words(),
          parent: {},
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/admin/ldap/teams/:team_id/sync', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json({
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.patch('/admin/ldap/users/:username/mapping', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          ldap_dn: faker.random.words(),
          login: faker.random.words(),
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          avatar_url: faker.random.words(),
          gravatar_id: faker.random.words(),
          url: faker.random.words(),
          html_url: faker.random.words(),
          followers_url: faker.random.words(),
          following_url: faker.random.words(),
          gists_url: faker.random.words(),
          starred_url: faker.random.words(),
          subscriptions_url: faker.random.words(),
          organizations_url: faker.random.words(),
          repos_url: faker.random.words(),
          events_url: faker.random.words(),
          received_events_url: faker.random.words(),
          type: faker.random.words(),
          site_admin: faker.datatype.boolean(),
          name: faker.random.words(),
          company: faker.random.words(),
          blog: faker.random.words(),
          location: faker.random.words(),
          email: faker.random.words(),
          hireable: faker.datatype.boolean(),
          bio: faker.random.words(),
          twitter_username: faker.random.words(),
          public_repos: faker.datatype.number(),
          public_gists: faker.datatype.number(),
          followers: faker.datatype.number(),
          following: faker.datatype.number(),
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          private_gists: faker.datatype.number(),
          total_private_repos: faker.datatype.number(),
          owned_private_repos: faker.datatype.number(),
          disk_usage: faker.datatype.number(),
          collaborators: faker.datatype.number(),
          two_factor_authentication: faker.datatype.boolean(),
          plan: {
            collaborators: faker.datatype.number(),
            name: faker.random.words(),
            space: faker.datatype.number(),
            private_repos: faker.datatype.number(),
          },
          suspended_at: faker.random.words(),
          business_plus: faker.datatype.boolean(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/admin/ldap/users/:username/sync', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json({
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/admin/organizations', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json({
          login: faker.random.words(),
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          url: faker.random.words(),
          repos_url: faker.random.words(),
          events_url: faker.random.words(),
          hooks_url: faker.random.words(),
          issues_url: faker.random.words(),
          members_url: faker.random.words(),
          public_members_url: faker.random.words(),
          avatar_url: faker.random.words(),
          description: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.patch('/admin/organizations/:org', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(202),
        ctx.json({
          message: faker.random.words(),
          url: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/admin/pre-receive-environments', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.datatype.number(),
            name: faker.random.words(),
            image_url: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            default_environment: faker.datatype.boolean(),
            created_at: faker.random.words(),
            hooks_count: faker.datatype.number(),
            download: {
              url: faker.random.words(),
              state: faker.random.words(),
              downloaded_at: faker.random.words(),
              message: faker.random.words(),
            },
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/admin/pre-receive-environments', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json({
          id: faker.datatype.number(),
          name: faker.random.words(),
          image_url: faker.random.words(),
          url: faker.random.words(),
          html_url: faker.random.words(),
          default_environment: faker.datatype.boolean(),
          created_at: faker.random.words(),
          hooks_count: faker.datatype.number(),
          download: {
            url: faker.random.words(),
            state: faker.random.words(),
            downloaded_at: faker.random.words(),
            message: faker.random.words(),
          },
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get(
    '/admin/pre-receive-environments/:pre_receive_environment_id',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            name: faker.random.words(),
            image_url: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            default_environment: faker.datatype.boolean(),
            created_at: faker.random.words(),
            hooks_count: faker.datatype.number(),
            download: {
              url: faker.random.words(),
              state: faker.random.words(),
              downloaded_at: faker.random.words(),
              message: faker.random.words(),
            },
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.patch(
    '/admin/pre-receive-environments/:pre_receive_environment_id',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            name: faker.random.words(),
            image_url: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            default_environment: faker.datatype.boolean(),
            created_at: faker.random.words(),
            hooks_count: faker.datatype.number(),
            download: {
              url: faker.random.words(),
              state: faker.random.words(),
              downloaded_at: faker.random.words(),
              message: faker.random.words(),
            },
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.random.words(),
            errors: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              resource: faker.random.words(),
              code: faker.random.words(),
              message: faker.random.words(),
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/admin/pre-receive-environments/:pre_receive_environment_id',
    (req, res, ctx) => {
      const resultArrray = [
        [ctx.status(204), ctx.json({})],
        [
          ctx.status(422),
          ctx.json({
            message: faker.random.words(),
            errors: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              resource: faker.random.words(),
              code: faker.random.words(),
              message: faker.random.words(),
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.post(
    '/admin/pre-receive-environments/:pre_receive_environment_id/downloads',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(202),
          ctx.json({
            url: faker.random.words(),
            state: faker.random.words(),
            downloaded_at: faker.random.words(),
            message: faker.random.words(),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.random.words(),
            errors: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              resource: faker.random.words(),
              code: faker.random.words(),
              message: faker.random.words(),
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/admin/pre-receive-environments/:pre_receive_environment_id/downloads/latest',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            url: faker.random.words(),
            state: faker.random.words(),
            downloaded_at: faker.random.words(),
            message: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get('/admin/pre-receive-hooks', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.datatype.number(),
            name: faker.random.words(),
            enforcement: faker.random.words(),
            script: faker.random.words(),
            script_repository: {
              id: faker.datatype.number(),
              full_name: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
            },
            environment: {
              id: faker.datatype.number(),
              name: faker.random.words(),
              image_url: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              default_environment: faker.datatype.boolean(),
              created_at: faker.random.words(),
              hooks_count: faker.datatype.number(),
              download: {
                url: faker.random.words(),
                state: faker.random.words(),
                downloaded_at: faker.random.words(),
                message: faker.random.words(),
              },
            },
            allow_downstream_configuration: faker.datatype.boolean(),
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/admin/pre-receive-hooks', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json({
          id: faker.datatype.number(),
          name: faker.random.words(),
          enforcement: faker.random.words(),
          script: faker.random.words(),
          script_repository: {
            id: faker.datatype.number(),
            full_name: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
          },
          environment: {
            id: faker.datatype.number(),
            name: faker.random.words(),
            image_url: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            default_environment: faker.datatype.boolean(),
            created_at: faker.random.words(),
            hooks_count: faker.datatype.number(),
            download: {
              url: faker.random.words(),
              state: faker.random.words(),
              downloaded_at: faker.random.words(),
              message: faker.random.words(),
            },
          },
          allow_downstream_configuration: faker.datatype.boolean(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/admin/pre-receive-hooks/:pre_receive_hook_id', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.datatype.number(),
          name: faker.random.words(),
          enforcement: faker.random.words(),
          script: faker.random.words(),
          script_repository: {
            id: faker.datatype.number(),
            full_name: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
          },
          environment: {
            id: faker.datatype.number(),
            name: faker.random.words(),
            image_url: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            default_environment: faker.datatype.boolean(),
            created_at: faker.random.words(),
            hooks_count: faker.datatype.number(),
            download: {
              url: faker.random.words(),
              state: faker.random.words(),
              downloaded_at: faker.random.words(),
              message: faker.random.words(),
            },
          },
          allow_downstream_configuration: faker.datatype.boolean(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.patch(
    '/admin/pre-receive-hooks/:pre_receive_hook_id',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            name: faker.random.words(),
            enforcement: faker.random.words(),
            script: faker.random.words(),
            script_repository: {
              id: faker.datatype.number(),
              full_name: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
            },
            environment: {
              id: faker.datatype.number(),
              name: faker.random.words(),
              image_url: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              default_environment: faker.datatype.boolean(),
              created_at: faker.random.words(),
              hooks_count: faker.datatype.number(),
              download: {
                url: faker.random.words(),
                state: faker.random.words(),
                downloaded_at: faker.random.words(),
                message: faker.random.words(),
              },
            },
            allow_downstream_configuration: faker.datatype.boolean(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/admin/pre-receive-hooks/:pre_receive_hook_id',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get('/admin/tokens', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.datatype.number(),
            url: faker.random.words(),
            scopes: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            token: faker.random.words(),
            token_last_eight: faker.random.words(),
            hashed_token: faker.random.words(),
            app: {
              client_id: faker.random.words(),
              name: faker.random.words(),
              url: faker.random.words(),
            },
            note: faker.random.words(),
            note_url: faker.random.words(),
            updated_at: faker.random.words(),
            created_at: faker.random.words(),
            fingerprint: faker.random.words(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            installation: {
              permissions: {
                actions: faker.random.arrayElement(['read', 'write']),
                administration: faker.random.arrayElement(['read', 'write']),
                checks: faker.random.arrayElement(['read', 'write']),
                contents: faker.random.arrayElement(['read', 'write']),
                deployments: faker.random.arrayElement(['read', 'write']),
                environments: faker.random.arrayElement(['read', 'write']),
                issues: faker.random.arrayElement(['read', 'write']),
                metadata: faker.random.arrayElement(['read', 'write']),
                packages: faker.random.arrayElement(['read', 'write']),
                pages: faker.random.arrayElement(['read', 'write']),
                pull_requests: faker.random.arrayElement(['read', 'write']),
                repository_hooks: faker.random.arrayElement(['read', 'write']),
                repository_projects: faker.random.arrayElement([
                  'read',
                  'write',
                  'admin',
                ]),
                secret_scanning_alerts: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
                secrets: faker.random.arrayElement(['read', 'write']),
                security_events: faker.random.arrayElement(['read', 'write']),
                single_file: faker.random.arrayElement(['read', 'write']),
                statuses: faker.random.arrayElement(['read', 'write']),
                vulnerability_alerts: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
                workflows: faker.random.arrayElement(['write']),
                members: faker.random.arrayElement(['read', 'write']),
                organization_administration: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
                organization_hooks: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
                organization_plan: faker.random.arrayElement(['read']),
                organization_projects: faker.random.arrayElement([
                  'read',
                  'write',
                  'admin',
                ]),
                organization_packages: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
                organization_secrets: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
                organization_self_hosted_runners: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
                organization_user_blocking: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
                team_discussions: faker.random.arrayElement(['read', 'write']),
                content_references: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
              },
              repository_selection: faker.random.arrayElement([
                'all',
                'selected',
              ]),
              single_file_name: faker.random.words(),
              has_multiple_single_files: faker.datatype.boolean(),
              single_file_paths: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              repositories_url: faker.random.words(),
              account: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
            },
            expires_at: faker.random.words(),
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/admin/tokens/:token_id', (req, res, ctx) => {
    const resultArrray = [[ctx.status(204), ctx.json({})]];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/admin/users', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json({
          name: faker.random.words(),
          email: faker.random.words(),
          login: faker.random.words(),
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          avatar_url: faker.random.words(),
          gravatar_id: faker.random.words(),
          url: faker.random.words(),
          html_url: faker.random.words(),
          followers_url: faker.random.words(),
          following_url: faker.random.words(),
          gists_url: faker.random.words(),
          starred_url: faker.random.words(),
          subscriptions_url: faker.random.words(),
          organizations_url: faker.random.words(),
          repos_url: faker.random.words(),
          events_url: faker.random.words(),
          received_events_url: faker.random.words(),
          type: faker.random.words(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.patch('/admin/users/:username', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(202),
        ctx.json({
          message: faker.random.words(),
          url: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/admin/users/:username', (req, res, ctx) => {
    const resultArrray = [[ctx.status(204), ctx.json({})]];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/admin/users/:username/authorizations', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json({
          id: faker.datatype.number(),
          url: faker.random.words(),
          scopes: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
          token: faker.random.words(),
          token_last_eight: faker.random.words(),
          hashed_token: faker.random.words(),
          app: {
            client_id: faker.random.words(),
            name: faker.random.words(),
            url: faker.random.words(),
          },
          note: faker.random.words(),
          note_url: faker.random.words(),
          updated_at: faker.random.words(),
          created_at: faker.random.words(),
          fingerprint: faker.random.words(),
          user: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          installation: {
            permissions: {
              actions: faker.random.arrayElement(['read', 'write']),
              administration: faker.random.arrayElement(['read', 'write']),
              checks: faker.random.arrayElement(['read', 'write']),
              contents: faker.random.arrayElement(['read', 'write']),
              deployments: faker.random.arrayElement(['read', 'write']),
              environments: faker.random.arrayElement(['read', 'write']),
              issues: faker.random.arrayElement(['read', 'write']),
              metadata: faker.random.arrayElement(['read', 'write']),
              packages: faker.random.arrayElement(['read', 'write']),
              pages: faker.random.arrayElement(['read', 'write']),
              pull_requests: faker.random.arrayElement(['read', 'write']),
              repository_hooks: faker.random.arrayElement(['read', 'write']),
              repository_projects: faker.random.arrayElement([
                'read',
                'write',
                'admin',
              ]),
              secret_scanning_alerts: faker.random.arrayElement([
                'read',
                'write',
              ]),
              secrets: faker.random.arrayElement(['read', 'write']),
              security_events: faker.random.arrayElement(['read', 'write']),
              single_file: faker.random.arrayElement(['read', 'write']),
              statuses: faker.random.arrayElement(['read', 'write']),
              vulnerability_alerts: faker.random.arrayElement([
                'read',
                'write',
              ]),
              workflows: faker.random.arrayElement(['write']),
              members: faker.random.arrayElement(['read', 'write']),
              organization_administration: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_hooks: faker.random.arrayElement(['read', 'write']),
              organization_plan: faker.random.arrayElement(['read']),
              organization_projects: faker.random.arrayElement([
                'read',
                'write',
                'admin',
              ]),
              organization_packages: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_secrets: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_self_hosted_runners: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_user_blocking: faker.random.arrayElement([
                'read',
                'write',
              ]),
              team_discussions: faker.random.arrayElement(['read', 'write']),
              content_references: faker.random.arrayElement(['read', 'write']),
            },
            repository_selection: faker.random.arrayElement([
              'all',
              'selected',
            ]),
            single_file_name: faker.random.words(),
            has_multiple_single_files: faker.datatype.boolean(),
            single_file_paths: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            repositories_url: faker.random.words(),
            account: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
          },
          expires_at: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/admin/users/:username/authorizations', (req, res, ctx) => {
    const resultArrray = [[ctx.status(204), ctx.json({})]];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/app', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.datatype.number(),
          slug: faker.random.words(),
          node_id: faker.random.words(),
          owner: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          name: faker.random.words(),
          description: faker.random.words(),
          external_url: faker.random.words(),
          html_url: faker.random.words(),
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          permissions: {
            issues: faker.random.words(),
            checks: faker.random.words(),
            metadata: faker.random.words(),
            contents: faker.random.words(),
            deployments: faker.random.words(),
          },
          events: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
          installations_count: faker.datatype.number(),
          client_id: faker.random.words(),
          client_secret: faker.random.words(),
          webhook_secret: faker.random.words(),
          pem: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/app-manifests/:code/conversions', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(201), ctx.json({})],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/app/hook/config', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          url: faker.random.words(),
          content_type: faker.random.words(),
          secret: faker.random.words(),
          insecure_ssl: {},
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.patch('/app/hook/config', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          url: faker.random.words(),
          content_type: faker.random.words(),
          secret: faker.random.words(),
          insecure_ssl: {},
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/app/hook/deliveries', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.datatype.number(),
            guid: faker.random.words(),
            delivered_at: faker.random.words(),
            redelivery: faker.datatype.boolean(),
            duration: faker.datatype.number(),
            status: faker.random.words(),
            status_code: faker.datatype.number(),
            event: faker.random.words(),
            action: faker.random.words(),
            installation_id: faker.datatype.number(),
            repository_id: faker.datatype.number(),
          }))
        ),
      ],
      [
        ctx.status(400),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/app/hook/deliveries/:delivery_id', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.datatype.number(),
          guid: faker.random.words(),
          delivered_at: faker.random.words(),
          redelivery: faker.datatype.boolean(),
          duration: faker.datatype.number(),
          status: faker.random.words(),
          status_code: faker.datatype.number(),
          event: faker.random.words(),
          action: faker.random.words(),
          installation_id: faker.datatype.number(),
          repository_id: faker.datatype.number(),
          url: faker.random.words(),
          request: {
            headers: {},
            payload: {},
          },
          response: {
            headers: {},
            payload: faker.random.words(),
          },
        }),
      ],
      [
        ctx.status(400),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/app/hook/deliveries/:delivery_id/attempts', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(202), ctx.json({})],
      [
        ctx.status(400),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/app/installations', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.datatype.number(),
            account: {},
            repository_selection: faker.random.arrayElement([
              'all',
              'selected',
            ]),
            access_tokens_url: faker.random.words(),
            repositories_url: faker.random.words(),
            html_url: faker.random.words(),
            app_id: faker.datatype.number(),
            target_id: faker.datatype.number(),
            target_type: faker.random.words(),
            permissions: {
              actions: faker.random.arrayElement(['read', 'write']),
              administration: faker.random.arrayElement(['read', 'write']),
              checks: faker.random.arrayElement(['read', 'write']),
              contents: faker.random.arrayElement(['read', 'write']),
              deployments: faker.random.arrayElement(['read', 'write']),
              environments: faker.random.arrayElement(['read', 'write']),
              issues: faker.random.arrayElement(['read', 'write']),
              metadata: faker.random.arrayElement(['read', 'write']),
              packages: faker.random.arrayElement(['read', 'write']),
              pages: faker.random.arrayElement(['read', 'write']),
              pull_requests: faker.random.arrayElement(['read', 'write']),
              repository_hooks: faker.random.arrayElement(['read', 'write']),
              repository_projects: faker.random.arrayElement([
                'read',
                'write',
                'admin',
              ]),
              secret_scanning_alerts: faker.random.arrayElement([
                'read',
                'write',
              ]),
              secrets: faker.random.arrayElement(['read', 'write']),
              security_events: faker.random.arrayElement(['read', 'write']),
              single_file: faker.random.arrayElement(['read', 'write']),
              statuses: faker.random.arrayElement(['read', 'write']),
              vulnerability_alerts: faker.random.arrayElement([
                'read',
                'write',
              ]),
              workflows: faker.random.arrayElement(['write']),
              members: faker.random.arrayElement(['read', 'write']),
              organization_administration: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_hooks: faker.random.arrayElement(['read', 'write']),
              organization_plan: faker.random.arrayElement(['read']),
              organization_projects: faker.random.arrayElement([
                'read',
                'write',
                'admin',
              ]),
              organization_packages: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_secrets: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_self_hosted_runners: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_user_blocking: faker.random.arrayElement([
                'read',
                'write',
              ]),
              team_discussions: faker.random.arrayElement(['read', 'write']),
              content_references: faker.random.arrayElement(['read', 'write']),
            },
            events: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            single_file_name: faker.random.words(),
            has_multiple_single_files: faker.datatype.boolean(),
            single_file_paths: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            app_slug: faker.random.words(),
            suspended_by: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            suspended_at: faker.random.words(),
            contact_email: faker.random.words(),
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/app/installations/:installation_id', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.datatype.number(),
          account: {},
          repository_selection: faker.random.arrayElement(['all', 'selected']),
          access_tokens_url: faker.random.words(),
          repositories_url: faker.random.words(),
          html_url: faker.random.words(),
          app_id: faker.datatype.number(),
          target_id: faker.datatype.number(),
          target_type: faker.random.words(),
          permissions: {
            actions: faker.random.arrayElement(['read', 'write']),
            administration: faker.random.arrayElement(['read', 'write']),
            checks: faker.random.arrayElement(['read', 'write']),
            contents: faker.random.arrayElement(['read', 'write']),
            deployments: faker.random.arrayElement(['read', 'write']),
            environments: faker.random.arrayElement(['read', 'write']),
            issues: faker.random.arrayElement(['read', 'write']),
            metadata: faker.random.arrayElement(['read', 'write']),
            packages: faker.random.arrayElement(['read', 'write']),
            pages: faker.random.arrayElement(['read', 'write']),
            pull_requests: faker.random.arrayElement(['read', 'write']),
            repository_hooks: faker.random.arrayElement(['read', 'write']),
            repository_projects: faker.random.arrayElement([
              'read',
              'write',
              'admin',
            ]),
            secret_scanning_alerts: faker.random.arrayElement([
              'read',
              'write',
            ]),
            secrets: faker.random.arrayElement(['read', 'write']),
            security_events: faker.random.arrayElement(['read', 'write']),
            single_file: faker.random.arrayElement(['read', 'write']),
            statuses: faker.random.arrayElement(['read', 'write']),
            vulnerability_alerts: faker.random.arrayElement(['read', 'write']),
            workflows: faker.random.arrayElement(['write']),
            members: faker.random.arrayElement(['read', 'write']),
            organization_administration: faker.random.arrayElement([
              'read',
              'write',
            ]),
            organization_hooks: faker.random.arrayElement(['read', 'write']),
            organization_plan: faker.random.arrayElement(['read']),
            organization_projects: faker.random.arrayElement([
              'read',
              'write',
              'admin',
            ]),
            organization_packages: faker.random.arrayElement(['read', 'write']),
            organization_secrets: faker.random.arrayElement(['read', 'write']),
            organization_self_hosted_runners: faker.random.arrayElement([
              'read',
              'write',
            ]),
            organization_user_blocking: faker.random.arrayElement([
              'read',
              'write',
            ]),
            team_discussions: faker.random.arrayElement(['read', 'write']),
            content_references: faker.random.arrayElement(['read', 'write']),
          },
          events: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          single_file_name: faker.random.words(),
          has_multiple_single_files: faker.datatype.boolean(),
          single_file_paths: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
          app_slug: faker.random.words(),
          suspended_by: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          suspended_at: faker.random.words(),
          contact_email: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(415),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/app/installations/:installation_id', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post(
    '/app/installations/:installation_id/access_tokens',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(201),
          ctx.json({
            token: faker.random.words(),
            expires_at: faker.random.words(),
            permissions: {
              actions: faker.random.arrayElement(['read', 'write']),
              administration: faker.random.arrayElement(['read', 'write']),
              checks: faker.random.arrayElement(['read', 'write']),
              contents: faker.random.arrayElement(['read', 'write']),
              deployments: faker.random.arrayElement(['read', 'write']),
              environments: faker.random.arrayElement(['read', 'write']),
              issues: faker.random.arrayElement(['read', 'write']),
              metadata: faker.random.arrayElement(['read', 'write']),
              packages: faker.random.arrayElement(['read', 'write']),
              pages: faker.random.arrayElement(['read', 'write']),
              pull_requests: faker.random.arrayElement(['read', 'write']),
              repository_hooks: faker.random.arrayElement(['read', 'write']),
              repository_projects: faker.random.arrayElement([
                'read',
                'write',
                'admin',
              ]),
              secret_scanning_alerts: faker.random.arrayElement([
                'read',
                'write',
              ]),
              secrets: faker.random.arrayElement(['read', 'write']),
              security_events: faker.random.arrayElement(['read', 'write']),
              single_file: faker.random.arrayElement(['read', 'write']),
              statuses: faker.random.arrayElement(['read', 'write']),
              vulnerability_alerts: faker.random.arrayElement([
                'read',
                'write',
              ]),
              workflows: faker.random.arrayElement(['write']),
              members: faker.random.arrayElement(['read', 'write']),
              organization_administration: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_hooks: faker.random.arrayElement(['read', 'write']),
              organization_plan: faker.random.arrayElement(['read']),
              organization_projects: faker.random.arrayElement([
                'read',
                'write',
                'admin',
              ]),
              organization_packages: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_secrets: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_self_hosted_runners: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_user_blocking: faker.random.arrayElement([
                'read',
                'write',
              ]),
              team_discussions: faker.random.arrayElement(['read', 'write']),
              content_references: faker.random.arrayElement(['read', 'write']),
            },
            repository_selection: faker.random.arrayElement([
              'all',
              'selected',
            ]),
            repositories: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              license: {
                key: faker.random.words(),
                name: faker.random.words(),
                url: faker.random.words(),
                spdx_id: faker.random.words(),
                node_id: faker.random.words(),
                html_url: faker.random.words(),
              },
              organization: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              allow_rebase_merge: faker.datatype.boolean(),
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                owner: {
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.random.words(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.random.words(),
              starred_at: faker.random.words(),
            })),
            single_file: faker.random.words(),
            has_multiple_single_files: faker.datatype.boolean(),
            single_file_paths: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
          }),
        ],
        [
          ctx.status(401),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(415),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            errors: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              resource: faker.random.words(),
              field: faker.random.words(),
              message: faker.random.words(),
              code: faker.random.words(),
              index: faker.datatype.number(),
              value: {},
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.put('/app/installations/:installation_id/suspended', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete(
    '/app/installations/:installation_id/suspended',
    (req, res, ctx) => {
      const resultArrray = [
        [ctx.status(204), ctx.json({})],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get('/applications/grants', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.datatype.number(),
            url: faker.random.words(),
            app: {
              client_id: faker.random.words(),
              name: faker.random.words(),
              url: faker.random.words(),
            },
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            scopes: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
          }))
        ),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/applications/grants/:grant_id', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.datatype.number(),
          url: faker.random.words(),
          app: {
            client_id: faker.random.words(),
            name: faker.random.words(),
            url: faker.random.words(),
          },
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          scopes: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
          user: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
        }),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/applications/grants/:grant_id', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/applications/:client_id/grant', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete(
    '/applications/:client_id/grants/:access_token',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.post('/applications/:client_id/token', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.datatype.number(),
          url: faker.random.words(),
          scopes: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
          token: faker.random.words(),
          token_last_eight: faker.random.words(),
          hashed_token: faker.random.words(),
          app: {
            client_id: faker.random.words(),
            name: faker.random.words(),
            url: faker.random.words(),
          },
          note: faker.random.words(),
          note_url: faker.random.words(),
          updated_at: faker.random.words(),
          created_at: faker.random.words(),
          fingerprint: faker.random.words(),
          user: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          installation: {
            permissions: {
              actions: faker.random.arrayElement(['read', 'write']),
              administration: faker.random.arrayElement(['read', 'write']),
              checks: faker.random.arrayElement(['read', 'write']),
              contents: faker.random.arrayElement(['read', 'write']),
              deployments: faker.random.arrayElement(['read', 'write']),
              environments: faker.random.arrayElement(['read', 'write']),
              issues: faker.random.arrayElement(['read', 'write']),
              metadata: faker.random.arrayElement(['read', 'write']),
              packages: faker.random.arrayElement(['read', 'write']),
              pages: faker.random.arrayElement(['read', 'write']),
              pull_requests: faker.random.arrayElement(['read', 'write']),
              repository_hooks: faker.random.arrayElement(['read', 'write']),
              repository_projects: faker.random.arrayElement([
                'read',
                'write',
                'admin',
              ]),
              secret_scanning_alerts: faker.random.arrayElement([
                'read',
                'write',
              ]),
              secrets: faker.random.arrayElement(['read', 'write']),
              security_events: faker.random.arrayElement(['read', 'write']),
              single_file: faker.random.arrayElement(['read', 'write']),
              statuses: faker.random.arrayElement(['read', 'write']),
              vulnerability_alerts: faker.random.arrayElement([
                'read',
                'write',
              ]),
              workflows: faker.random.arrayElement(['write']),
              members: faker.random.arrayElement(['read', 'write']),
              organization_administration: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_hooks: faker.random.arrayElement(['read', 'write']),
              organization_plan: faker.random.arrayElement(['read']),
              organization_projects: faker.random.arrayElement([
                'read',
                'write',
                'admin',
              ]),
              organization_packages: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_secrets: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_self_hosted_runners: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_user_blocking: faker.random.arrayElement([
                'read',
                'write',
              ]),
              team_discussions: faker.random.arrayElement(['read', 'write']),
              content_references: faker.random.arrayElement(['read', 'write']),
            },
            repository_selection: faker.random.arrayElement([
              'all',
              'selected',
            ]),
            single_file_name: faker.random.words(),
            has_multiple_single_files: faker.datatype.boolean(),
            single_file_paths: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            repositories_url: faker.random.words(),
            account: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
          },
          expires_at: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.patch('/applications/:client_id/token', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.datatype.number(),
          url: faker.random.words(),
          scopes: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
          token: faker.random.words(),
          token_last_eight: faker.random.words(),
          hashed_token: faker.random.words(),
          app: {
            client_id: faker.random.words(),
            name: faker.random.words(),
            url: faker.random.words(),
          },
          note: faker.random.words(),
          note_url: faker.random.words(),
          updated_at: faker.random.words(),
          created_at: faker.random.words(),
          fingerprint: faker.random.words(),
          user: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          installation: {
            permissions: {
              actions: faker.random.arrayElement(['read', 'write']),
              administration: faker.random.arrayElement(['read', 'write']),
              checks: faker.random.arrayElement(['read', 'write']),
              contents: faker.random.arrayElement(['read', 'write']),
              deployments: faker.random.arrayElement(['read', 'write']),
              environments: faker.random.arrayElement(['read', 'write']),
              issues: faker.random.arrayElement(['read', 'write']),
              metadata: faker.random.arrayElement(['read', 'write']),
              packages: faker.random.arrayElement(['read', 'write']),
              pages: faker.random.arrayElement(['read', 'write']),
              pull_requests: faker.random.arrayElement(['read', 'write']),
              repository_hooks: faker.random.arrayElement(['read', 'write']),
              repository_projects: faker.random.arrayElement([
                'read',
                'write',
                'admin',
              ]),
              secret_scanning_alerts: faker.random.arrayElement([
                'read',
                'write',
              ]),
              secrets: faker.random.arrayElement(['read', 'write']),
              security_events: faker.random.arrayElement(['read', 'write']),
              single_file: faker.random.arrayElement(['read', 'write']),
              statuses: faker.random.arrayElement(['read', 'write']),
              vulnerability_alerts: faker.random.arrayElement([
                'read',
                'write',
              ]),
              workflows: faker.random.arrayElement(['write']),
              members: faker.random.arrayElement(['read', 'write']),
              organization_administration: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_hooks: faker.random.arrayElement(['read', 'write']),
              organization_plan: faker.random.arrayElement(['read']),
              organization_projects: faker.random.arrayElement([
                'read',
                'write',
                'admin',
              ]),
              organization_packages: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_secrets: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_self_hosted_runners: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_user_blocking: faker.random.arrayElement([
                'read',
                'write',
              ]),
              team_discussions: faker.random.arrayElement(['read', 'write']),
              content_references: faker.random.arrayElement(['read', 'write']),
            },
            repository_selection: faker.random.arrayElement([
              'all',
              'selected',
            ]),
            single_file_name: faker.random.words(),
            has_multiple_single_files: faker.datatype.boolean(),
            single_file_paths: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            repositories_url: faker.random.words(),
            account: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
          },
          expires_at: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/applications/:client_id/token', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/applications/:client_id/token/scoped', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.datatype.number(),
          url: faker.random.words(),
          scopes: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
          token: faker.random.words(),
          token_last_eight: faker.random.words(),
          hashed_token: faker.random.words(),
          app: {
            client_id: faker.random.words(),
            name: faker.random.words(),
            url: faker.random.words(),
          },
          note: faker.random.words(),
          note_url: faker.random.words(),
          updated_at: faker.random.words(),
          created_at: faker.random.words(),
          fingerprint: faker.random.words(),
          user: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          installation: {
            permissions: {
              actions: faker.random.arrayElement(['read', 'write']),
              administration: faker.random.arrayElement(['read', 'write']),
              checks: faker.random.arrayElement(['read', 'write']),
              contents: faker.random.arrayElement(['read', 'write']),
              deployments: faker.random.arrayElement(['read', 'write']),
              environments: faker.random.arrayElement(['read', 'write']),
              issues: faker.random.arrayElement(['read', 'write']),
              metadata: faker.random.arrayElement(['read', 'write']),
              packages: faker.random.arrayElement(['read', 'write']),
              pages: faker.random.arrayElement(['read', 'write']),
              pull_requests: faker.random.arrayElement(['read', 'write']),
              repository_hooks: faker.random.arrayElement(['read', 'write']),
              repository_projects: faker.random.arrayElement([
                'read',
                'write',
                'admin',
              ]),
              secret_scanning_alerts: faker.random.arrayElement([
                'read',
                'write',
              ]),
              secrets: faker.random.arrayElement(['read', 'write']),
              security_events: faker.random.arrayElement(['read', 'write']),
              single_file: faker.random.arrayElement(['read', 'write']),
              statuses: faker.random.arrayElement(['read', 'write']),
              vulnerability_alerts: faker.random.arrayElement([
                'read',
                'write',
              ]),
              workflows: faker.random.arrayElement(['write']),
              members: faker.random.arrayElement(['read', 'write']),
              organization_administration: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_hooks: faker.random.arrayElement(['read', 'write']),
              organization_plan: faker.random.arrayElement(['read']),
              organization_projects: faker.random.arrayElement([
                'read',
                'write',
                'admin',
              ]),
              organization_packages: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_secrets: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_self_hosted_runners: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_user_blocking: faker.random.arrayElement([
                'read',
                'write',
              ]),
              team_discussions: faker.random.arrayElement(['read', 'write']),
              content_references: faker.random.arrayElement(['read', 'write']),
            },
            repository_selection: faker.random.arrayElement([
              'all',
              'selected',
            ]),
            single_file_name: faker.random.words(),
            has_multiple_single_files: faker.datatype.boolean(),
            single_file_paths: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            repositories_url: faker.random.words(),
            account: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
          },
          expires_at: faker.random.words(),
        }),
      ],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/applications/:client_id/tokens/:access_token', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.datatype.number(),
          url: faker.random.words(),
          scopes: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
          token: faker.random.words(),
          token_last_eight: faker.random.words(),
          hashed_token: faker.random.words(),
          app: {
            client_id: faker.random.words(),
            name: faker.random.words(),
            url: faker.random.words(),
          },
          note: faker.random.words(),
          note_url: faker.random.words(),
          updated_at: faker.random.words(),
          created_at: faker.random.words(),
          fingerprint: faker.random.words(),
          user: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          installation: {
            permissions: {
              actions: faker.random.arrayElement(['read', 'write']),
              administration: faker.random.arrayElement(['read', 'write']),
              checks: faker.random.arrayElement(['read', 'write']),
              contents: faker.random.arrayElement(['read', 'write']),
              deployments: faker.random.arrayElement(['read', 'write']),
              environments: faker.random.arrayElement(['read', 'write']),
              issues: faker.random.arrayElement(['read', 'write']),
              metadata: faker.random.arrayElement(['read', 'write']),
              packages: faker.random.arrayElement(['read', 'write']),
              pages: faker.random.arrayElement(['read', 'write']),
              pull_requests: faker.random.arrayElement(['read', 'write']),
              repository_hooks: faker.random.arrayElement(['read', 'write']),
              repository_projects: faker.random.arrayElement([
                'read',
                'write',
                'admin',
              ]),
              secret_scanning_alerts: faker.random.arrayElement([
                'read',
                'write',
              ]),
              secrets: faker.random.arrayElement(['read', 'write']),
              security_events: faker.random.arrayElement(['read', 'write']),
              single_file: faker.random.arrayElement(['read', 'write']),
              statuses: faker.random.arrayElement(['read', 'write']),
              vulnerability_alerts: faker.random.arrayElement([
                'read',
                'write',
              ]),
              workflows: faker.random.arrayElement(['write']),
              members: faker.random.arrayElement(['read', 'write']),
              organization_administration: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_hooks: faker.random.arrayElement(['read', 'write']),
              organization_plan: faker.random.arrayElement(['read']),
              organization_projects: faker.random.arrayElement([
                'read',
                'write',
                'admin',
              ]),
              organization_packages: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_secrets: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_self_hosted_runners: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_user_blocking: faker.random.arrayElement([
                'read',
                'write',
              ]),
              team_discussions: faker.random.arrayElement(['read', 'write']),
              content_references: faker.random.arrayElement(['read', 'write']),
            },
            repository_selection: faker.random.arrayElement([
              'all',
              'selected',
            ]),
            single_file_name: faker.random.words(),
            has_multiple_single_files: faker.datatype.boolean(),
            single_file_paths: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            repositories_url: faker.random.words(),
            account: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
          },
          expires_at: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post(
    '/applications/:client_id/tokens/:access_token',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            url: faker.random.words(),
            scopes: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            token: faker.random.words(),
            token_last_eight: faker.random.words(),
            hashed_token: faker.random.words(),
            app: {
              client_id: faker.random.words(),
              name: faker.random.words(),
              url: faker.random.words(),
            },
            note: faker.random.words(),
            note_url: faker.random.words(),
            updated_at: faker.random.words(),
            created_at: faker.random.words(),
            fingerprint: faker.random.words(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            installation: {
              permissions: {
                actions: faker.random.arrayElement(['read', 'write']),
                administration: faker.random.arrayElement(['read', 'write']),
                checks: faker.random.arrayElement(['read', 'write']),
                contents: faker.random.arrayElement(['read', 'write']),
                deployments: faker.random.arrayElement(['read', 'write']),
                environments: faker.random.arrayElement(['read', 'write']),
                issues: faker.random.arrayElement(['read', 'write']),
                metadata: faker.random.arrayElement(['read', 'write']),
                packages: faker.random.arrayElement(['read', 'write']),
                pages: faker.random.arrayElement(['read', 'write']),
                pull_requests: faker.random.arrayElement(['read', 'write']),
                repository_hooks: faker.random.arrayElement(['read', 'write']),
                repository_projects: faker.random.arrayElement([
                  'read',
                  'write',
                  'admin',
                ]),
                secret_scanning_alerts: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
                secrets: faker.random.arrayElement(['read', 'write']),
                security_events: faker.random.arrayElement(['read', 'write']),
                single_file: faker.random.arrayElement(['read', 'write']),
                statuses: faker.random.arrayElement(['read', 'write']),
                vulnerability_alerts: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
                workflows: faker.random.arrayElement(['write']),
                members: faker.random.arrayElement(['read', 'write']),
                organization_administration: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
                organization_hooks: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
                organization_plan: faker.random.arrayElement(['read']),
                organization_projects: faker.random.arrayElement([
                  'read',
                  'write',
                  'admin',
                ]),
                organization_packages: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
                organization_secrets: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
                organization_self_hosted_runners: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
                organization_user_blocking: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
                team_discussions: faker.random.arrayElement(['read', 'write']),
                content_references: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
              },
              repository_selection: faker.random.arrayElement([
                'all',
                'selected',
              ]),
              single_file_name: faker.random.words(),
              has_multiple_single_files: faker.datatype.boolean(),
              single_file_paths: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              repositories_url: faker.random.words(),
              account: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
            },
            expires_at: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/applications/:client_id/tokens/:access_token',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get('/apps/:app_slug', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.datatype.number(),
          slug: faker.random.words(),
          node_id: faker.random.words(),
          owner: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          name: faker.random.words(),
          description: faker.random.words(),
          external_url: faker.random.words(),
          html_url: faker.random.words(),
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          permissions: {
            issues: faker.random.words(),
            checks: faker.random.words(),
            metadata: faker.random.words(),
            contents: faker.random.words(),
            deployments: faker.random.words(),
          },
          events: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
          installations_count: faker.datatype.number(),
          client_id: faker.random.words(),
          client_secret: faker.random.words(),
          webhook_secret: faker.random.words(),
          pem: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(415),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/authorizations', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.datatype.number(),
            url: faker.random.words(),
            scopes: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            token: faker.random.words(),
            token_last_eight: faker.random.words(),
            hashed_token: faker.random.words(),
            app: {
              client_id: faker.random.words(),
              name: faker.random.words(),
              url: faker.random.words(),
            },
            note: faker.random.words(),
            note_url: faker.random.words(),
            updated_at: faker.random.words(),
            created_at: faker.random.words(),
            fingerprint: faker.random.words(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            installation: {
              permissions: {
                actions: faker.random.arrayElement(['read', 'write']),
                administration: faker.random.arrayElement(['read', 'write']),
                checks: faker.random.arrayElement(['read', 'write']),
                contents: faker.random.arrayElement(['read', 'write']),
                deployments: faker.random.arrayElement(['read', 'write']),
                environments: faker.random.arrayElement(['read', 'write']),
                issues: faker.random.arrayElement(['read', 'write']),
                metadata: faker.random.arrayElement(['read', 'write']),
                packages: faker.random.arrayElement(['read', 'write']),
                pages: faker.random.arrayElement(['read', 'write']),
                pull_requests: faker.random.arrayElement(['read', 'write']),
                repository_hooks: faker.random.arrayElement(['read', 'write']),
                repository_projects: faker.random.arrayElement([
                  'read',
                  'write',
                  'admin',
                ]),
                secret_scanning_alerts: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
                secrets: faker.random.arrayElement(['read', 'write']),
                security_events: faker.random.arrayElement(['read', 'write']),
                single_file: faker.random.arrayElement(['read', 'write']),
                statuses: faker.random.arrayElement(['read', 'write']),
                vulnerability_alerts: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
                workflows: faker.random.arrayElement(['write']),
                members: faker.random.arrayElement(['read', 'write']),
                organization_administration: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
                organization_hooks: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
                organization_plan: faker.random.arrayElement(['read']),
                organization_projects: faker.random.arrayElement([
                  'read',
                  'write',
                  'admin',
                ]),
                organization_packages: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
                organization_secrets: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
                organization_self_hosted_runners: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
                organization_user_blocking: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
                team_discussions: faker.random.arrayElement(['read', 'write']),
                content_references: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
              },
              repository_selection: faker.random.arrayElement([
                'all',
                'selected',
              ]),
              single_file_name: faker.random.words(),
              has_multiple_single_files: faker.datatype.boolean(),
              single_file_paths: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              repositories_url: faker.random.words(),
              account: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
            },
            expires_at: faker.random.words(),
          }))
        ),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/authorizations', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json({
          id: faker.datatype.number(),
          url: faker.random.words(),
          scopes: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
          token: faker.random.words(),
          token_last_eight: faker.random.words(),
          hashed_token: faker.random.words(),
          app: {
            client_id: faker.random.words(),
            name: faker.random.words(),
            url: faker.random.words(),
          },
          note: faker.random.words(),
          note_url: faker.random.words(),
          updated_at: faker.random.words(),
          created_at: faker.random.words(),
          fingerprint: faker.random.words(),
          user: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          installation: {
            permissions: {
              actions: faker.random.arrayElement(['read', 'write']),
              administration: faker.random.arrayElement(['read', 'write']),
              checks: faker.random.arrayElement(['read', 'write']),
              contents: faker.random.arrayElement(['read', 'write']),
              deployments: faker.random.arrayElement(['read', 'write']),
              environments: faker.random.arrayElement(['read', 'write']),
              issues: faker.random.arrayElement(['read', 'write']),
              metadata: faker.random.arrayElement(['read', 'write']),
              packages: faker.random.arrayElement(['read', 'write']),
              pages: faker.random.arrayElement(['read', 'write']),
              pull_requests: faker.random.arrayElement(['read', 'write']),
              repository_hooks: faker.random.arrayElement(['read', 'write']),
              repository_projects: faker.random.arrayElement([
                'read',
                'write',
                'admin',
              ]),
              secret_scanning_alerts: faker.random.arrayElement([
                'read',
                'write',
              ]),
              secrets: faker.random.arrayElement(['read', 'write']),
              security_events: faker.random.arrayElement(['read', 'write']),
              single_file: faker.random.arrayElement(['read', 'write']),
              statuses: faker.random.arrayElement(['read', 'write']),
              vulnerability_alerts: faker.random.arrayElement([
                'read',
                'write',
              ]),
              workflows: faker.random.arrayElement(['write']),
              members: faker.random.arrayElement(['read', 'write']),
              organization_administration: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_hooks: faker.random.arrayElement(['read', 'write']),
              organization_plan: faker.random.arrayElement(['read']),
              organization_projects: faker.random.arrayElement([
                'read',
                'write',
                'admin',
              ]),
              organization_packages: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_secrets: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_self_hosted_runners: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_user_blocking: faker.random.arrayElement([
                'read',
                'write',
              ]),
              team_discussions: faker.random.arrayElement(['read', 'write']),
              content_references: faker.random.arrayElement(['read', 'write']),
            },
            repository_selection: faker.random.arrayElement([
              'all',
              'selected',
            ]),
            single_file_name: faker.random.words(),
            has_multiple_single_files: faker.datatype.boolean(),
            single_file_paths: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            repositories_url: faker.random.words(),
            account: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
          },
          expires_at: faker.random.words(),
        }),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(410),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.put('/authorizations/clients/:client_id', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.datatype.number(),
          url: faker.random.words(),
          scopes: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
          token: faker.random.words(),
          token_last_eight: faker.random.words(),
          hashed_token: faker.random.words(),
          app: {
            client_id: faker.random.words(),
            name: faker.random.words(),
            url: faker.random.words(),
          },
          note: faker.random.words(),
          note_url: faker.random.words(),
          updated_at: faker.random.words(),
          created_at: faker.random.words(),
          fingerprint: faker.random.words(),
          user: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          installation: {
            permissions: {
              actions: faker.random.arrayElement(['read', 'write']),
              administration: faker.random.arrayElement(['read', 'write']),
              checks: faker.random.arrayElement(['read', 'write']),
              contents: faker.random.arrayElement(['read', 'write']),
              deployments: faker.random.arrayElement(['read', 'write']),
              environments: faker.random.arrayElement(['read', 'write']),
              issues: faker.random.arrayElement(['read', 'write']),
              metadata: faker.random.arrayElement(['read', 'write']),
              packages: faker.random.arrayElement(['read', 'write']),
              pages: faker.random.arrayElement(['read', 'write']),
              pull_requests: faker.random.arrayElement(['read', 'write']),
              repository_hooks: faker.random.arrayElement(['read', 'write']),
              repository_projects: faker.random.arrayElement([
                'read',
                'write',
                'admin',
              ]),
              secret_scanning_alerts: faker.random.arrayElement([
                'read',
                'write',
              ]),
              secrets: faker.random.arrayElement(['read', 'write']),
              security_events: faker.random.arrayElement(['read', 'write']),
              single_file: faker.random.arrayElement(['read', 'write']),
              statuses: faker.random.arrayElement(['read', 'write']),
              vulnerability_alerts: faker.random.arrayElement([
                'read',
                'write',
              ]),
              workflows: faker.random.arrayElement(['write']),
              members: faker.random.arrayElement(['read', 'write']),
              organization_administration: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_hooks: faker.random.arrayElement(['read', 'write']),
              organization_plan: faker.random.arrayElement(['read']),
              organization_projects: faker.random.arrayElement([
                'read',
                'write',
                'admin',
              ]),
              organization_packages: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_secrets: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_self_hosted_runners: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_user_blocking: faker.random.arrayElement([
                'read',
                'write',
              ]),
              team_discussions: faker.random.arrayElement(['read', 'write']),
              content_references: faker.random.arrayElement(['read', 'write']),
            },
            repository_selection: faker.random.arrayElement([
              'all',
              'selected',
            ]),
            single_file_name: faker.random.words(),
            has_multiple_single_files: faker.datatype.boolean(),
            single_file_paths: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            repositories_url: faker.random.words(),
            account: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
          },
          expires_at: faker.random.words(),
        }),
      ],
      [
        ctx.status(201),
        ctx.json({
          id: faker.datatype.number(),
          url: faker.random.words(),
          scopes: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
          token: faker.random.words(),
          token_last_eight: faker.random.words(),
          hashed_token: faker.random.words(),
          app: {
            client_id: faker.random.words(),
            name: faker.random.words(),
            url: faker.random.words(),
          },
          note: faker.random.words(),
          note_url: faker.random.words(),
          updated_at: faker.random.words(),
          created_at: faker.random.words(),
          fingerprint: faker.random.words(),
          user: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          installation: {
            permissions: {
              actions: faker.random.arrayElement(['read', 'write']),
              administration: faker.random.arrayElement(['read', 'write']),
              checks: faker.random.arrayElement(['read', 'write']),
              contents: faker.random.arrayElement(['read', 'write']),
              deployments: faker.random.arrayElement(['read', 'write']),
              environments: faker.random.arrayElement(['read', 'write']),
              issues: faker.random.arrayElement(['read', 'write']),
              metadata: faker.random.arrayElement(['read', 'write']),
              packages: faker.random.arrayElement(['read', 'write']),
              pages: faker.random.arrayElement(['read', 'write']),
              pull_requests: faker.random.arrayElement(['read', 'write']),
              repository_hooks: faker.random.arrayElement(['read', 'write']),
              repository_projects: faker.random.arrayElement([
                'read',
                'write',
                'admin',
              ]),
              secret_scanning_alerts: faker.random.arrayElement([
                'read',
                'write',
              ]),
              secrets: faker.random.arrayElement(['read', 'write']),
              security_events: faker.random.arrayElement(['read', 'write']),
              single_file: faker.random.arrayElement(['read', 'write']),
              statuses: faker.random.arrayElement(['read', 'write']),
              vulnerability_alerts: faker.random.arrayElement([
                'read',
                'write',
              ]),
              workflows: faker.random.arrayElement(['write']),
              members: faker.random.arrayElement(['read', 'write']),
              organization_administration: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_hooks: faker.random.arrayElement(['read', 'write']),
              organization_plan: faker.random.arrayElement(['read']),
              organization_projects: faker.random.arrayElement([
                'read',
                'write',
                'admin',
              ]),
              organization_packages: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_secrets: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_self_hosted_runners: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_user_blocking: faker.random.arrayElement([
                'read',
                'write',
              ]),
              team_discussions: faker.random.arrayElement(['read', 'write']),
              content_references: faker.random.arrayElement(['read', 'write']),
            },
            repository_selection: faker.random.arrayElement([
              'all',
              'selected',
            ]),
            single_file_name: faker.random.words(),
            has_multiple_single_files: faker.datatype.boolean(),
            single_file_paths: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            repositories_url: faker.random.words(),
            account: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
          },
          expires_at: faker.random.words(),
        }),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.put(
    '/authorizations/clients/:client_id/:fingerprint',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            url: faker.random.words(),
            scopes: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            token: faker.random.words(),
            token_last_eight: faker.random.words(),
            hashed_token: faker.random.words(),
            app: {
              client_id: faker.random.words(),
              name: faker.random.words(),
              url: faker.random.words(),
            },
            note: faker.random.words(),
            note_url: faker.random.words(),
            updated_at: faker.random.words(),
            created_at: faker.random.words(),
            fingerprint: faker.random.words(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            installation: {
              permissions: {
                actions: faker.random.arrayElement(['read', 'write']),
                administration: faker.random.arrayElement(['read', 'write']),
                checks: faker.random.arrayElement(['read', 'write']),
                contents: faker.random.arrayElement(['read', 'write']),
                deployments: faker.random.arrayElement(['read', 'write']),
                environments: faker.random.arrayElement(['read', 'write']),
                issues: faker.random.arrayElement(['read', 'write']),
                metadata: faker.random.arrayElement(['read', 'write']),
                packages: faker.random.arrayElement(['read', 'write']),
                pages: faker.random.arrayElement(['read', 'write']),
                pull_requests: faker.random.arrayElement(['read', 'write']),
                repository_hooks: faker.random.arrayElement(['read', 'write']),
                repository_projects: faker.random.arrayElement([
                  'read',
                  'write',
                  'admin',
                ]),
                secret_scanning_alerts: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
                secrets: faker.random.arrayElement(['read', 'write']),
                security_events: faker.random.arrayElement(['read', 'write']),
                single_file: faker.random.arrayElement(['read', 'write']),
                statuses: faker.random.arrayElement(['read', 'write']),
                vulnerability_alerts: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
                workflows: faker.random.arrayElement(['write']),
                members: faker.random.arrayElement(['read', 'write']),
                organization_administration: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
                organization_hooks: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
                organization_plan: faker.random.arrayElement(['read']),
                organization_projects: faker.random.arrayElement([
                  'read',
                  'write',
                  'admin',
                ]),
                organization_packages: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
                organization_secrets: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
                organization_self_hosted_runners: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
                organization_user_blocking: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
                team_discussions: faker.random.arrayElement(['read', 'write']),
                content_references: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
              },
              repository_selection: faker.random.arrayElement([
                'all',
                'selected',
              ]),
              single_file_name: faker.random.words(),
              has_multiple_single_files: faker.datatype.boolean(),
              single_file_paths: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              repositories_url: faker.random.words(),
              account: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
            },
            expires_at: faker.random.words(),
          }),
        ],
        [
          ctx.status(201),
          ctx.json({
            id: faker.datatype.number(),
            url: faker.random.words(),
            scopes: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            token: faker.random.words(),
            token_last_eight: faker.random.words(),
            hashed_token: faker.random.words(),
            app: {
              client_id: faker.random.words(),
              name: faker.random.words(),
              url: faker.random.words(),
            },
            note: faker.random.words(),
            note_url: faker.random.words(),
            updated_at: faker.random.words(),
            created_at: faker.random.words(),
            fingerprint: faker.random.words(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            installation: {
              permissions: {
                actions: faker.random.arrayElement(['read', 'write']),
                administration: faker.random.arrayElement(['read', 'write']),
                checks: faker.random.arrayElement(['read', 'write']),
                contents: faker.random.arrayElement(['read', 'write']),
                deployments: faker.random.arrayElement(['read', 'write']),
                environments: faker.random.arrayElement(['read', 'write']),
                issues: faker.random.arrayElement(['read', 'write']),
                metadata: faker.random.arrayElement(['read', 'write']),
                packages: faker.random.arrayElement(['read', 'write']),
                pages: faker.random.arrayElement(['read', 'write']),
                pull_requests: faker.random.arrayElement(['read', 'write']),
                repository_hooks: faker.random.arrayElement(['read', 'write']),
                repository_projects: faker.random.arrayElement([
                  'read',
                  'write',
                  'admin',
                ]),
                secret_scanning_alerts: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
                secrets: faker.random.arrayElement(['read', 'write']),
                security_events: faker.random.arrayElement(['read', 'write']),
                single_file: faker.random.arrayElement(['read', 'write']),
                statuses: faker.random.arrayElement(['read', 'write']),
                vulnerability_alerts: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
                workflows: faker.random.arrayElement(['write']),
                members: faker.random.arrayElement(['read', 'write']),
                organization_administration: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
                organization_hooks: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
                organization_plan: faker.random.arrayElement(['read']),
                organization_projects: faker.random.arrayElement([
                  'read',
                  'write',
                  'admin',
                ]),
                organization_packages: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
                organization_secrets: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
                organization_self_hosted_runners: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
                organization_user_blocking: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
                team_discussions: faker.random.arrayElement(['read', 'write']),
                content_references: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
              },
              repository_selection: faker.random.arrayElement([
                'all',
                'selected',
              ]),
              single_file_name: faker.random.words(),
              has_multiple_single_files: faker.datatype.boolean(),
              single_file_paths: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              repositories_url: faker.random.words(),
              account: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
            },
            expires_at: faker.random.words(),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            errors: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              resource: faker.random.words(),
              field: faker.random.words(),
              message: faker.random.words(),
              code: faker.random.words(),
              index: faker.datatype.number(),
              value: {},
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get('/authorizations/:authorization_id', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.datatype.number(),
          url: faker.random.words(),
          scopes: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
          token: faker.random.words(),
          token_last_eight: faker.random.words(),
          hashed_token: faker.random.words(),
          app: {
            client_id: faker.random.words(),
            name: faker.random.words(),
            url: faker.random.words(),
          },
          note: faker.random.words(),
          note_url: faker.random.words(),
          updated_at: faker.random.words(),
          created_at: faker.random.words(),
          fingerprint: faker.random.words(),
          user: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          installation: {
            permissions: {
              actions: faker.random.arrayElement(['read', 'write']),
              administration: faker.random.arrayElement(['read', 'write']),
              checks: faker.random.arrayElement(['read', 'write']),
              contents: faker.random.arrayElement(['read', 'write']),
              deployments: faker.random.arrayElement(['read', 'write']),
              environments: faker.random.arrayElement(['read', 'write']),
              issues: faker.random.arrayElement(['read', 'write']),
              metadata: faker.random.arrayElement(['read', 'write']),
              packages: faker.random.arrayElement(['read', 'write']),
              pages: faker.random.arrayElement(['read', 'write']),
              pull_requests: faker.random.arrayElement(['read', 'write']),
              repository_hooks: faker.random.arrayElement(['read', 'write']),
              repository_projects: faker.random.arrayElement([
                'read',
                'write',
                'admin',
              ]),
              secret_scanning_alerts: faker.random.arrayElement([
                'read',
                'write',
              ]),
              secrets: faker.random.arrayElement(['read', 'write']),
              security_events: faker.random.arrayElement(['read', 'write']),
              single_file: faker.random.arrayElement(['read', 'write']),
              statuses: faker.random.arrayElement(['read', 'write']),
              vulnerability_alerts: faker.random.arrayElement([
                'read',
                'write',
              ]),
              workflows: faker.random.arrayElement(['write']),
              members: faker.random.arrayElement(['read', 'write']),
              organization_administration: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_hooks: faker.random.arrayElement(['read', 'write']),
              organization_plan: faker.random.arrayElement(['read']),
              organization_projects: faker.random.arrayElement([
                'read',
                'write',
                'admin',
              ]),
              organization_packages: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_secrets: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_self_hosted_runners: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_user_blocking: faker.random.arrayElement([
                'read',
                'write',
              ]),
              team_discussions: faker.random.arrayElement(['read', 'write']),
              content_references: faker.random.arrayElement(['read', 'write']),
            },
            repository_selection: faker.random.arrayElement([
              'all',
              'selected',
            ]),
            single_file_name: faker.random.words(),
            has_multiple_single_files: faker.datatype.boolean(),
            single_file_paths: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            repositories_url: faker.random.words(),
            account: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
          },
          expires_at: faker.random.words(),
        }),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.patch('/authorizations/:authorization_id', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.datatype.number(),
          url: faker.random.words(),
          scopes: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
          token: faker.random.words(),
          token_last_eight: faker.random.words(),
          hashed_token: faker.random.words(),
          app: {
            client_id: faker.random.words(),
            name: faker.random.words(),
            url: faker.random.words(),
          },
          note: faker.random.words(),
          note_url: faker.random.words(),
          updated_at: faker.random.words(),
          created_at: faker.random.words(),
          fingerprint: faker.random.words(),
          user: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          installation: {
            permissions: {
              actions: faker.random.arrayElement(['read', 'write']),
              administration: faker.random.arrayElement(['read', 'write']),
              checks: faker.random.arrayElement(['read', 'write']),
              contents: faker.random.arrayElement(['read', 'write']),
              deployments: faker.random.arrayElement(['read', 'write']),
              environments: faker.random.arrayElement(['read', 'write']),
              issues: faker.random.arrayElement(['read', 'write']),
              metadata: faker.random.arrayElement(['read', 'write']),
              packages: faker.random.arrayElement(['read', 'write']),
              pages: faker.random.arrayElement(['read', 'write']),
              pull_requests: faker.random.arrayElement(['read', 'write']),
              repository_hooks: faker.random.arrayElement(['read', 'write']),
              repository_projects: faker.random.arrayElement([
                'read',
                'write',
                'admin',
              ]),
              secret_scanning_alerts: faker.random.arrayElement([
                'read',
                'write',
              ]),
              secrets: faker.random.arrayElement(['read', 'write']),
              security_events: faker.random.arrayElement(['read', 'write']),
              single_file: faker.random.arrayElement(['read', 'write']),
              statuses: faker.random.arrayElement(['read', 'write']),
              vulnerability_alerts: faker.random.arrayElement([
                'read',
                'write',
              ]),
              workflows: faker.random.arrayElement(['write']),
              members: faker.random.arrayElement(['read', 'write']),
              organization_administration: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_hooks: faker.random.arrayElement(['read', 'write']),
              organization_plan: faker.random.arrayElement(['read']),
              organization_projects: faker.random.arrayElement([
                'read',
                'write',
                'admin',
              ]),
              organization_packages: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_secrets: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_self_hosted_runners: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_user_blocking: faker.random.arrayElement([
                'read',
                'write',
              ]),
              team_discussions: faker.random.arrayElement(['read', 'write']),
              content_references: faker.random.arrayElement(['read', 'write']),
            },
            repository_selection: faker.random.arrayElement([
              'all',
              'selected',
            ]),
            single_file_name: faker.random.words(),
            has_multiple_single_files: faker.datatype.boolean(),
            single_file_paths: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            repositories_url: faker.random.words(),
            account: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
          },
          expires_at: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/authorizations/:authorization_id', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/codes_of_conduct', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            key: faker.random.words(),
            name: faker.random.words(),
            url: faker.random.words(),
            body: faker.random.words(),
            html_url: faker.random.words(),
          }))
        ),
      ],
      [ctx.status(304), ctx.json({})],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/codes_of_conduct/:key', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          key: faker.random.words(),
          name: faker.random.words(),
          url: faker.random.words(),
          body: faker.random.words(),
          html_url: faker.random.words(),
        }),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/emojis', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(200), ctx.json({})],
      [ctx.status(304), ctx.json({})],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/enterprise/announcement', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          announcement: faker.random.words(),
          expires_at: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.patch('/enterprise/announcement', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          announcement: faker.random.words(),
          expires_at: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/enterprise/announcement', (req, res, ctx) => {
    const resultArrray = [[ctx.status(204), ctx.json({})]];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/enterprise/settings/license', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          seats: {},
          seats_used: faker.datatype.number(),
          seats_available: {},
          kind: faker.random.words(),
          days_until_expiration: faker.datatype.number(),
          expire_at: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/enterprise/stats/all', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          repos: {
            total_repos: faker.datatype.number(),
            root_repos: faker.datatype.number(),
            fork_repos: faker.datatype.number(),
            org_repos: faker.datatype.number(),
            total_pushes: faker.datatype.number(),
            total_wikis: faker.datatype.number(),
          },
          hooks: {
            total_hooks: faker.datatype.number(),
            active_hooks: faker.datatype.number(),
            inactive_hooks: faker.datatype.number(),
          },
          pages: {
            total_pages: faker.datatype.number(),
          },
          orgs: {
            total_orgs: faker.datatype.number(),
            disabled_orgs: faker.datatype.number(),
            total_teams: faker.datatype.number(),
            total_team_members: faker.datatype.number(),
          },
          users: {
            total_users: faker.datatype.number(),
            admin_users: faker.datatype.number(),
            suspended_users: faker.datatype.number(),
          },
          pulls: {
            total_pulls: faker.datatype.number(),
            merged_pulls: faker.datatype.number(),
            mergeable_pulls: faker.datatype.number(),
            unmergeable_pulls: faker.datatype.number(),
          },
          issues: {
            total_issues: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            closed_issues: faker.datatype.number(),
          },
          milestones: {
            total_milestones: faker.datatype.number(),
            open_milestones: faker.datatype.number(),
            closed_milestones: faker.datatype.number(),
          },
          gists: {
            total_gists: faker.datatype.number(),
            private_gists: faker.datatype.number(),
            public_gists: faker.datatype.number(),
          },
          comments: {
            total_commit_comments: faker.datatype.number(),
            total_gist_comments: faker.datatype.number(),
            total_issue_comments: faker.datatype.number(),
            total_pull_request_comments: faker.datatype.number(),
          },
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/enterprise/stats/comments', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          total_commit_comments: faker.datatype.number(),
          total_gist_comments: faker.datatype.number(),
          total_issue_comments: faker.datatype.number(),
          total_pull_request_comments: faker.datatype.number(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/enterprise/stats/gists', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          total_gists: faker.datatype.number(),
          private_gists: faker.datatype.number(),
          public_gists: faker.datatype.number(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/enterprise/stats/hooks', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          total_hooks: faker.datatype.number(),
          active_hooks: faker.datatype.number(),
          inactive_hooks: faker.datatype.number(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/enterprise/stats/issues', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          total_issues: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          closed_issues: faker.datatype.number(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/enterprise/stats/milestones', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          total_milestones: faker.datatype.number(),
          open_milestones: faker.datatype.number(),
          closed_milestones: faker.datatype.number(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/enterprise/stats/orgs', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          total_orgs: faker.datatype.number(),
          disabled_orgs: faker.datatype.number(),
          total_teams: faker.datatype.number(),
          total_team_members: faker.datatype.number(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/enterprise/stats/pages', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          total_pages: faker.datatype.number(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/enterprise/stats/pulls', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          total_pulls: faker.datatype.number(),
          merged_pulls: faker.datatype.number(),
          mergeable_pulls: faker.datatype.number(),
          unmergeable_pulls: faker.datatype.number(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/enterprise/stats/repos', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          total_repos: faker.datatype.number(),
          root_repos: faker.datatype.number(),
          fork_repos: faker.datatype.number(),
          org_repos: faker.datatype.number(),
          total_pushes: faker.datatype.number(),
          total_wikis: faker.datatype.number(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/enterprise/stats/users', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          total_users: faker.datatype.number(),
          admin_users: faker.datatype.number(),
          suspended_users: faker.datatype.number(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/enterprises/:enterprise/actions/permissions', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          enabled_organizations: faker.random.arrayElement([
            'all',
            'none',
            'selected',
          ]),
          selected_organizations_url: faker.random.words(),
          allowed_actions: faker.random.arrayElement([
            'all',
            'local_only',
            'selected',
          ]),
          selected_actions_url: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.put('/enterprises/:enterprise/actions/permissions', (req, res, ctx) => {
    const resultArrray = [[ctx.status(204), ctx.json({})]];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get(
    '/enterprises/:enterprise/actions/permissions/organizations',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            total_count: faker.datatype.number(),
            organizations: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              hooks_url: faker.random.words(),
              issues_url: faker.random.words(),
              members_url: faker.random.words(),
              public_members_url: faker.random.words(),
              avatar_url: faker.random.words(),
              description: faker.random.words(),
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.put(
    '/enterprises/:enterprise/actions/permissions/organizations',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.put(
    '/enterprises/:enterprise/actions/permissions/organizations/:org_id',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/enterprises/:enterprise/actions/permissions/organizations/:org_id',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/enterprises/:enterprise/actions/permissions/selected-actions',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            github_owned_allowed: faker.datatype.boolean(),
            patterns_allowed: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.put(
    '/enterprises/:enterprise/actions/permissions/selected-actions',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/enterprises/:enterprise/actions/runner-groups',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            total_count: faker.datatype.number(),
            runner_groups: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              name: faker.random.words(),
              visibility: faker.random.words(),
              default: faker.datatype.boolean(),
              selected_organizations_url: faker.random.words(),
              runners_url: faker.random.words(),
              allows_public_repositories: faker.datatype.boolean(),
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.post(
    '/enterprises/:enterprise/actions/runner-groups',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(201),
          ctx.json({
            id: faker.datatype.number(),
            name: faker.random.words(),
            visibility: faker.random.words(),
            default: faker.datatype.boolean(),
            selected_organizations_url: faker.random.words(),
            runners_url: faker.random.words(),
            allows_public_repositories: faker.datatype.boolean(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/enterprises/:enterprise/actions/runner-groups/:runner_group_id',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            name: faker.random.words(),
            visibility: faker.random.words(),
            default: faker.datatype.boolean(),
            selected_organizations_url: faker.random.words(),
            runners_url: faker.random.words(),
            allows_public_repositories: faker.datatype.boolean(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.patch(
    '/enterprises/:enterprise/actions/runner-groups/:runner_group_id',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            name: faker.random.words(),
            visibility: faker.random.words(),
            default: faker.datatype.boolean(),
            selected_organizations_url: faker.random.words(),
            runners_url: faker.random.words(),
            allows_public_repositories: faker.datatype.boolean(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/enterprises/:enterprise/actions/runner-groups/:runner_group_id',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/enterprises/:enterprise/actions/runner-groups/:runner_group_id/organizations',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            total_count: faker.datatype.number(),
            organizations: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              hooks_url: faker.random.words(),
              issues_url: faker.random.words(),
              members_url: faker.random.words(),
              public_members_url: faker.random.words(),
              avatar_url: faker.random.words(),
              description: faker.random.words(),
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.put(
    '/enterprises/:enterprise/actions/runner-groups/:runner_group_id/organizations',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.put(
    '/enterprises/:enterprise/actions/runner-groups/:runner_group_id/organizations/:org_id',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/enterprises/:enterprise/actions/runner-groups/:runner_group_id/organizations/:org_id',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/enterprises/:enterprise/actions/runner-groups/:runner_group_id/runners',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            total_count: faker.datatype.number(),
            runners: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              name: faker.random.words(),
              os: faker.random.words(),
              status: faker.random.words(),
              busy: faker.datatype.boolean(),
              labels: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => ({
                id: faker.datatype.number(),
                name: faker.random.words(),
                type: faker.random.arrayElement(['read-only', 'custom']),
              })),
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.put(
    '/enterprises/:enterprise/actions/runner-groups/:runner_group_id/runners',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.put(
    '/enterprises/:enterprise/actions/runner-groups/:runner_group_id/runners/:runner_id',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/enterprises/:enterprise/actions/runner-groups/:runner_group_id/runners/:runner_id',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get('/enterprises/:enterprise/actions/runners', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          total_count: faker.datatype.number(),
          runners: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            name: faker.random.words(),
            os: faker.random.words(),
            status: faker.random.words(),
            busy: faker.datatype.boolean(),
            labels: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              name: faker.random.words(),
              type: faker.random.arrayElement(['read-only', 'custom']),
            })),
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get(
    '/enterprises/:enterprise/actions/runners/downloads',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json(
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
              _ => ({
                os: faker.random.words(),
                architecture: faker.random.words(),
                download_url: faker.random.words(),
                filename: faker.random.words(),
                temp_download_token: faker.random.words(),
                sha256_checksum: faker.random.words(),
              })
            )
          ),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.post(
    '/enterprises/:enterprise/actions/runners/registration-token',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(201),
          ctx.json({
            token: faker.random.words(),
            expires_at: faker.random.words(),
            permissions: {},
            repositories: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              license: {
                key: faker.random.words(),
                name: faker.random.words(),
                url: faker.random.words(),
                spdx_id: faker.random.words(),
                node_id: faker.random.words(),
                html_url: faker.random.words(),
              },
              organization: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              allow_rebase_merge: faker.datatype.boolean(),
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                owner: {
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.random.words(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.random.words(),
              starred_at: faker.random.words(),
            })),
            single_file: faker.random.words(),
            repository_selection: faker.random.arrayElement([
              'all',
              'selected',
            ]),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.post(
    '/enterprises/:enterprise/actions/runners/remove-token',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(201),
          ctx.json({
            token: faker.random.words(),
            expires_at: faker.random.words(),
            permissions: {},
            repositories: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              license: {
                key: faker.random.words(),
                name: faker.random.words(),
                url: faker.random.words(),
                spdx_id: faker.random.words(),
                node_id: faker.random.words(),
                html_url: faker.random.words(),
              },
              organization: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              allow_rebase_merge: faker.datatype.boolean(),
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                owner: {
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.random.words(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.random.words(),
              starred_at: faker.random.words(),
            })),
            single_file: faker.random.words(),
            repository_selection: faker.random.arrayElement([
              'all',
              'selected',
            ]),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/enterprises/:enterprise/actions/runners/:runner_id',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            name: faker.random.words(),
            os: faker.random.words(),
            status: faker.random.words(),
            busy: faker.datatype.boolean(),
            labels: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              name: faker.random.words(),
              type: faker.random.arrayElement(['read-only', 'custom']),
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/enterprises/:enterprise/actions/runners/:runner_id',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get('/enterprises/:enterprise/audit-log', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            '@timestamp': faker.datatype.number(),
            action: faker.random.words(),
            active: faker.datatype.boolean(),
            active_was: faker.datatype.boolean(),
            actor: faker.random.words(),
            actor_id: faker.datatype.number(),
            actor_location: {
              country_name: faker.random.words(),
            },
            data: {},
            org_id: faker.datatype.number(),
            blocked_user: faker.random.words(),
            business: faker.random.words(),
            config: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({})),
            config_was: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({})),
            content_type: faker.random.words(),
            created_at: faker.datatype.number(),
            deploy_key_fingerprint: faker.random.words(),
            _document_id: faker.random.words(),
            emoji: faker.random.words(),
            events: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({})),
            events_were: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({})),
            explanation: faker.random.words(),
            fingerprint: faker.random.words(),
            hook_id: faker.datatype.number(),
            limited_availability: faker.datatype.boolean(),
            message: faker.random.words(),
            name: faker.random.words(),
            old_user: faker.random.words(),
            openssh_public_key: faker.random.words(),
            org: faker.random.words(),
            previous_visibility: faker.random.words(),
            read_only: faker.datatype.boolean(),
            repo: faker.random.words(),
            repository: faker.random.words(),
            repository_public: faker.datatype.boolean(),
            target_login: faker.random.words(),
            team: faker.random.words(),
            transport_protocol: faker.datatype.number(),
            transport_protocol_name: faker.random.words(),
            user: faker.random.words(),
            visibility: faker.random.words(),
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/events', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.random.words(),
            type: faker.random.words(),
            actor: {},
            repo: {
              id: faker.datatype.number(),
              name: faker.random.words(),
              url: faker.random.words(),
            },
            org: {},
            payload: {
              action: faker.random.words(),
              issue: {},
              comment: {},
              pages: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => ({
                page_name: faker.random.words(),
                title: faker.random.words(),
                summary: faker.random.words(),
                action: faker.random.words(),
                sha: faker.random.words(),
                html_url: faker.random.words(),
              })),
            },
            public: faker.datatype.boolean(),
            created_at: faker.random.words(),
          }))
        ),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(503),
        ctx.json({
          code: faker.random.words(),
          message: faker.random.words(),
          documentation_url: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/feeds', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          timeline_url: faker.random.words(),
          user_url: faker.random.words(),
          current_user_public_url: faker.random.words(),
          current_user_url: faker.random.words(),
          current_user_actor_url: faker.random.words(),
          current_user_organization_url: faker.random.words(),
          current_user_organization_urls: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
          security_advisories_url: faker.random.words(),
          _links: {
            timeline: {
              href: faker.random.words(),
              type: faker.random.words(),
            },
            user: {
              href: faker.random.words(),
              type: faker.random.words(),
            },
            security_advisories: {
              href: faker.random.words(),
              type: faker.random.words(),
            },
            current_user: {
              href: faker.random.words(),
              type: faker.random.words(),
            },
            current_user_public: {
              href: faker.random.words(),
              type: faker.random.words(),
            },
            current_user_actor: {
              href: faker.random.words(),
              type: faker.random.words(),
            },
            current_user_organization: {
              href: faker.random.words(),
              type: faker.random.words(),
            },
            current_user_organizations: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              href: faker.random.words(),
              type: faker.random.words(),
            })),
          },
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/gists', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            url: faker.random.words(),
            forks_url: faker.random.words(),
            commits_url: faker.random.words(),
            id: faker.random.words(),
            node_id: faker.random.words(),
            git_pull_url: faker.random.words(),
            git_push_url: faker.random.words(),
            html_url: faker.random.words(),
            files: {},
            public: faker.datatype.boolean(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            description: faker.random.words(),
            comments: faker.datatype.number(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            comments_url: faker.random.words(),
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            truncated: faker.datatype.boolean(),
            forks: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({})),
            history: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({})),
          }))
        ),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/gists', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json({
          forks: [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
            _ => ({
              id: faker.random.words(),
              url: faker.random.words(),
              user: {},
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
            })
          ),
          history: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            user: {},
            version: faker.random.words(),
            committed_at: faker.random.words(),
            change_status: {
              total: faker.datatype.number(),
              additions: faker.datatype.number(),
              deletions: faker.datatype.number(),
            },
            url: faker.random.words(),
          })),
          fork_of: {
            url: faker.random.words(),
            forks_url: faker.random.words(),
            commits_url: faker.random.words(),
            id: faker.random.words(),
            node_id: faker.random.words(),
            git_pull_url: faker.random.words(),
            git_push_url: faker.random.words(),
            html_url: faker.random.words(),
            files: {},
            public: faker.datatype.boolean(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            description: faker.random.words(),
            comments: faker.datatype.number(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            comments_url: faker.random.words(),
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            truncated: faker.datatype.boolean(),
            forks: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({})),
            history: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({})),
          },
          url: faker.random.words(),
          forks_url: faker.random.words(),
          commits_url: faker.random.words(),
          id: faker.random.words(),
          node_id: faker.random.words(),
          git_pull_url: faker.random.words(),
          git_push_url: faker.random.words(),
          html_url: faker.random.words(),
          files: {},
          public: faker.datatype.boolean(),
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          description: faker.random.words(),
          comments: faker.datatype.number(),
          user: faker.random.words(),
          comments_url: faker.random.words(),
          owner: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          truncated: faker.datatype.boolean(),
        }),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/gists/public', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            url: faker.random.words(),
            forks_url: faker.random.words(),
            commits_url: faker.random.words(),
            id: faker.random.words(),
            node_id: faker.random.words(),
            git_pull_url: faker.random.words(),
            git_push_url: faker.random.words(),
            html_url: faker.random.words(),
            files: {},
            public: faker.datatype.boolean(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            description: faker.random.words(),
            comments: faker.datatype.number(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            comments_url: faker.random.words(),
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            truncated: faker.datatype.boolean(),
            forks: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({})),
            history: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({})),
          }))
        ),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/gists/starred', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            url: faker.random.words(),
            forks_url: faker.random.words(),
            commits_url: faker.random.words(),
            id: faker.random.words(),
            node_id: faker.random.words(),
            git_pull_url: faker.random.words(),
            git_push_url: faker.random.words(),
            html_url: faker.random.words(),
            files: {},
            public: faker.datatype.boolean(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            description: faker.random.words(),
            comments: faker.datatype.number(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            comments_url: faker.random.words(),
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            truncated: faker.datatype.boolean(),
            forks: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({})),
            history: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({})),
          }))
        ),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/gists/:gist_id', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          forks: [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
            _ => ({
              id: faker.random.words(),
              url: faker.random.words(),
              user: {},
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
            })
          ),
          history: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            user: {},
            version: faker.random.words(),
            committed_at: faker.random.words(),
            change_status: {
              total: faker.datatype.number(),
              additions: faker.datatype.number(),
              deletions: faker.datatype.number(),
            },
            url: faker.random.words(),
          })),
          fork_of: {
            url: faker.random.words(),
            forks_url: faker.random.words(),
            commits_url: faker.random.words(),
            id: faker.random.words(),
            node_id: faker.random.words(),
            git_pull_url: faker.random.words(),
            git_push_url: faker.random.words(),
            html_url: faker.random.words(),
            files: {},
            public: faker.datatype.boolean(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            description: faker.random.words(),
            comments: faker.datatype.number(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            comments_url: faker.random.words(),
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            truncated: faker.datatype.boolean(),
            forks: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({})),
            history: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({})),
          },
          url: faker.random.words(),
          forks_url: faker.random.words(),
          commits_url: faker.random.words(),
          id: faker.random.words(),
          node_id: faker.random.words(),
          git_pull_url: faker.random.words(),
          git_push_url: faker.random.words(),
          html_url: faker.random.words(),
          files: {},
          public: faker.datatype.boolean(),
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          description: faker.random.words(),
          comments: faker.datatype.number(),
          user: faker.random.words(),
          comments_url: faker.random.words(),
          owner: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          truncated: faker.datatype.boolean(),
        }),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(403),
        ctx.json({
          block: {
            reason: faker.random.words(),
            created_at: faker.random.words(),
            html_url: faker.random.words(),
          },
          message: faker.random.words(),
          documentation_url: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.patch('/gists/:gist_id', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          forks: [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
            _ => ({
              id: faker.random.words(),
              url: faker.random.words(),
              user: {},
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
            })
          ),
          history: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            user: {},
            version: faker.random.words(),
            committed_at: faker.random.words(),
            change_status: {
              total: faker.datatype.number(),
              additions: faker.datatype.number(),
              deletions: faker.datatype.number(),
            },
            url: faker.random.words(),
          })),
          fork_of: {
            url: faker.random.words(),
            forks_url: faker.random.words(),
            commits_url: faker.random.words(),
            id: faker.random.words(),
            node_id: faker.random.words(),
            git_pull_url: faker.random.words(),
            git_push_url: faker.random.words(),
            html_url: faker.random.words(),
            files: {},
            public: faker.datatype.boolean(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            description: faker.random.words(),
            comments: faker.datatype.number(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            comments_url: faker.random.words(),
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            truncated: faker.datatype.boolean(),
            forks: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({})),
            history: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({})),
          },
          url: faker.random.words(),
          forks_url: faker.random.words(),
          commits_url: faker.random.words(),
          id: faker.random.words(),
          node_id: faker.random.words(),
          git_pull_url: faker.random.words(),
          git_push_url: faker.random.words(),
          html_url: faker.random.words(),
          files: {},
          public: faker.datatype.boolean(),
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          description: faker.random.words(),
          comments: faker.datatype.number(),
          user: faker.random.words(),
          comments_url: faker.random.words(),
          owner: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          truncated: faker.datatype.boolean(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/gists/:gist_id', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/gists/:gist_id/comments', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            url: faker.random.words(),
            body: faker.random.words(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            author_association: faker.random.arrayElement([
              'COLLABORATOR',
              'CONTRIBUTOR',
              'FIRST_TIMER',
              'FIRST_TIME_CONTRIBUTOR',
              'MANNEQUIN',
              'MEMBER',
              'NONE',
              'OWNER',
            ]),
          }))
        ),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/gists/:gist_id/comments', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json({
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          url: faker.random.words(),
          body: faker.random.words(),
          user: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          author_association: faker.random.arrayElement([
            'COLLABORATOR',
            'CONTRIBUTOR',
            'FIRST_TIMER',
            'FIRST_TIME_CONTRIBUTOR',
            'MANNEQUIN',
            'MEMBER',
            'NONE',
            'OWNER',
          ]),
        }),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/gists/:gist_id/comments/:comment_id', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          url: faker.random.words(),
          body: faker.random.words(),
          user: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          author_association: faker.random.arrayElement([
            'COLLABORATOR',
            'CONTRIBUTOR',
            'FIRST_TIMER',
            'FIRST_TIME_CONTRIBUTOR',
            'MANNEQUIN',
            'MEMBER',
            'NONE',
            'OWNER',
          ]),
        }),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(403),
        ctx.json({
          block: {
            reason: faker.random.words(),
            created_at: faker.random.words(),
            html_url: faker.random.words(),
          },
          message: faker.random.words(),
          documentation_url: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.patch('/gists/:gist_id/comments/:comment_id', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          url: faker.random.words(),
          body: faker.random.words(),
          user: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          author_association: faker.random.arrayElement([
            'COLLABORATOR',
            'CONTRIBUTOR',
            'FIRST_TIMER',
            'FIRST_TIME_CONTRIBUTOR',
            'MANNEQUIN',
            'MEMBER',
            'NONE',
            'OWNER',
          ]),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/gists/:gist_id/comments/:comment_id', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/gists/:gist_id/commits', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            url: faker.random.words(),
            version: faker.random.words(),
            user: {},
            change_status: {
              total: faker.datatype.number(),
              additions: faker.datatype.number(),
              deletions: faker.datatype.number(),
            },
            committed_at: faker.random.words(),
          }))
        ),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/gists/:gist_id/forks', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            forks: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              id: faker.random.words(),
              url: faker.random.words(),
              user: {},
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
            })),
            history: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              user: {},
              version: faker.random.words(),
              committed_at: faker.random.words(),
              change_status: {
                total: faker.datatype.number(),
                additions: faker.datatype.number(),
                deletions: faker.datatype.number(),
              },
              url: faker.random.words(),
            })),
            fork_of: {
              url: faker.random.words(),
              forks_url: faker.random.words(),
              commits_url: faker.random.words(),
              id: faker.random.words(),
              node_id: faker.random.words(),
              git_pull_url: faker.random.words(),
              git_push_url: faker.random.words(),
              html_url: faker.random.words(),
              files: {},
              public: faker.datatype.boolean(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              description: faker.random.words(),
              comments: faker.datatype.number(),
              user: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              comments_url: faker.random.words(),
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              truncated: faker.datatype.boolean(),
              forks: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => ({})),
              history: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => ({})),
            },
            url: faker.random.words(),
            forks_url: faker.random.words(),
            commits_url: faker.random.words(),
            id: faker.random.words(),
            node_id: faker.random.words(),
            git_pull_url: faker.random.words(),
            git_push_url: faker.random.words(),
            html_url: faker.random.words(),
            files: {},
            public: faker.datatype.boolean(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            description: faker.random.words(),
            comments: faker.datatype.number(),
            user: faker.random.words(),
            comments_url: faker.random.words(),
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            truncated: faker.datatype.boolean(),
          }))
        ),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/gists/:gist_id/forks', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json({
          url: faker.random.words(),
          forks_url: faker.random.words(),
          commits_url: faker.random.words(),
          id: faker.random.words(),
          node_id: faker.random.words(),
          git_pull_url: faker.random.words(),
          git_push_url: faker.random.words(),
          html_url: faker.random.words(),
          files: {},
          public: faker.datatype.boolean(),
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          description: faker.random.words(),
          comments: faker.datatype.number(),
          user: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          comments_url: faker.random.words(),
          owner: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          truncated: faker.datatype.boolean(),
          forks: [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
            _ => ({})
          ),
          history: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({})),
        }),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/gists/:gist_id/star', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [ctx.status(404), ctx.json({})],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.put('/gists/:gist_id/star', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/gists/:gist_id/star', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/gists/:gist_id/:sha', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          forks: [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
            _ => ({
              id: faker.random.words(),
              url: faker.random.words(),
              user: {},
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
            })
          ),
          history: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            user: {},
            version: faker.random.words(),
            committed_at: faker.random.words(),
            change_status: {
              total: faker.datatype.number(),
              additions: faker.datatype.number(),
              deletions: faker.datatype.number(),
            },
            url: faker.random.words(),
          })),
          fork_of: {
            url: faker.random.words(),
            forks_url: faker.random.words(),
            commits_url: faker.random.words(),
            id: faker.random.words(),
            node_id: faker.random.words(),
            git_pull_url: faker.random.words(),
            git_push_url: faker.random.words(),
            html_url: faker.random.words(),
            files: {},
            public: faker.datatype.boolean(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            description: faker.random.words(),
            comments: faker.datatype.number(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            comments_url: faker.random.words(),
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            truncated: faker.datatype.boolean(),
            forks: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({})),
            history: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({})),
          },
          url: faker.random.words(),
          forks_url: faker.random.words(),
          commits_url: faker.random.words(),
          id: faker.random.words(),
          node_id: faker.random.words(),
          git_pull_url: faker.random.words(),
          git_push_url: faker.random.words(),
          html_url: faker.random.words(),
          files: {},
          public: faker.datatype.boolean(),
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          description: faker.random.words(),
          comments: faker.datatype.number(),
          user: faker.random.words(),
          comments_url: faker.random.words(),
          owner: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          truncated: faker.datatype.boolean(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/gitignore/templates', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ =>
            faker.random.words()
          )
        ),
      ],
      [ctx.status(304), ctx.json({})],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/gitignore/templates/:name', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          name: faker.random.words(),
          source: faker.random.words(),
        }),
      ],
      [ctx.status(304), ctx.json({})],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/installation/repositories', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          total_count: faker.datatype.number(),
          repositories: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            full_name: faker.random.words(),
            license: {
              key: faker.random.words(),
              name: faker.random.words(),
              url: faker.random.words(),
              spdx_id: faker.random.words(),
              node_id: faker.random.words(),
              html_url: faker.random.words(),
            },
            organization: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.random.words(),
            description: faker.random.words(),
            fork: faker.datatype.boolean(),
            url: faker.random.words(),
            archive_url: faker.random.words(),
            assignees_url: faker.random.words(),
            blobs_url: faker.random.words(),
            branches_url: faker.random.words(),
            collaborators_url: faker.random.words(),
            comments_url: faker.random.words(),
            commits_url: faker.random.words(),
            compare_url: faker.random.words(),
            contents_url: faker.random.words(),
            contributors_url: faker.random.words(),
            deployments_url: faker.random.words(),
            downloads_url: faker.random.words(),
            events_url: faker.random.words(),
            forks_url: faker.random.words(),
            git_commits_url: faker.random.words(),
            git_refs_url: faker.random.words(),
            git_tags_url: faker.random.words(),
            git_url: faker.random.words(),
            issue_comment_url: faker.random.words(),
            issue_events_url: faker.random.words(),
            issues_url: faker.random.words(),
            keys_url: faker.random.words(),
            labels_url: faker.random.words(),
            languages_url: faker.random.words(),
            merges_url: faker.random.words(),
            milestones_url: faker.random.words(),
            notifications_url: faker.random.words(),
            pulls_url: faker.random.words(),
            releases_url: faker.random.words(),
            ssh_url: faker.random.words(),
            stargazers_url: faker.random.words(),
            statuses_url: faker.random.words(),
            subscribers_url: faker.random.words(),
            subscription_url: faker.random.words(),
            tags_url: faker.random.words(),
            teams_url: faker.random.words(),
            trees_url: faker.random.words(),
            clone_url: faker.random.words(),
            mirror_url: faker.random.words(),
            hooks_url: faker.random.words(),
            svn_url: faker.random.words(),
            homepage: faker.random.words(),
            language: faker.random.words(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.random.words(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.random.words(),
            pushed_at: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            allow_rebase_merge: faker.datatype.boolean(),
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              owner: {
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.random.words(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.random.words(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.random.words(),
            starred_at: faker.random.words(),
          })),
          repository_selection: faker.random.words(),
        }),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/installation/token', (req, res, ctx) => {
    const resultArrray = [[ctx.status(204), ctx.json({})]];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/issues', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            url: faker.random.words(),
            repository_url: faker.random.words(),
            labels_url: faker.random.words(),
            comments_url: faker.random.words(),
            events_url: faker.random.words(),
            html_url: faker.random.words(),
            number: faker.datatype.number(),
            state: faker.random.words(),
            title: faker.random.words(),
            body: faker.random.words(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            labels: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({})),
            assignee: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            assignees: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            })),
            milestone: {
              url: faker.random.words(),
              html_url: faker.random.words(),
              labels_url: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              number: faker.datatype.number(),
              state: faker.random.arrayElement(['open', 'closed']),
              title: faker.random.words(),
              description: faker.random.words(),
              creator: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              open_issues: faker.datatype.number(),
              closed_issues: faker.datatype.number(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              closed_at: faker.random.words(),
              due_on: faker.random.words(),
            },
            locked: faker.datatype.boolean(),
            active_lock_reason: faker.random.words(),
            comments: faker.datatype.number(),
            pull_request: {
              merged_at: faker.random.words(),
              diff_url: faker.random.words(),
              html_url: faker.random.words(),
              patch_url: faker.random.words(),
              url: faker.random.words(),
            },
            closed_at: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            draft: faker.datatype.boolean(),
            closed_by: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            body_html: faker.random.words(),
            body_text: faker.random.words(),
            timeline_url: faker.random.words(),
            repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              license: {
                key: faker.random.words(),
                name: faker.random.words(),
                url: faker.random.words(),
                spdx_id: faker.random.words(),
                node_id: faker.random.words(),
                html_url: faker.random.words(),
              },
              organization: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              allow_rebase_merge: faker.datatype.boolean(),
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                owner: {
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.random.words(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.random.words(),
              starred_at: faker.random.words(),
            },
            performed_via_github_app: {
              id: faker.datatype.number(),
              slug: faker.random.words(),
              node_id: faker.random.words(),
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              name: faker.random.words(),
              description: faker.random.words(),
              external_url: faker.random.words(),
              html_url: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                issues: faker.random.words(),
                checks: faker.random.words(),
                metadata: faker.random.words(),
                contents: faker.random.words(),
                deployments: faker.random.words(),
              },
              events: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              installations_count: faker.datatype.number(),
              client_id: faker.random.words(),
              client_secret: faker.random.words(),
              webhook_secret: faker.random.words(),
              pem: faker.random.words(),
            },
            author_association: faker.random.arrayElement([
              'COLLABORATOR',
              'CONTRIBUTOR',
              'FIRST_TIMER',
              'FIRST_TIME_CONTRIBUTOR',
              'MANNEQUIN',
              'MEMBER',
              'NONE',
              'OWNER',
            ]),
            reactions: {
              url: faker.random.words(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }))
        ),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/licenses', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            key: faker.random.words(),
            name: faker.random.words(),
            url: faker.random.words(),
            spdx_id: faker.random.words(),
            node_id: faker.random.words(),
            html_url: faker.random.words(),
          }))
        ),
      ],
      [ctx.status(304), ctx.json({})],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/licenses/:license', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          key: faker.random.words(),
          name: faker.random.words(),
          spdx_id: faker.random.words(),
          url: faker.random.words(),
          node_id: faker.random.words(),
          html_url: faker.random.words(),
          description: faker.random.words(),
          implementation: faker.random.words(),
          permissions: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
          conditions: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
          limitations: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
          body: faker.random.words(),
          featured: faker.datatype.boolean(),
        }),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/markdown', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(200), ctx.json({})],
      [ctx.status(304), ctx.json({})],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/markdown/raw', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(200), ctx.json({})],
      [ctx.status(304), ctx.json({})],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/meta', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          verifiable_password_authentication: faker.datatype.boolean(),
          packages: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
          dependabot: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
          installed_version: faker.random.words(),
        }),
      ],
      [ctx.status(304), ctx.json({})],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/networks/:owner/:repo/events', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.random.words(),
            type: faker.random.words(),
            actor: {},
            repo: {
              id: faker.datatype.number(),
              name: faker.random.words(),
              url: faker.random.words(),
            },
            org: {},
            payload: {
              action: faker.random.words(),
              issue: {},
              comment: {},
              pages: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => ({
                page_name: faker.random.words(),
                title: faker.random.words(),
                summary: faker.random.words(),
                action: faker.random.words(),
                sha: faker.random.words(),
                html_url: faker.random.words(),
              })),
            },
            public: faker.datatype.boolean(),
            created_at: faker.random.words(),
          }))
        ),
      ],
      [
        ctx.status(301),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/notifications', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.random.words(),
            repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                license: {
                  key: faker.random.words(),
                  name: faker.random.words(),
                  url: faker.random.words(),
                  spdx_id: faker.random.words(),
                  node_id: faker.random.words(),
                  html_url: faker.random.words(),
                },
                organization: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                forks: faker.datatype.number(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                },
                owner: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                allow_rebase_merge: faker.datatype.boolean(),
                template_repository: {
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  name: faker.random.words(),
                  full_name: faker.random.words(),
                  owner: {
                    login: faker.random.words(),
                    id: faker.datatype.number(),
                    node_id: faker.random.words(),
                    avatar_url: faker.random.words(),
                    gravatar_id: faker.random.words(),
                    url: faker.random.words(),
                    html_url: faker.random.words(),
                    followers_url: faker.random.words(),
                    following_url: faker.random.words(),
                    gists_url: faker.random.words(),
                    starred_url: faker.random.words(),
                    subscriptions_url: faker.random.words(),
                    organizations_url: faker.random.words(),
                    repos_url: faker.random.words(),
                    events_url: faker.random.words(),
                    received_events_url: faker.random.words(),
                    type: faker.random.words(),
                    site_admin: faker.datatype.boolean(),
                  },
                  private: faker.datatype.boolean(),
                  html_url: faker.random.words(),
                  description: faker.random.words(),
                  fork: faker.datatype.boolean(),
                  url: faker.random.words(),
                  archive_url: faker.random.words(),
                  assignees_url: faker.random.words(),
                  blobs_url: faker.random.words(),
                  branches_url: faker.random.words(),
                  collaborators_url: faker.random.words(),
                  comments_url: faker.random.words(),
                  commits_url: faker.random.words(),
                  compare_url: faker.random.words(),
                  contents_url: faker.random.words(),
                  contributors_url: faker.random.words(),
                  deployments_url: faker.random.words(),
                  downloads_url: faker.random.words(),
                  events_url: faker.random.words(),
                  forks_url: faker.random.words(),
                  git_commits_url: faker.random.words(),
                  git_refs_url: faker.random.words(),
                  git_tags_url: faker.random.words(),
                  git_url: faker.random.words(),
                  issue_comment_url: faker.random.words(),
                  issue_events_url: faker.random.words(),
                  issues_url: faker.random.words(),
                  keys_url: faker.random.words(),
                  labels_url: faker.random.words(),
                  languages_url: faker.random.words(),
                  merges_url: faker.random.words(),
                  milestones_url: faker.random.words(),
                  notifications_url: faker.random.words(),
                  pulls_url: faker.random.words(),
                  releases_url: faker.random.words(),
                  ssh_url: faker.random.words(),
                  stargazers_url: faker.random.words(),
                  statuses_url: faker.random.words(),
                  subscribers_url: faker.random.words(),
                  subscription_url: faker.random.words(),
                  tags_url: faker.random.words(),
                  teams_url: faker.random.words(),
                  trees_url: faker.random.words(),
                  clone_url: faker.random.words(),
                  mirror_url: faker.random.words(),
                  hooks_url: faker.random.words(),
                  svn_url: faker.random.words(),
                  homepage: faker.random.words(),
                  language: faker.random.words(),
                  forks_count: faker.datatype.number(),
                  stargazers_count: faker.datatype.number(),
                  watchers_count: faker.datatype.number(),
                  size: faker.datatype.number(),
                  default_branch: faker.random.words(),
                  open_issues_count: faker.datatype.number(),
                  is_template: faker.datatype.boolean(),
                  topics: [
                    ...new Array(faker.datatype.number({ max: 100 })).keys(),
                  ].map(_ => faker.random.words()),
                  has_issues: faker.datatype.boolean(),
                  has_projects: faker.datatype.boolean(),
                  has_wiki: faker.datatype.boolean(),
                  has_pages: faker.datatype.boolean(),
                  has_downloads: faker.datatype.boolean(),
                  archived: faker.datatype.boolean(),
                  disabled: faker.datatype.boolean(),
                  visibility: faker.random.words(),
                  pushed_at: faker.random.words(),
                  created_at: faker.random.words(),
                  updated_at: faker.random.words(),
                  permissions: {
                    admin: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    pull: faker.datatype.boolean(),
                  },
                  allow_rebase_merge: faker.datatype.boolean(),
                  temp_clone_token: faker.random.words(),
                  allow_squash_merge: faker.datatype.boolean(),
                  allow_auto_merge: faker.datatype.boolean(),
                  delete_branch_on_merge: faker.datatype.boolean(),
                  allow_update_branch: faker.datatype.boolean(),
                  allow_merge_commit: faker.datatype.boolean(),
                  subscribers_count: faker.datatype.number(),
                  network_count: faker.datatype.number(),
                },
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                allow_forking: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
                open_issues: faker.datatype.number(),
                watchers: faker.datatype.number(),
                master_branch: faker.random.words(),
                starred_at: faker.random.words(),
              },
              temp_clone_token: faker.random.words(),
              delete_branch_on_merge: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              code_of_conduct: {
                key: faker.random.words(),
                name: faker.random.words(),
                url: faker.random.words(),
                body: faker.random.words(),
                html_url: faker.random.words(),
              },
              license: {
                key: faker.random.words(),
                name: faker.random.words(),
                spdx_id: faker.random.words(),
                url: faker.random.words(),
                node_id: faker.random.words(),
              },
              forks: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              allow_forking: faker.datatype.boolean(),
            },
            subject: {
              title: faker.random.words(),
              url: faker.random.words(),
              latest_comment_url: faker.random.words(),
              type: faker.random.words(),
            },
            reason: faker.random.words(),
            unread: faker.datatype.boolean(),
            updated_at: faker.random.words(),
            last_read_at: faker.random.words(),
            url: faker.random.words(),
            subscription_url: faker.random.words(),
          }))
        ),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.put('/notifications', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(202),
        ctx.json({
          message: faker.random.words(),
        }),
      ],
      [ctx.status(205), ctx.json({})],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/notifications/threads/:thread_id', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.random.words(),
          repository: {
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            full_name: faker.random.words(),
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.random.words(),
            description: faker.random.words(),
            fork: faker.datatype.boolean(),
            url: faker.random.words(),
            archive_url: faker.random.words(),
            assignees_url: faker.random.words(),
            blobs_url: faker.random.words(),
            branches_url: faker.random.words(),
            collaborators_url: faker.random.words(),
            comments_url: faker.random.words(),
            commits_url: faker.random.words(),
            compare_url: faker.random.words(),
            contents_url: faker.random.words(),
            contributors_url: faker.random.words(),
            deployments_url: faker.random.words(),
            downloads_url: faker.random.words(),
            events_url: faker.random.words(),
            forks_url: faker.random.words(),
            git_commits_url: faker.random.words(),
            git_refs_url: faker.random.words(),
            git_tags_url: faker.random.words(),
            git_url: faker.random.words(),
            issue_comment_url: faker.random.words(),
            issue_events_url: faker.random.words(),
            issues_url: faker.random.words(),
            keys_url: faker.random.words(),
            labels_url: faker.random.words(),
            languages_url: faker.random.words(),
            merges_url: faker.random.words(),
            milestones_url: faker.random.words(),
            notifications_url: faker.random.words(),
            pulls_url: faker.random.words(),
            releases_url: faker.random.words(),
            ssh_url: faker.random.words(),
            stargazers_url: faker.random.words(),
            statuses_url: faker.random.words(),
            subscribers_url: faker.random.words(),
            subscription_url: faker.random.words(),
            tags_url: faker.random.words(),
            teams_url: faker.random.words(),
            trees_url: faker.random.words(),
            clone_url: faker.random.words(),
            mirror_url: faker.random.words(),
            hooks_url: faker.random.words(),
            svn_url: faker.random.words(),
            homepage: faker.random.words(),
            language: faker.random.words(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.random.words(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.random.words(),
            pushed_at: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              license: {
                key: faker.random.words(),
                name: faker.random.words(),
                url: faker.random.words(),
                spdx_id: faker.random.words(),
                node_id: faker.random.words(),
                html_url: faker.random.words(),
              },
              organization: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              allow_rebase_merge: faker.datatype.boolean(),
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                owner: {
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.random.words(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.random.words(),
              starred_at: faker.random.words(),
            },
            temp_clone_token: faker.random.words(),
            delete_branch_on_merge: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            code_of_conduct: {
              key: faker.random.words(),
              name: faker.random.words(),
              url: faker.random.words(),
              body: faker.random.words(),
              html_url: faker.random.words(),
            },
            license: {
              key: faker.random.words(),
              name: faker.random.words(),
              spdx_id: faker.random.words(),
              url: faker.random.words(),
              node_id: faker.random.words(),
            },
            forks: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            allow_forking: faker.datatype.boolean(),
          },
          subject: {
            title: faker.random.words(),
            url: faker.random.words(),
            latest_comment_url: faker.random.words(),
            type: faker.random.words(),
          },
          reason: faker.random.words(),
          unread: faker.datatype.boolean(),
          updated_at: faker.random.words(),
          last_read_at: faker.random.words(),
          url: faker.random.words(),
          subscription_url: faker.random.words(),
        }),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.patch('/notifications/threads/:thread_id', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(205), ctx.json({})],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get(
    '/notifications/threads/:thread_id/subscription',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            subscribed: faker.datatype.boolean(),
            ignored: faker.datatype.boolean(),
            reason: faker.random.words(),
            created_at: faker.random.words(),
            url: faker.random.words(),
            thread_url: faker.random.words(),
            repository_url: faker.random.words(),
          }),
        ],
        [ctx.status(304), ctx.json({})],
        [
          ctx.status(401),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.put(
    '/notifications/threads/:thread_id/subscription',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            subscribed: faker.datatype.boolean(),
            ignored: faker.datatype.boolean(),
            reason: faker.random.words(),
            created_at: faker.random.words(),
            url: faker.random.words(),
            thread_url: faker.random.words(),
            repository_url: faker.random.words(),
          }),
        ],
        [ctx.status(304), ctx.json({})],
        [
          ctx.status(401),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/notifications/threads/:thread_id/subscription',
    (req, res, ctx) => {
      const resultArrray = [
        [ctx.status(204), ctx.json({})],
        [ctx.status(304), ctx.json({})],
        [
          ctx.status(401),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get('/octocat', (req, res, ctx) => {
    const resultArrray = [[ctx.status(200), ctx.json({})]];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/organizations', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            hooks_url: faker.random.words(),
            issues_url: faker.random.words(),
            members_url: faker.random.words(),
            public_members_url: faker.random.words(),
            avatar_url: faker.random.words(),
            description: faker.random.words(),
          }))
        ),
      ],
      [ctx.status(304), ctx.json({})],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/orgs/:org', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          login: faker.random.words(),
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          url: faker.random.words(),
          repos_url: faker.random.words(),
          events_url: faker.random.words(),
          hooks_url: faker.random.words(),
          issues_url: faker.random.words(),
          members_url: faker.random.words(),
          public_members_url: faker.random.words(),
          avatar_url: faker.random.words(),
          description: faker.random.words(),
          name: faker.random.words(),
          company: faker.random.words(),
          blog: faker.random.words(),
          location: faker.random.words(),
          email: faker.random.words(),
          twitter_username: faker.random.words(),
          is_verified: faker.datatype.boolean(),
          has_organization_projects: faker.datatype.boolean(),
          has_repository_projects: faker.datatype.boolean(),
          public_repos: faker.datatype.number(),
          public_gists: faker.datatype.number(),
          followers: faker.datatype.number(),
          following: faker.datatype.number(),
          html_url: faker.random.words(),
          created_at: faker.random.words(),
          type: faker.random.words(),
          total_private_repos: faker.datatype.number(),
          owned_private_repos: faker.datatype.number(),
          private_gists: faker.datatype.number(),
          disk_usage: faker.datatype.number(),
          collaborators: faker.datatype.number(),
          billing_email: faker.random.words(),
          plan: {
            name: faker.random.words(),
            space: faker.datatype.number(),
            private_repos: faker.datatype.number(),
            filled_seats: faker.datatype.number(),
            seats: faker.datatype.number(),
          },
          default_repository_permission: faker.random.words(),
          members_can_create_repositories: faker.datatype.boolean(),
          two_factor_requirement_enabled: faker.datatype.boolean(),
          members_allowed_repository_creation_type: faker.random.words(),
          members_can_create_public_repositories: faker.datatype.boolean(),
          members_can_create_private_repositories: faker.datatype.boolean(),
          members_can_create_internal_repositories: faker.datatype.boolean(),
          members_can_create_pages: faker.datatype.boolean(),
          members_can_create_public_pages: faker.datatype.boolean(),
          members_can_create_private_pages: faker.datatype.boolean(),
          members_can_fork_private_repositories: faker.datatype.boolean(),
          updated_at: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.patch('/orgs/:org', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          login: faker.random.words(),
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          url: faker.random.words(),
          repos_url: faker.random.words(),
          events_url: faker.random.words(),
          hooks_url: faker.random.words(),
          issues_url: faker.random.words(),
          members_url: faker.random.words(),
          public_members_url: faker.random.words(),
          avatar_url: faker.random.words(),
          description: faker.random.words(),
          name: faker.random.words(),
          company: faker.random.words(),
          blog: faker.random.words(),
          location: faker.random.words(),
          email: faker.random.words(),
          twitter_username: faker.random.words(),
          is_verified: faker.datatype.boolean(),
          has_organization_projects: faker.datatype.boolean(),
          has_repository_projects: faker.datatype.boolean(),
          public_repos: faker.datatype.number(),
          public_gists: faker.datatype.number(),
          followers: faker.datatype.number(),
          following: faker.datatype.number(),
          html_url: faker.random.words(),
          created_at: faker.random.words(),
          type: faker.random.words(),
          total_private_repos: faker.datatype.number(),
          owned_private_repos: faker.datatype.number(),
          private_gists: faker.datatype.number(),
          disk_usage: faker.datatype.number(),
          collaborators: faker.datatype.number(),
          billing_email: faker.random.words(),
          plan: {
            name: faker.random.words(),
            space: faker.datatype.number(),
            private_repos: faker.datatype.number(),
            filled_seats: faker.datatype.number(),
            seats: faker.datatype.number(),
          },
          default_repository_permission: faker.random.words(),
          members_can_create_repositories: faker.datatype.boolean(),
          two_factor_requirement_enabled: faker.datatype.boolean(),
          members_allowed_repository_creation_type: faker.random.words(),
          members_can_create_public_repositories: faker.datatype.boolean(),
          members_can_create_private_repositories: faker.datatype.boolean(),
          members_can_create_internal_repositories: faker.datatype.boolean(),
          members_can_create_pages: faker.datatype.boolean(),
          members_can_create_public_pages: faker.datatype.boolean(),
          members_can_create_private_pages: faker.datatype.boolean(),
          members_can_fork_private_repositories: faker.datatype.boolean(),
          updated_at: faker.random.words(),
        }),
      ],
      [
        ctx.status(409),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [ctx.status(422), ctx.json({})],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/orgs/:org/actions/permissions', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          enabled_repositories: faker.random.arrayElement([
            'all',
            'none',
            'selected',
          ]),
          selected_repositories_url: faker.random.words(),
          allowed_actions: faker.random.arrayElement([
            'all',
            'local_only',
            'selected',
          ]),
          selected_actions_url: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.put('/orgs/:org/actions/permissions', (req, res, ctx) => {
    const resultArrray = [[ctx.status(204), ctx.json({})]];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/orgs/:org/actions/permissions/repositories', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          total_count: faker.datatype.number(),
          repositories: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            full_name: faker.random.words(),
            license: {
              key: faker.random.words(),
              name: faker.random.words(),
              url: faker.random.words(),
              spdx_id: faker.random.words(),
              node_id: faker.random.words(),
              html_url: faker.random.words(),
            },
            organization: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.random.words(),
            description: faker.random.words(),
            fork: faker.datatype.boolean(),
            url: faker.random.words(),
            archive_url: faker.random.words(),
            assignees_url: faker.random.words(),
            blobs_url: faker.random.words(),
            branches_url: faker.random.words(),
            collaborators_url: faker.random.words(),
            comments_url: faker.random.words(),
            commits_url: faker.random.words(),
            compare_url: faker.random.words(),
            contents_url: faker.random.words(),
            contributors_url: faker.random.words(),
            deployments_url: faker.random.words(),
            downloads_url: faker.random.words(),
            events_url: faker.random.words(),
            forks_url: faker.random.words(),
            git_commits_url: faker.random.words(),
            git_refs_url: faker.random.words(),
            git_tags_url: faker.random.words(),
            git_url: faker.random.words(),
            issue_comment_url: faker.random.words(),
            issue_events_url: faker.random.words(),
            issues_url: faker.random.words(),
            keys_url: faker.random.words(),
            labels_url: faker.random.words(),
            languages_url: faker.random.words(),
            merges_url: faker.random.words(),
            milestones_url: faker.random.words(),
            notifications_url: faker.random.words(),
            pulls_url: faker.random.words(),
            releases_url: faker.random.words(),
            ssh_url: faker.random.words(),
            stargazers_url: faker.random.words(),
            statuses_url: faker.random.words(),
            subscribers_url: faker.random.words(),
            subscription_url: faker.random.words(),
            tags_url: faker.random.words(),
            teams_url: faker.random.words(),
            trees_url: faker.random.words(),
            clone_url: faker.random.words(),
            mirror_url: faker.random.words(),
            hooks_url: faker.random.words(),
            svn_url: faker.random.words(),
            homepage: faker.random.words(),
            language: faker.random.words(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.random.words(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.random.words(),
            pushed_at: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            allow_rebase_merge: faker.datatype.boolean(),
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              owner: {
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.random.words(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.random.words(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.random.words(),
            starred_at: faker.random.words(),
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.put('/orgs/:org/actions/permissions/repositories', (req, res, ctx) => {
    const resultArrray = [[ctx.status(204), ctx.json({})]];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.put(
    '/orgs/:org/actions/permissions/repositories/:repository_id',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/orgs/:org/actions/permissions/repositories/:repository_id',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/orgs/:org/actions/permissions/selected-actions',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            github_owned_allowed: faker.datatype.boolean(),
            patterns_allowed: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.put(
    '/orgs/:org/actions/permissions/selected-actions',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get('/orgs/:org/actions/runner-groups', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          total_count: faker.datatype.number(),
          runner_groups: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            name: faker.random.words(),
            visibility: faker.random.words(),
            default: faker.datatype.boolean(),
            selected_repositories_url: faker.random.words(),
            runners_url: faker.random.words(),
            inherited: faker.datatype.boolean(),
            inherited_allows_public_repositories: faker.datatype.boolean(),
            allows_public_repositories: faker.datatype.boolean(),
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/orgs/:org/actions/runner-groups', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json({
          id: faker.datatype.number(),
          name: faker.random.words(),
          visibility: faker.random.words(),
          default: faker.datatype.boolean(),
          selected_repositories_url: faker.random.words(),
          runners_url: faker.random.words(),
          inherited: faker.datatype.boolean(),
          inherited_allows_public_repositories: faker.datatype.boolean(),
          allows_public_repositories: faker.datatype.boolean(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get(
    '/orgs/:org/actions/runner-groups/:runner_group_id',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            name: faker.random.words(),
            visibility: faker.random.words(),
            default: faker.datatype.boolean(),
            selected_repositories_url: faker.random.words(),
            runners_url: faker.random.words(),
            inherited: faker.datatype.boolean(),
            inherited_allows_public_repositories: faker.datatype.boolean(),
            allows_public_repositories: faker.datatype.boolean(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.patch(
    '/orgs/:org/actions/runner-groups/:runner_group_id',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            name: faker.random.words(),
            visibility: faker.random.words(),
            default: faker.datatype.boolean(),
            selected_repositories_url: faker.random.words(),
            runners_url: faker.random.words(),
            inherited: faker.datatype.boolean(),
            inherited_allows_public_repositories: faker.datatype.boolean(),
            allows_public_repositories: faker.datatype.boolean(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/orgs/:org/actions/runner-groups/:runner_group_id',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/orgs/:org/actions/runner-groups/:runner_group_id/repositories',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            total_count: faker.datatype.number(),
            repositories: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                license: {
                  key: faker.random.words(),
                  name: faker.random.words(),
                  url: faker.random.words(),
                  spdx_id: faker.random.words(),
                  node_id: faker.random.words(),
                  html_url: faker.random.words(),
                },
                organization: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                forks: faker.datatype.number(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                },
                owner: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                allow_rebase_merge: faker.datatype.boolean(),
                template_repository: {
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  name: faker.random.words(),
                  full_name: faker.random.words(),
                  owner: {
                    login: faker.random.words(),
                    id: faker.datatype.number(),
                    node_id: faker.random.words(),
                    avatar_url: faker.random.words(),
                    gravatar_id: faker.random.words(),
                    url: faker.random.words(),
                    html_url: faker.random.words(),
                    followers_url: faker.random.words(),
                    following_url: faker.random.words(),
                    gists_url: faker.random.words(),
                    starred_url: faker.random.words(),
                    subscriptions_url: faker.random.words(),
                    organizations_url: faker.random.words(),
                    repos_url: faker.random.words(),
                    events_url: faker.random.words(),
                    received_events_url: faker.random.words(),
                    type: faker.random.words(),
                    site_admin: faker.datatype.boolean(),
                  },
                  private: faker.datatype.boolean(),
                  html_url: faker.random.words(),
                  description: faker.random.words(),
                  fork: faker.datatype.boolean(),
                  url: faker.random.words(),
                  archive_url: faker.random.words(),
                  assignees_url: faker.random.words(),
                  blobs_url: faker.random.words(),
                  branches_url: faker.random.words(),
                  collaborators_url: faker.random.words(),
                  comments_url: faker.random.words(),
                  commits_url: faker.random.words(),
                  compare_url: faker.random.words(),
                  contents_url: faker.random.words(),
                  contributors_url: faker.random.words(),
                  deployments_url: faker.random.words(),
                  downloads_url: faker.random.words(),
                  events_url: faker.random.words(),
                  forks_url: faker.random.words(),
                  git_commits_url: faker.random.words(),
                  git_refs_url: faker.random.words(),
                  git_tags_url: faker.random.words(),
                  git_url: faker.random.words(),
                  issue_comment_url: faker.random.words(),
                  issue_events_url: faker.random.words(),
                  issues_url: faker.random.words(),
                  keys_url: faker.random.words(),
                  labels_url: faker.random.words(),
                  languages_url: faker.random.words(),
                  merges_url: faker.random.words(),
                  milestones_url: faker.random.words(),
                  notifications_url: faker.random.words(),
                  pulls_url: faker.random.words(),
                  releases_url: faker.random.words(),
                  ssh_url: faker.random.words(),
                  stargazers_url: faker.random.words(),
                  statuses_url: faker.random.words(),
                  subscribers_url: faker.random.words(),
                  subscription_url: faker.random.words(),
                  tags_url: faker.random.words(),
                  teams_url: faker.random.words(),
                  trees_url: faker.random.words(),
                  clone_url: faker.random.words(),
                  mirror_url: faker.random.words(),
                  hooks_url: faker.random.words(),
                  svn_url: faker.random.words(),
                  homepage: faker.random.words(),
                  language: faker.random.words(),
                  forks_count: faker.datatype.number(),
                  stargazers_count: faker.datatype.number(),
                  watchers_count: faker.datatype.number(),
                  size: faker.datatype.number(),
                  default_branch: faker.random.words(),
                  open_issues_count: faker.datatype.number(),
                  is_template: faker.datatype.boolean(),
                  topics: [
                    ...new Array(faker.datatype.number({ max: 100 })).keys(),
                  ].map(_ => faker.random.words()),
                  has_issues: faker.datatype.boolean(),
                  has_projects: faker.datatype.boolean(),
                  has_wiki: faker.datatype.boolean(),
                  has_pages: faker.datatype.boolean(),
                  has_downloads: faker.datatype.boolean(),
                  archived: faker.datatype.boolean(),
                  disabled: faker.datatype.boolean(),
                  visibility: faker.random.words(),
                  pushed_at: faker.random.words(),
                  created_at: faker.random.words(),
                  updated_at: faker.random.words(),
                  permissions: {
                    admin: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    pull: faker.datatype.boolean(),
                  },
                  allow_rebase_merge: faker.datatype.boolean(),
                  temp_clone_token: faker.random.words(),
                  allow_squash_merge: faker.datatype.boolean(),
                  allow_auto_merge: faker.datatype.boolean(),
                  delete_branch_on_merge: faker.datatype.boolean(),
                  allow_update_branch: faker.datatype.boolean(),
                  allow_merge_commit: faker.datatype.boolean(),
                  subscribers_count: faker.datatype.number(),
                  network_count: faker.datatype.number(),
                },
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                allow_forking: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
                open_issues: faker.datatype.number(),
                watchers: faker.datatype.number(),
                master_branch: faker.random.words(),
                starred_at: faker.random.words(),
              },
              temp_clone_token: faker.random.words(),
              delete_branch_on_merge: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              code_of_conduct: {
                key: faker.random.words(),
                name: faker.random.words(),
                url: faker.random.words(),
                body: faker.random.words(),
                html_url: faker.random.words(),
              },
              license: {
                key: faker.random.words(),
                name: faker.random.words(),
                spdx_id: faker.random.words(),
                url: faker.random.words(),
                node_id: faker.random.words(),
              },
              forks: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              allow_forking: faker.datatype.boolean(),
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.put(
    '/orgs/:org/actions/runner-groups/:runner_group_id/repositories',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.put(
    '/orgs/:org/actions/runner-groups/:runner_group_id/repositories/:repository_id',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/orgs/:org/actions/runner-groups/:runner_group_id/repositories/:repository_id',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/orgs/:org/actions/runner-groups/:runner_group_id/runners',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            total_count: faker.datatype.number(),
            runners: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              name: faker.random.words(),
              os: faker.random.words(),
              status: faker.random.words(),
              busy: faker.datatype.boolean(),
              labels: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => ({
                id: faker.datatype.number(),
                name: faker.random.words(),
                type: faker.random.arrayElement(['read-only', 'custom']),
              })),
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.put(
    '/orgs/:org/actions/runner-groups/:runner_group_id/runners',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.put(
    '/orgs/:org/actions/runner-groups/:runner_group_id/runners/:runner_id',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/orgs/:org/actions/runner-groups/:runner_group_id/runners/:runner_id',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get('/orgs/:org/actions/runners', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          total_count: faker.datatype.number(),
          runners: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            name: faker.random.words(),
            os: faker.random.words(),
            status: faker.random.words(),
            busy: faker.datatype.boolean(),
            labels: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              name: faker.random.words(),
              type: faker.random.arrayElement(['read-only', 'custom']),
            })),
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/orgs/:org/actions/runners/downloads', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            os: faker.random.words(),
            architecture: faker.random.words(),
            download_url: faker.random.words(),
            filename: faker.random.words(),
            temp_download_token: faker.random.words(),
            sha256_checksum: faker.random.words(),
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post(
    '/orgs/:org/actions/runners/registration-token',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(201),
          ctx.json({
            token: faker.random.words(),
            expires_at: faker.random.words(),
            permissions: {},
            repositories: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              license: {
                key: faker.random.words(),
                name: faker.random.words(),
                url: faker.random.words(),
                spdx_id: faker.random.words(),
                node_id: faker.random.words(),
                html_url: faker.random.words(),
              },
              organization: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              allow_rebase_merge: faker.datatype.boolean(),
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                owner: {
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.random.words(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.random.words(),
              starred_at: faker.random.words(),
            })),
            single_file: faker.random.words(),
            repository_selection: faker.random.arrayElement([
              'all',
              'selected',
            ]),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.post('/orgs/:org/actions/runners/remove-token', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json({
          token: faker.random.words(),
          expires_at: faker.random.words(),
          permissions: {},
          repositories: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            full_name: faker.random.words(),
            license: {
              key: faker.random.words(),
              name: faker.random.words(),
              url: faker.random.words(),
              spdx_id: faker.random.words(),
              node_id: faker.random.words(),
              html_url: faker.random.words(),
            },
            organization: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.random.words(),
            description: faker.random.words(),
            fork: faker.datatype.boolean(),
            url: faker.random.words(),
            archive_url: faker.random.words(),
            assignees_url: faker.random.words(),
            blobs_url: faker.random.words(),
            branches_url: faker.random.words(),
            collaborators_url: faker.random.words(),
            comments_url: faker.random.words(),
            commits_url: faker.random.words(),
            compare_url: faker.random.words(),
            contents_url: faker.random.words(),
            contributors_url: faker.random.words(),
            deployments_url: faker.random.words(),
            downloads_url: faker.random.words(),
            events_url: faker.random.words(),
            forks_url: faker.random.words(),
            git_commits_url: faker.random.words(),
            git_refs_url: faker.random.words(),
            git_tags_url: faker.random.words(),
            git_url: faker.random.words(),
            issue_comment_url: faker.random.words(),
            issue_events_url: faker.random.words(),
            issues_url: faker.random.words(),
            keys_url: faker.random.words(),
            labels_url: faker.random.words(),
            languages_url: faker.random.words(),
            merges_url: faker.random.words(),
            milestones_url: faker.random.words(),
            notifications_url: faker.random.words(),
            pulls_url: faker.random.words(),
            releases_url: faker.random.words(),
            ssh_url: faker.random.words(),
            stargazers_url: faker.random.words(),
            statuses_url: faker.random.words(),
            subscribers_url: faker.random.words(),
            subscription_url: faker.random.words(),
            tags_url: faker.random.words(),
            teams_url: faker.random.words(),
            trees_url: faker.random.words(),
            clone_url: faker.random.words(),
            mirror_url: faker.random.words(),
            hooks_url: faker.random.words(),
            svn_url: faker.random.words(),
            homepage: faker.random.words(),
            language: faker.random.words(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.random.words(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.random.words(),
            pushed_at: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            allow_rebase_merge: faker.datatype.boolean(),
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              owner: {
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.random.words(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.random.words(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.random.words(),
            starred_at: faker.random.words(),
          })),
          single_file: faker.random.words(),
          repository_selection: faker.random.arrayElement(['all', 'selected']),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/orgs/:org/actions/runners/:runner_id', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.datatype.number(),
          name: faker.random.words(),
          os: faker.random.words(),
          status: faker.random.words(),
          busy: faker.datatype.boolean(),
          labels: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            name: faker.random.words(),
            type: faker.random.arrayElement(['read-only', 'custom']),
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/orgs/:org/actions/runners/:runner_id', (req, res, ctx) => {
    const resultArrray = [[ctx.status(204), ctx.json({})]];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/orgs/:org/actions/secrets', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          total_count: faker.datatype.number(),
          secrets: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            name: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            visibility: faker.random.arrayElement([
              'all',
              'private',
              'selected',
            ]),
            selected_repositories_url: faker.random.words(),
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/orgs/:org/actions/secrets/public-key', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          key_id: faker.random.words(),
          key: faker.random.words(),
          id: faker.datatype.number(),
          url: faker.random.words(),
          title: faker.random.words(),
          created_at: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/orgs/:org/actions/secrets/:secret_name', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          name: faker.random.words(),
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          visibility: faker.random.arrayElement(['all', 'private', 'selected']),
          selected_repositories_url: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.put('/orgs/:org/actions/secrets/:secret_name', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(201), ctx.json({})],
      [ctx.status(204), ctx.json({})],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/orgs/:org/actions/secrets/:secret_name', (req, res, ctx) => {
    const resultArrray = [[ctx.status(204), ctx.json({})]];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get(
    '/orgs/:org/actions/secrets/:secret_name/repositories',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            total_count: faker.datatype.number(),
            repositories: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                license: {
                  key: faker.random.words(),
                  name: faker.random.words(),
                  url: faker.random.words(),
                  spdx_id: faker.random.words(),
                  node_id: faker.random.words(),
                  html_url: faker.random.words(),
                },
                organization: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                forks: faker.datatype.number(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                },
                owner: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                allow_rebase_merge: faker.datatype.boolean(),
                template_repository: {
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  name: faker.random.words(),
                  full_name: faker.random.words(),
                  owner: {
                    login: faker.random.words(),
                    id: faker.datatype.number(),
                    node_id: faker.random.words(),
                    avatar_url: faker.random.words(),
                    gravatar_id: faker.random.words(),
                    url: faker.random.words(),
                    html_url: faker.random.words(),
                    followers_url: faker.random.words(),
                    following_url: faker.random.words(),
                    gists_url: faker.random.words(),
                    starred_url: faker.random.words(),
                    subscriptions_url: faker.random.words(),
                    organizations_url: faker.random.words(),
                    repos_url: faker.random.words(),
                    events_url: faker.random.words(),
                    received_events_url: faker.random.words(),
                    type: faker.random.words(),
                    site_admin: faker.datatype.boolean(),
                  },
                  private: faker.datatype.boolean(),
                  html_url: faker.random.words(),
                  description: faker.random.words(),
                  fork: faker.datatype.boolean(),
                  url: faker.random.words(),
                  archive_url: faker.random.words(),
                  assignees_url: faker.random.words(),
                  blobs_url: faker.random.words(),
                  branches_url: faker.random.words(),
                  collaborators_url: faker.random.words(),
                  comments_url: faker.random.words(),
                  commits_url: faker.random.words(),
                  compare_url: faker.random.words(),
                  contents_url: faker.random.words(),
                  contributors_url: faker.random.words(),
                  deployments_url: faker.random.words(),
                  downloads_url: faker.random.words(),
                  events_url: faker.random.words(),
                  forks_url: faker.random.words(),
                  git_commits_url: faker.random.words(),
                  git_refs_url: faker.random.words(),
                  git_tags_url: faker.random.words(),
                  git_url: faker.random.words(),
                  issue_comment_url: faker.random.words(),
                  issue_events_url: faker.random.words(),
                  issues_url: faker.random.words(),
                  keys_url: faker.random.words(),
                  labels_url: faker.random.words(),
                  languages_url: faker.random.words(),
                  merges_url: faker.random.words(),
                  milestones_url: faker.random.words(),
                  notifications_url: faker.random.words(),
                  pulls_url: faker.random.words(),
                  releases_url: faker.random.words(),
                  ssh_url: faker.random.words(),
                  stargazers_url: faker.random.words(),
                  statuses_url: faker.random.words(),
                  subscribers_url: faker.random.words(),
                  subscription_url: faker.random.words(),
                  tags_url: faker.random.words(),
                  teams_url: faker.random.words(),
                  trees_url: faker.random.words(),
                  clone_url: faker.random.words(),
                  mirror_url: faker.random.words(),
                  hooks_url: faker.random.words(),
                  svn_url: faker.random.words(),
                  homepage: faker.random.words(),
                  language: faker.random.words(),
                  forks_count: faker.datatype.number(),
                  stargazers_count: faker.datatype.number(),
                  watchers_count: faker.datatype.number(),
                  size: faker.datatype.number(),
                  default_branch: faker.random.words(),
                  open_issues_count: faker.datatype.number(),
                  is_template: faker.datatype.boolean(),
                  topics: [
                    ...new Array(faker.datatype.number({ max: 100 })).keys(),
                  ].map(_ => faker.random.words()),
                  has_issues: faker.datatype.boolean(),
                  has_projects: faker.datatype.boolean(),
                  has_wiki: faker.datatype.boolean(),
                  has_pages: faker.datatype.boolean(),
                  has_downloads: faker.datatype.boolean(),
                  archived: faker.datatype.boolean(),
                  disabled: faker.datatype.boolean(),
                  visibility: faker.random.words(),
                  pushed_at: faker.random.words(),
                  created_at: faker.random.words(),
                  updated_at: faker.random.words(),
                  permissions: {
                    admin: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    pull: faker.datatype.boolean(),
                  },
                  allow_rebase_merge: faker.datatype.boolean(),
                  temp_clone_token: faker.random.words(),
                  allow_squash_merge: faker.datatype.boolean(),
                  allow_auto_merge: faker.datatype.boolean(),
                  delete_branch_on_merge: faker.datatype.boolean(),
                  allow_update_branch: faker.datatype.boolean(),
                  allow_merge_commit: faker.datatype.boolean(),
                  subscribers_count: faker.datatype.number(),
                  network_count: faker.datatype.number(),
                },
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                allow_forking: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
                open_issues: faker.datatype.number(),
                watchers: faker.datatype.number(),
                master_branch: faker.random.words(),
                starred_at: faker.random.words(),
              },
              temp_clone_token: faker.random.words(),
              delete_branch_on_merge: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              code_of_conduct: {
                key: faker.random.words(),
                name: faker.random.words(),
                url: faker.random.words(),
                body: faker.random.words(),
                html_url: faker.random.words(),
              },
              license: {
                key: faker.random.words(),
                name: faker.random.words(),
                spdx_id: faker.random.words(),
                url: faker.random.words(),
                node_id: faker.random.words(),
              },
              forks: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              allow_forking: faker.datatype.boolean(),
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.put(
    '/orgs/:org/actions/secrets/:secret_name/repositories',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.put(
    '/orgs/:org/actions/secrets/:secret_name/repositories/:repository_id',
    (req, res, ctx) => {
      const resultArrray = [
        [ctx.status(204), ctx.json({})],
        [ctx.status(409), ctx.json({})],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/orgs/:org/actions/secrets/:secret_name/repositories/:repository_id',
    (req, res, ctx) => {
      const resultArrray = [
        [ctx.status(204), ctx.json({})],
        [ctx.status(409), ctx.json({})],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get('/orgs/:org/audit-log', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            '@timestamp': faker.datatype.number(),
            action: faker.random.words(),
            active: faker.datatype.boolean(),
            active_was: faker.datatype.boolean(),
            actor: faker.random.words(),
            actor_id: faker.datatype.number(),
            actor_location: {
              country_name: faker.random.words(),
            },
            data: {},
            org_id: faker.datatype.number(),
            blocked_user: faker.random.words(),
            business: faker.random.words(),
            config: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({})),
            config_was: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({})),
            content_type: faker.random.words(),
            created_at: faker.datatype.number(),
            deploy_key_fingerprint: faker.random.words(),
            _document_id: faker.random.words(),
            emoji: faker.random.words(),
            events: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({})),
            events_were: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({})),
            explanation: faker.random.words(),
            fingerprint: faker.random.words(),
            hook_id: faker.datatype.number(),
            limited_availability: faker.datatype.boolean(),
            message: faker.random.words(),
            name: faker.random.words(),
            old_user: faker.random.words(),
            openssh_public_key: faker.random.words(),
            org: faker.random.words(),
            previous_visibility: faker.random.words(),
            read_only: faker.datatype.boolean(),
            repo: faker.random.words(),
            repository: faker.random.words(),
            repository_public: faker.datatype.boolean(),
            target_login: faker.random.words(),
            team: faker.random.words(),
            transport_protocol: faker.datatype.number(),
            transport_protocol_name: faker.random.words(),
            user: faker.random.words(),
            visibility: faker.random.words(),
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/orgs/:org/events', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.random.words(),
            type: faker.random.words(),
            actor: {},
            repo: {
              id: faker.datatype.number(),
              name: faker.random.words(),
              url: faker.random.words(),
            },
            org: {},
            payload: {
              action: faker.random.words(),
              issue: {},
              comment: {},
              pages: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => ({
                page_name: faker.random.words(),
                title: faker.random.words(),
                summary: faker.random.words(),
                action: faker.random.words(),
                sha: faker.random.words(),
                html_url: faker.random.words(),
              })),
            },
            public: faker.datatype.boolean(),
            created_at: faker.random.words(),
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/orgs/:org/hooks', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.datatype.number(),
            url: faker.random.words(),
            ping_url: faker.random.words(),
            deliveries_url: faker.random.words(),
            name: faker.random.words(),
            events: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            active: faker.datatype.boolean(),
            config: {
              url: faker.random.words(),
              insecure_ssl: faker.random.words(),
              content_type: faker.random.words(),
              secret: faker.random.words(),
            },
            updated_at: faker.random.words(),
            created_at: faker.random.words(),
            type: faker.random.words(),
          }))
        ),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/orgs/:org/hooks', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json({
          id: faker.datatype.number(),
          url: faker.random.words(),
          ping_url: faker.random.words(),
          deliveries_url: faker.random.words(),
          name: faker.random.words(),
          events: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
          active: faker.datatype.boolean(),
          config: {
            url: faker.random.words(),
            insecure_ssl: faker.random.words(),
            content_type: faker.random.words(),
            secret: faker.random.words(),
          },
          updated_at: faker.random.words(),
          created_at: faker.random.words(),
          type: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/orgs/:org/hooks/:hook_id', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.datatype.number(),
          url: faker.random.words(),
          ping_url: faker.random.words(),
          deliveries_url: faker.random.words(),
          name: faker.random.words(),
          events: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
          active: faker.datatype.boolean(),
          config: {
            url: faker.random.words(),
            insecure_ssl: faker.random.words(),
            content_type: faker.random.words(),
            secret: faker.random.words(),
          },
          updated_at: faker.random.words(),
          created_at: faker.random.words(),
          type: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.patch('/orgs/:org/hooks/:hook_id', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.datatype.number(),
          url: faker.random.words(),
          ping_url: faker.random.words(),
          deliveries_url: faker.random.words(),
          name: faker.random.words(),
          events: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
          active: faker.datatype.boolean(),
          config: {
            url: faker.random.words(),
            insecure_ssl: faker.random.words(),
            content_type: faker.random.words(),
            secret: faker.random.words(),
          },
          updated_at: faker.random.words(),
          created_at: faker.random.words(),
          type: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/orgs/:org/hooks/:hook_id', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/orgs/:org/hooks/:hook_id/config', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          url: faker.random.words(),
          content_type: faker.random.words(),
          secret: faker.random.words(),
          insecure_ssl: {},
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.patch('/orgs/:org/hooks/:hook_id/config', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          url: faker.random.words(),
          content_type: faker.random.words(),
          secret: faker.random.words(),
          insecure_ssl: {},
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/orgs/:org/hooks/:hook_id/deliveries', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.datatype.number(),
            guid: faker.random.words(),
            delivered_at: faker.random.words(),
            redelivery: faker.datatype.boolean(),
            duration: faker.datatype.number(),
            status: faker.random.words(),
            status_code: faker.datatype.number(),
            event: faker.random.words(),
            action: faker.random.words(),
            installation_id: faker.datatype.number(),
            repository_id: faker.datatype.number(),
          }))
        ),
      ],
      [
        ctx.status(400),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get(
    '/orgs/:org/hooks/:hook_id/deliveries/:delivery_id',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            guid: faker.random.words(),
            delivered_at: faker.random.words(),
            redelivery: faker.datatype.boolean(),
            duration: faker.datatype.number(),
            status: faker.random.words(),
            status_code: faker.datatype.number(),
            event: faker.random.words(),
            action: faker.random.words(),
            installation_id: faker.datatype.number(),
            repository_id: faker.datatype.number(),
            url: faker.random.words(),
            request: {
              headers: {},
              payload: {},
            },
            response: {
              headers: {},
              payload: faker.random.words(),
            },
          }),
        ],
        [
          ctx.status(400),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            errors: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              resource: faker.random.words(),
              field: faker.random.words(),
              message: faker.random.words(),
              code: faker.random.words(),
              index: faker.datatype.number(),
              value: {},
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.post(
    '/orgs/:org/hooks/:hook_id/deliveries/:delivery_id/attempts',
    (req, res, ctx) => {
      const resultArrray = [
        [ctx.status(202), ctx.json({})],
        [
          ctx.status(400),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            errors: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              resource: faker.random.words(),
              field: faker.random.words(),
              message: faker.random.words(),
              code: faker.random.words(),
              index: faker.datatype.number(),
              value: {},
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.post('/orgs/:org/hooks/:hook_id/pings', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/orgs/:org/installation', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.datatype.number(),
          account: {},
          repository_selection: faker.random.arrayElement(['all', 'selected']),
          access_tokens_url: faker.random.words(),
          repositories_url: faker.random.words(),
          html_url: faker.random.words(),
          app_id: faker.datatype.number(),
          target_id: faker.datatype.number(),
          target_type: faker.random.words(),
          permissions: {
            actions: faker.random.arrayElement(['read', 'write']),
            administration: faker.random.arrayElement(['read', 'write']),
            checks: faker.random.arrayElement(['read', 'write']),
            contents: faker.random.arrayElement(['read', 'write']),
            deployments: faker.random.arrayElement(['read', 'write']),
            environments: faker.random.arrayElement(['read', 'write']),
            issues: faker.random.arrayElement(['read', 'write']),
            metadata: faker.random.arrayElement(['read', 'write']),
            packages: faker.random.arrayElement(['read', 'write']),
            pages: faker.random.arrayElement(['read', 'write']),
            pull_requests: faker.random.arrayElement(['read', 'write']),
            repository_hooks: faker.random.arrayElement(['read', 'write']),
            repository_projects: faker.random.arrayElement([
              'read',
              'write',
              'admin',
            ]),
            secret_scanning_alerts: faker.random.arrayElement([
              'read',
              'write',
            ]),
            secrets: faker.random.arrayElement(['read', 'write']),
            security_events: faker.random.arrayElement(['read', 'write']),
            single_file: faker.random.arrayElement(['read', 'write']),
            statuses: faker.random.arrayElement(['read', 'write']),
            vulnerability_alerts: faker.random.arrayElement(['read', 'write']),
            workflows: faker.random.arrayElement(['write']),
            members: faker.random.arrayElement(['read', 'write']),
            organization_administration: faker.random.arrayElement([
              'read',
              'write',
            ]),
            organization_hooks: faker.random.arrayElement(['read', 'write']),
            organization_plan: faker.random.arrayElement(['read']),
            organization_projects: faker.random.arrayElement([
              'read',
              'write',
              'admin',
            ]),
            organization_packages: faker.random.arrayElement(['read', 'write']),
            organization_secrets: faker.random.arrayElement(['read', 'write']),
            organization_self_hosted_runners: faker.random.arrayElement([
              'read',
              'write',
            ]),
            organization_user_blocking: faker.random.arrayElement([
              'read',
              'write',
            ]),
            team_discussions: faker.random.arrayElement(['read', 'write']),
            content_references: faker.random.arrayElement(['read', 'write']),
          },
          events: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          single_file_name: faker.random.words(),
          has_multiple_single_files: faker.datatype.boolean(),
          single_file_paths: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
          app_slug: faker.random.words(),
          suspended_by: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          suspended_at: faker.random.words(),
          contact_email: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/orgs/:org/installations', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          total_count: faker.datatype.number(),
          installations: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            account: {},
            repository_selection: faker.random.arrayElement([
              'all',
              'selected',
            ]),
            access_tokens_url: faker.random.words(),
            repositories_url: faker.random.words(),
            html_url: faker.random.words(),
            app_id: faker.datatype.number(),
            target_id: faker.datatype.number(),
            target_type: faker.random.words(),
            permissions: {
              actions: faker.random.arrayElement(['read', 'write']),
              administration: faker.random.arrayElement(['read', 'write']),
              checks: faker.random.arrayElement(['read', 'write']),
              contents: faker.random.arrayElement(['read', 'write']),
              deployments: faker.random.arrayElement(['read', 'write']),
              environments: faker.random.arrayElement(['read', 'write']),
              issues: faker.random.arrayElement(['read', 'write']),
              metadata: faker.random.arrayElement(['read', 'write']),
              packages: faker.random.arrayElement(['read', 'write']),
              pages: faker.random.arrayElement(['read', 'write']),
              pull_requests: faker.random.arrayElement(['read', 'write']),
              repository_hooks: faker.random.arrayElement(['read', 'write']),
              repository_projects: faker.random.arrayElement([
                'read',
                'write',
                'admin',
              ]),
              secret_scanning_alerts: faker.random.arrayElement([
                'read',
                'write',
              ]),
              secrets: faker.random.arrayElement(['read', 'write']),
              security_events: faker.random.arrayElement(['read', 'write']),
              single_file: faker.random.arrayElement(['read', 'write']),
              statuses: faker.random.arrayElement(['read', 'write']),
              vulnerability_alerts: faker.random.arrayElement([
                'read',
                'write',
              ]),
              workflows: faker.random.arrayElement(['write']),
              members: faker.random.arrayElement(['read', 'write']),
              organization_administration: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_hooks: faker.random.arrayElement(['read', 'write']),
              organization_plan: faker.random.arrayElement(['read']),
              organization_projects: faker.random.arrayElement([
                'read',
                'write',
                'admin',
              ]),
              organization_packages: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_secrets: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_self_hosted_runners: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_user_blocking: faker.random.arrayElement([
                'read',
                'write',
              ]),
              team_discussions: faker.random.arrayElement(['read', 'write']),
              content_references: faker.random.arrayElement(['read', 'write']),
            },
            events: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            single_file_name: faker.random.words(),
            has_multiple_single_files: faker.datatype.boolean(),
            single_file_paths: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            app_slug: faker.random.words(),
            suspended_by: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            suspended_at: faker.random.words(),
            contact_email: faker.random.words(),
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/orgs/:org/issues', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            url: faker.random.words(),
            repository_url: faker.random.words(),
            labels_url: faker.random.words(),
            comments_url: faker.random.words(),
            events_url: faker.random.words(),
            html_url: faker.random.words(),
            number: faker.datatype.number(),
            state: faker.random.words(),
            title: faker.random.words(),
            body: faker.random.words(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            labels: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({})),
            assignee: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            assignees: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            })),
            milestone: {
              url: faker.random.words(),
              html_url: faker.random.words(),
              labels_url: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              number: faker.datatype.number(),
              state: faker.random.arrayElement(['open', 'closed']),
              title: faker.random.words(),
              description: faker.random.words(),
              creator: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              open_issues: faker.datatype.number(),
              closed_issues: faker.datatype.number(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              closed_at: faker.random.words(),
              due_on: faker.random.words(),
            },
            locked: faker.datatype.boolean(),
            active_lock_reason: faker.random.words(),
            comments: faker.datatype.number(),
            pull_request: {
              merged_at: faker.random.words(),
              diff_url: faker.random.words(),
              html_url: faker.random.words(),
              patch_url: faker.random.words(),
              url: faker.random.words(),
            },
            closed_at: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            draft: faker.datatype.boolean(),
            closed_by: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            body_html: faker.random.words(),
            body_text: faker.random.words(),
            timeline_url: faker.random.words(),
            repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              license: {
                key: faker.random.words(),
                name: faker.random.words(),
                url: faker.random.words(),
                spdx_id: faker.random.words(),
                node_id: faker.random.words(),
                html_url: faker.random.words(),
              },
              organization: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              allow_rebase_merge: faker.datatype.boolean(),
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                owner: {
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.random.words(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.random.words(),
              starred_at: faker.random.words(),
            },
            performed_via_github_app: {
              id: faker.datatype.number(),
              slug: faker.random.words(),
              node_id: faker.random.words(),
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              name: faker.random.words(),
              description: faker.random.words(),
              external_url: faker.random.words(),
              html_url: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                issues: faker.random.words(),
                checks: faker.random.words(),
                metadata: faker.random.words(),
                contents: faker.random.words(),
                deployments: faker.random.words(),
              },
              events: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              installations_count: faker.datatype.number(),
              client_id: faker.random.words(),
              client_secret: faker.random.words(),
              webhook_secret: faker.random.words(),
              pem: faker.random.words(),
            },
            author_association: faker.random.arrayElement([
              'COLLABORATOR',
              'CONTRIBUTOR',
              'FIRST_TIMER',
              'FIRST_TIME_CONTRIBUTOR',
              'MANNEQUIN',
              'MEMBER',
              'NONE',
              'OWNER',
            ]),
            reactions: {
              url: faker.random.words(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }))
        ),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/orgs/:org/members', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          }))
        ),
      ],
      [ctx.status(302), ctx.json({})],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/orgs/:org/members/:username', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [ctx.status(302), ctx.json({})],
      [ctx.status(404), ctx.json({})],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/orgs/:org/members/:username', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/orgs/:org/memberships/:username', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          url: faker.random.words(),
          state: faker.random.arrayElement(['active', 'pending']),
          role: faker.random.arrayElement([
            'admin',
            'member',
            'billing_manager',
          ]),
          organization_url: faker.random.words(),
          organization: {
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            hooks_url: faker.random.words(),
            issues_url: faker.random.words(),
            members_url: faker.random.words(),
            public_members_url: faker.random.words(),
            avatar_url: faker.random.words(),
            description: faker.random.words(),
          },
          user: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          permissions: {
            can_create_repository: faker.datatype.boolean(),
          },
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.put('/orgs/:org/memberships/:username', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          url: faker.random.words(),
          state: faker.random.arrayElement(['active', 'pending']),
          role: faker.random.arrayElement([
            'admin',
            'member',
            'billing_manager',
          ]),
          organization_url: faker.random.words(),
          organization: {
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            hooks_url: faker.random.words(),
            issues_url: faker.random.words(),
            members_url: faker.random.words(),
            public_members_url: faker.random.words(),
            avatar_url: faker.random.words(),
            description: faker.random.words(),
          },
          user: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          permissions: {
            can_create_repository: faker.datatype.boolean(),
          },
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/orgs/:org/memberships/:username', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/orgs/:org/outside_collaborators', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.put('/orgs/:org/outside_collaborators/:username', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(202), ctx.json({})],
      [ctx.status(204), ctx.json({})],
      [ctx.status(403), ctx.json({})],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/orgs/:org/outside_collaborators/:username', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/orgs/:org/pre-receive-hooks', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.datatype.number(),
            name: faker.random.words(),
            enforcement: faker.random.words(),
            configuration_url: faker.random.words(),
            allow_downstream_configuration: faker.datatype.boolean(),
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get(
    '/orgs/:org/pre-receive-hooks/:pre_receive_hook_id',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            name: faker.random.words(),
            enforcement: faker.random.words(),
            configuration_url: faker.random.words(),
            allow_downstream_configuration: faker.datatype.boolean(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.patch(
    '/orgs/:org/pre-receive-hooks/:pre_receive_hook_id',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            name: faker.random.words(),
            enforcement: faker.random.words(),
            configuration_url: faker.random.words(),
            allow_downstream_configuration: faker.datatype.boolean(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/orgs/:org/pre-receive-hooks/:pre_receive_hook_id',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            name: faker.random.words(),
            enforcement: faker.random.words(),
            configuration_url: faker.random.words(),
            allow_downstream_configuration: faker.datatype.boolean(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get('/orgs/:org/projects', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            owner_url: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            columns_url: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            body: faker.random.words(),
            number: faker.datatype.number(),
            state: faker.random.words(),
            creator: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            organization_permission: faker.random.arrayElement([
              'read',
              'write',
              'admin',
              'none',
            ]),
            private: faker.datatype.boolean(),
          }))
        ),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/orgs/:org/projects', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json({
          owner_url: faker.random.words(),
          url: faker.random.words(),
          html_url: faker.random.words(),
          columns_url: faker.random.words(),
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          name: faker.random.words(),
          body: faker.random.words(),
          number: faker.datatype.number(),
          state: faker.random.words(),
          creator: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          organization_permission: faker.random.arrayElement([
            'read',
            'write',
            'admin',
            'none',
          ]),
          private: faker.datatype.boolean(),
        }),
      ],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(410),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/orgs/:org/public_members', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/orgs/:org/public_members/:username', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [ctx.status(404), ctx.json({})],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.put('/orgs/:org/public_members/:username', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/orgs/:org/public_members/:username', (req, res, ctx) => {
    const resultArrray = [[ctx.status(204), ctx.json({})]];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/orgs/:org/repos', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            full_name: faker.random.words(),
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.random.words(),
            description: faker.random.words(),
            fork: faker.datatype.boolean(),
            url: faker.random.words(),
            archive_url: faker.random.words(),
            assignees_url: faker.random.words(),
            blobs_url: faker.random.words(),
            branches_url: faker.random.words(),
            collaborators_url: faker.random.words(),
            comments_url: faker.random.words(),
            commits_url: faker.random.words(),
            compare_url: faker.random.words(),
            contents_url: faker.random.words(),
            contributors_url: faker.random.words(),
            deployments_url: faker.random.words(),
            downloads_url: faker.random.words(),
            events_url: faker.random.words(),
            forks_url: faker.random.words(),
            git_commits_url: faker.random.words(),
            git_refs_url: faker.random.words(),
            git_tags_url: faker.random.words(),
            git_url: faker.random.words(),
            issue_comment_url: faker.random.words(),
            issue_events_url: faker.random.words(),
            issues_url: faker.random.words(),
            keys_url: faker.random.words(),
            labels_url: faker.random.words(),
            languages_url: faker.random.words(),
            merges_url: faker.random.words(),
            milestones_url: faker.random.words(),
            notifications_url: faker.random.words(),
            pulls_url: faker.random.words(),
            releases_url: faker.random.words(),
            ssh_url: faker.random.words(),
            stargazers_url: faker.random.words(),
            statuses_url: faker.random.words(),
            subscribers_url: faker.random.words(),
            subscription_url: faker.random.words(),
            tags_url: faker.random.words(),
            teams_url: faker.random.words(),
            trees_url: faker.random.words(),
            clone_url: faker.random.words(),
            mirror_url: faker.random.words(),
            hooks_url: faker.random.words(),
            svn_url: faker.random.words(),
            homepage: faker.random.words(),
            language: faker.random.words(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.random.words(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.random.words(),
            pushed_at: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              license: {
                key: faker.random.words(),
                name: faker.random.words(),
                url: faker.random.words(),
                spdx_id: faker.random.words(),
                node_id: faker.random.words(),
                html_url: faker.random.words(),
              },
              organization: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              allow_rebase_merge: faker.datatype.boolean(),
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                owner: {
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.random.words(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.random.words(),
              starred_at: faker.random.words(),
            },
            temp_clone_token: faker.random.words(),
            delete_branch_on_merge: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            code_of_conduct: {
              key: faker.random.words(),
              name: faker.random.words(),
              url: faker.random.words(),
              body: faker.random.words(),
              html_url: faker.random.words(),
            },
            license: {
              key: faker.random.words(),
              name: faker.random.words(),
              spdx_id: faker.random.words(),
              url: faker.random.words(),
              node_id: faker.random.words(),
            },
            forks: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            allow_forking: faker.datatype.boolean(),
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/orgs/:org/repos', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json({
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          name: faker.random.words(),
          full_name: faker.random.words(),
          license: {
            key: faker.random.words(),
            name: faker.random.words(),
            url: faker.random.words(),
            spdx_id: faker.random.words(),
            node_id: faker.random.words(),
            html_url: faker.random.words(),
          },
          organization: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          forks: faker.datatype.number(),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.random.words(),
          description: faker.random.words(),
          fork: faker.datatype.boolean(),
          url: faker.random.words(),
          archive_url: faker.random.words(),
          assignees_url: faker.random.words(),
          blobs_url: faker.random.words(),
          branches_url: faker.random.words(),
          collaborators_url: faker.random.words(),
          comments_url: faker.random.words(),
          commits_url: faker.random.words(),
          compare_url: faker.random.words(),
          contents_url: faker.random.words(),
          contributors_url: faker.random.words(),
          deployments_url: faker.random.words(),
          downloads_url: faker.random.words(),
          events_url: faker.random.words(),
          forks_url: faker.random.words(),
          git_commits_url: faker.random.words(),
          git_refs_url: faker.random.words(),
          git_tags_url: faker.random.words(),
          git_url: faker.random.words(),
          issue_comment_url: faker.random.words(),
          issue_events_url: faker.random.words(),
          issues_url: faker.random.words(),
          keys_url: faker.random.words(),
          labels_url: faker.random.words(),
          languages_url: faker.random.words(),
          merges_url: faker.random.words(),
          milestones_url: faker.random.words(),
          notifications_url: faker.random.words(),
          pulls_url: faker.random.words(),
          releases_url: faker.random.words(),
          ssh_url: faker.random.words(),
          stargazers_url: faker.random.words(),
          statuses_url: faker.random.words(),
          subscribers_url: faker.random.words(),
          subscription_url: faker.random.words(),
          tags_url: faker.random.words(),
          teams_url: faker.random.words(),
          trees_url: faker.random.words(),
          clone_url: faker.random.words(),
          mirror_url: faker.random.words(),
          hooks_url: faker.random.words(),
          svn_url: faker.random.words(),
          homepage: faker.random.words(),
          language: faker.random.words(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.random.words(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.random.words(),
          pushed_at: faker.random.words(),
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          allow_rebase_merge: faker.datatype.boolean(),
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            full_name: faker.random.words(),
            owner: {
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.random.words(),
            description: faker.random.words(),
            fork: faker.datatype.boolean(),
            url: faker.random.words(),
            archive_url: faker.random.words(),
            assignees_url: faker.random.words(),
            blobs_url: faker.random.words(),
            branches_url: faker.random.words(),
            collaborators_url: faker.random.words(),
            comments_url: faker.random.words(),
            commits_url: faker.random.words(),
            compare_url: faker.random.words(),
            contents_url: faker.random.words(),
            contributors_url: faker.random.words(),
            deployments_url: faker.random.words(),
            downloads_url: faker.random.words(),
            events_url: faker.random.words(),
            forks_url: faker.random.words(),
            git_commits_url: faker.random.words(),
            git_refs_url: faker.random.words(),
            git_tags_url: faker.random.words(),
            git_url: faker.random.words(),
            issue_comment_url: faker.random.words(),
            issue_events_url: faker.random.words(),
            issues_url: faker.random.words(),
            keys_url: faker.random.words(),
            labels_url: faker.random.words(),
            languages_url: faker.random.words(),
            merges_url: faker.random.words(),
            milestones_url: faker.random.words(),
            notifications_url: faker.random.words(),
            pulls_url: faker.random.words(),
            releases_url: faker.random.words(),
            ssh_url: faker.random.words(),
            stargazers_url: faker.random.words(),
            statuses_url: faker.random.words(),
            subscribers_url: faker.random.words(),
            subscription_url: faker.random.words(),
            tags_url: faker.random.words(),
            teams_url: faker.random.words(),
            trees_url: faker.random.words(),
            clone_url: faker.random.words(),
            mirror_url: faker.random.words(),
            hooks_url: faker.random.words(),
            svn_url: faker.random.words(),
            homepage: faker.random.words(),
            language: faker.random.words(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.random.words(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.random.words(),
            pushed_at: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.random.words(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
          },
          temp_clone_token: faker.random.words(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          master_branch: faker.random.words(),
          starred_at: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/orgs/:org/secret-scanning/alerts', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            number: {},
            created_at: {},
            url: {},
            html_url: {},
            locations_url: faker.random.words(),
            state: {},
            resolution: {},
            resolved_at: faker.random.words(),
            resolved_by: {},
            secret_type: faker.random.words(),
            secret: faker.random.words(),
            repository: {},
          }))
        ),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(503),
        ctx.json({
          code: faker.random.words(),
          message: faker.random.words(),
          documentation_url: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/orgs/:org/teams', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            slug: faker.random.words(),
            description: faker.random.words(),
            privacy: faker.random.words(),
            permission: faker.random.words(),
            permissions: {
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              admin: faker.datatype.boolean(),
            },
            url: faker.random.words(),
            html_url: faker.random.words(),
            members_url: faker.random.words(),
            repositories_url: faker.random.words(),
            parent: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              url: faker.random.words(),
              members_url: faker.random.words(),
              name: faker.random.words(),
              description: faker.random.words(),
              permission: faker.random.words(),
              privacy: faker.random.words(),
              html_url: faker.random.words(),
              repositories_url: faker.random.words(),
              slug: faker.random.words(),
              ldap_dn: faker.random.words(),
            },
          }))
        ),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/orgs/:org/teams', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json({
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          url: faker.random.words(),
          html_url: faker.random.words(),
          name: faker.random.words(),
          slug: faker.random.words(),
          description: faker.random.words(),
          privacy: faker.random.arrayElement(['closed', 'secret']),
          permission: faker.random.words(),
          members_url: faker.random.words(),
          repositories_url: faker.random.words(),
          parent: {
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            url: faker.random.words(),
            members_url: faker.random.words(),
            name: faker.random.words(),
            description: faker.random.words(),
            permission: faker.random.words(),
            privacy: faker.random.words(),
            html_url: faker.random.words(),
            repositories_url: faker.random.words(),
            slug: faker.random.words(),
            ldap_dn: faker.random.words(),
          },
          members_count: faker.datatype.number(),
          repos_count: faker.datatype.number(),
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          organization: {
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            hooks_url: faker.random.words(),
            issues_url: faker.random.words(),
            members_url: faker.random.words(),
            public_members_url: faker.random.words(),
            avatar_url: faker.random.words(),
            description: faker.random.words(),
            name: faker.random.words(),
            company: faker.random.words(),
            blog: faker.random.words(),
            location: faker.random.words(),
            email: faker.random.words(),
            twitter_username: faker.random.words(),
            is_verified: faker.datatype.boolean(),
            has_organization_projects: faker.datatype.boolean(),
            has_repository_projects: faker.datatype.boolean(),
            public_repos: faker.datatype.number(),
            public_gists: faker.datatype.number(),
            followers: faker.datatype.number(),
            following: faker.datatype.number(),
            html_url: faker.random.words(),
            created_at: faker.random.words(),
            type: faker.random.words(),
            total_private_repos: faker.datatype.number(),
            owned_private_repos: faker.datatype.number(),
            private_gists: faker.datatype.number(),
            disk_usage: faker.datatype.number(),
            collaborators: faker.datatype.number(),
            billing_email: faker.random.words(),
            plan: {
              name: faker.random.words(),
              space: faker.datatype.number(),
              private_repos: faker.datatype.number(),
              filled_seats: faker.datatype.number(),
              seats: faker.datatype.number(),
            },
            default_repository_permission: faker.random.words(),
            members_can_create_repositories: faker.datatype.boolean(),
            two_factor_requirement_enabled: faker.datatype.boolean(),
            members_allowed_repository_creation_type: faker.random.words(),
            members_can_create_public_repositories: faker.datatype.boolean(),
            members_can_create_private_repositories: faker.datatype.boolean(),
            members_can_create_internal_repositories: faker.datatype.boolean(),
            members_can_create_pages: faker.datatype.boolean(),
            members_can_create_public_pages: faker.datatype.boolean(),
            members_can_create_private_pages: faker.datatype.boolean(),
            members_can_fork_private_repositories: faker.datatype.boolean(),
            updated_at: faker.random.words(),
          },
          ldap_dn: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/orgs/:org/teams/:team_slug', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          url: faker.random.words(),
          html_url: faker.random.words(),
          name: faker.random.words(),
          slug: faker.random.words(),
          description: faker.random.words(),
          privacy: faker.random.arrayElement(['closed', 'secret']),
          permission: faker.random.words(),
          members_url: faker.random.words(),
          repositories_url: faker.random.words(),
          parent: {
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            url: faker.random.words(),
            members_url: faker.random.words(),
            name: faker.random.words(),
            description: faker.random.words(),
            permission: faker.random.words(),
            privacy: faker.random.words(),
            html_url: faker.random.words(),
            repositories_url: faker.random.words(),
            slug: faker.random.words(),
            ldap_dn: faker.random.words(),
          },
          members_count: faker.datatype.number(),
          repos_count: faker.datatype.number(),
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          organization: {
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            hooks_url: faker.random.words(),
            issues_url: faker.random.words(),
            members_url: faker.random.words(),
            public_members_url: faker.random.words(),
            avatar_url: faker.random.words(),
            description: faker.random.words(),
            name: faker.random.words(),
            company: faker.random.words(),
            blog: faker.random.words(),
            location: faker.random.words(),
            email: faker.random.words(),
            twitter_username: faker.random.words(),
            is_verified: faker.datatype.boolean(),
            has_organization_projects: faker.datatype.boolean(),
            has_repository_projects: faker.datatype.boolean(),
            public_repos: faker.datatype.number(),
            public_gists: faker.datatype.number(),
            followers: faker.datatype.number(),
            following: faker.datatype.number(),
            html_url: faker.random.words(),
            created_at: faker.random.words(),
            type: faker.random.words(),
            total_private_repos: faker.datatype.number(),
            owned_private_repos: faker.datatype.number(),
            private_gists: faker.datatype.number(),
            disk_usage: faker.datatype.number(),
            collaborators: faker.datatype.number(),
            billing_email: faker.random.words(),
            plan: {
              name: faker.random.words(),
              space: faker.datatype.number(),
              private_repos: faker.datatype.number(),
              filled_seats: faker.datatype.number(),
              seats: faker.datatype.number(),
            },
            default_repository_permission: faker.random.words(),
            members_can_create_repositories: faker.datatype.boolean(),
            two_factor_requirement_enabled: faker.datatype.boolean(),
            members_allowed_repository_creation_type: faker.random.words(),
            members_can_create_public_repositories: faker.datatype.boolean(),
            members_can_create_private_repositories: faker.datatype.boolean(),
            members_can_create_internal_repositories: faker.datatype.boolean(),
            members_can_create_pages: faker.datatype.boolean(),
            members_can_create_public_pages: faker.datatype.boolean(),
            members_can_create_private_pages: faker.datatype.boolean(),
            members_can_fork_private_repositories: faker.datatype.boolean(),
            updated_at: faker.random.words(),
          },
          ldap_dn: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.patch('/orgs/:org/teams/:team_slug', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json({
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          url: faker.random.words(),
          html_url: faker.random.words(),
          name: faker.random.words(),
          slug: faker.random.words(),
          description: faker.random.words(),
          privacy: faker.random.arrayElement(['closed', 'secret']),
          permission: faker.random.words(),
          members_url: faker.random.words(),
          repositories_url: faker.random.words(),
          parent: {
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            url: faker.random.words(),
            members_url: faker.random.words(),
            name: faker.random.words(),
            description: faker.random.words(),
            permission: faker.random.words(),
            privacy: faker.random.words(),
            html_url: faker.random.words(),
            repositories_url: faker.random.words(),
            slug: faker.random.words(),
            ldap_dn: faker.random.words(),
          },
          members_count: faker.datatype.number(),
          repos_count: faker.datatype.number(),
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          organization: {
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            hooks_url: faker.random.words(),
            issues_url: faker.random.words(),
            members_url: faker.random.words(),
            public_members_url: faker.random.words(),
            avatar_url: faker.random.words(),
            description: faker.random.words(),
            name: faker.random.words(),
            company: faker.random.words(),
            blog: faker.random.words(),
            location: faker.random.words(),
            email: faker.random.words(),
            twitter_username: faker.random.words(),
            is_verified: faker.datatype.boolean(),
            has_organization_projects: faker.datatype.boolean(),
            has_repository_projects: faker.datatype.boolean(),
            public_repos: faker.datatype.number(),
            public_gists: faker.datatype.number(),
            followers: faker.datatype.number(),
            following: faker.datatype.number(),
            html_url: faker.random.words(),
            created_at: faker.random.words(),
            type: faker.random.words(),
            total_private_repos: faker.datatype.number(),
            owned_private_repos: faker.datatype.number(),
            private_gists: faker.datatype.number(),
            disk_usage: faker.datatype.number(),
            collaborators: faker.datatype.number(),
            billing_email: faker.random.words(),
            plan: {
              name: faker.random.words(),
              space: faker.datatype.number(),
              private_repos: faker.datatype.number(),
              filled_seats: faker.datatype.number(),
              seats: faker.datatype.number(),
            },
            default_repository_permission: faker.random.words(),
            members_can_create_repositories: faker.datatype.boolean(),
            two_factor_requirement_enabled: faker.datatype.boolean(),
            members_allowed_repository_creation_type: faker.random.words(),
            members_can_create_public_repositories: faker.datatype.boolean(),
            members_can_create_private_repositories: faker.datatype.boolean(),
            members_can_create_internal_repositories: faker.datatype.boolean(),
            members_can_create_pages: faker.datatype.boolean(),
            members_can_create_public_pages: faker.datatype.boolean(),
            members_can_create_private_pages: faker.datatype.boolean(),
            members_can_fork_private_repositories: faker.datatype.boolean(),
            updated_at: faker.random.words(),
          },
          ldap_dn: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/orgs/:org/teams/:team_slug', (req, res, ctx) => {
    const resultArrray = [[ctx.status(204), ctx.json({})]];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/orgs/:org/teams/:team_slug/discussions', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            author: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            body: faker.random.words(),
            body_html: faker.random.words(),
            body_version: faker.random.words(),
            comments_count: faker.datatype.number(),
            comments_url: faker.random.words(),
            created_at: faker.random.words(),
            last_edited_at: faker.random.words(),
            html_url: faker.random.words(),
            node_id: faker.random.words(),
            number: faker.datatype.number(),
            pinned: faker.datatype.boolean(),
            private: faker.datatype.boolean(),
            team_url: faker.random.words(),
            title: faker.random.words(),
            updated_at: faker.random.words(),
            url: faker.random.words(),
            reactions: {
              url: faker.random.words(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/orgs/:org/teams/:team_slug/discussions', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json({
          author: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          body: faker.random.words(),
          body_html: faker.random.words(),
          body_version: faker.random.words(),
          comments_count: faker.datatype.number(),
          comments_url: faker.random.words(),
          created_at: faker.random.words(),
          last_edited_at: faker.random.words(),
          html_url: faker.random.words(),
          node_id: faker.random.words(),
          number: faker.datatype.number(),
          pinned: faker.datatype.boolean(),
          private: faker.datatype.boolean(),
          team_url: faker.random.words(),
          title: faker.random.words(),
          updated_at: faker.random.words(),
          url: faker.random.words(),
          reactions: {
            url: faker.random.words(),
            total_count: faker.datatype.number(),
            '+1': faker.datatype.number(),
            '-1': faker.datatype.number(),
            laugh: faker.datatype.number(),
            confused: faker.datatype.number(),
            heart: faker.datatype.number(),
            hooray: faker.datatype.number(),
            eyes: faker.datatype.number(),
            rocket: faker.datatype.number(),
          },
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get(
    '/orgs/:org/teams/:team_slug/discussions/:discussion_number',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            author: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            body: faker.random.words(),
            body_html: faker.random.words(),
            body_version: faker.random.words(),
            comments_count: faker.datatype.number(),
            comments_url: faker.random.words(),
            created_at: faker.random.words(),
            last_edited_at: faker.random.words(),
            html_url: faker.random.words(),
            node_id: faker.random.words(),
            number: faker.datatype.number(),
            pinned: faker.datatype.boolean(),
            private: faker.datatype.boolean(),
            team_url: faker.random.words(),
            title: faker.random.words(),
            updated_at: faker.random.words(),
            url: faker.random.words(),
            reactions: {
              url: faker.random.words(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.patch(
    '/orgs/:org/teams/:team_slug/discussions/:discussion_number',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            author: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            body: faker.random.words(),
            body_html: faker.random.words(),
            body_version: faker.random.words(),
            comments_count: faker.datatype.number(),
            comments_url: faker.random.words(),
            created_at: faker.random.words(),
            last_edited_at: faker.random.words(),
            html_url: faker.random.words(),
            node_id: faker.random.words(),
            number: faker.datatype.number(),
            pinned: faker.datatype.boolean(),
            private: faker.datatype.boolean(),
            team_url: faker.random.words(),
            title: faker.random.words(),
            updated_at: faker.random.words(),
            url: faker.random.words(),
            reactions: {
              url: faker.random.words(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/orgs/:org/teams/:team_slug/discussions/:discussion_number',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json(
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
              _ => ({
                author: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                body: faker.random.words(),
                body_html: faker.random.words(),
                body_version: faker.random.words(),
                created_at: faker.random.words(),
                last_edited_at: faker.random.words(),
                discussion_url: faker.random.words(),
                html_url: faker.random.words(),
                node_id: faker.random.words(),
                number: faker.datatype.number(),
                updated_at: faker.random.words(),
                url: faker.random.words(),
                reactions: {
                  url: faker.random.words(),
                  total_count: faker.datatype.number(),
                  '+1': faker.datatype.number(),
                  '-1': faker.datatype.number(),
                  laugh: faker.datatype.number(),
                  confused: faker.datatype.number(),
                  heart: faker.datatype.number(),
                  hooray: faker.datatype.number(),
                  eyes: faker.datatype.number(),
                  rocket: faker.datatype.number(),
                },
              })
            )
          ),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.post(
    '/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(201),
          ctx.json({
            author: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            body: faker.random.words(),
            body_html: faker.random.words(),
            body_version: faker.random.words(),
            created_at: faker.random.words(),
            last_edited_at: faker.random.words(),
            discussion_url: faker.random.words(),
            html_url: faker.random.words(),
            node_id: faker.random.words(),
            number: faker.datatype.number(),
            updated_at: faker.random.words(),
            url: faker.random.words(),
            reactions: {
              url: faker.random.words(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments/:comment_number',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            author: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            body: faker.random.words(),
            body_html: faker.random.words(),
            body_version: faker.random.words(),
            created_at: faker.random.words(),
            last_edited_at: faker.random.words(),
            discussion_url: faker.random.words(),
            html_url: faker.random.words(),
            node_id: faker.random.words(),
            number: faker.datatype.number(),
            updated_at: faker.random.words(),
            url: faker.random.words(),
            reactions: {
              url: faker.random.words(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.patch(
    '/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments/:comment_number',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            author: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            body: faker.random.words(),
            body_html: faker.random.words(),
            body_version: faker.random.words(),
            created_at: faker.random.words(),
            last_edited_at: faker.random.words(),
            discussion_url: faker.random.words(),
            html_url: faker.random.words(),
            node_id: faker.random.words(),
            number: faker.datatype.number(),
            updated_at: faker.random.words(),
            url: faker.random.words(),
            reactions: {
              url: faker.random.words(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments/:comment_number',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments/:comment_number/reactions',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json(
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
              _ => ({
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                user: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                content: faker.random.arrayElement([
                  '+1',
                  '-1',
                  'laugh',
                  'confused',
                  'heart',
                  'hooray',
                  'rocket',
                  'eyes',
                ]),
                created_at: faker.random.words(),
              })
            )
          ),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.post(
    '/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments/:comment_number/reactions',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            content: faker.random.arrayElement([
              '+1',
              '-1',
              'laugh',
              'confused',
              'heart',
              'hooray',
              'rocket',
              'eyes',
            ]),
            created_at: faker.random.words(),
          }),
        ],
        [
          ctx.status(201),
          ctx.json({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            content: faker.random.arrayElement([
              '+1',
              '-1',
              'laugh',
              'confused',
              'heart',
              'hooray',
              'rocket',
              'eyes',
            ]),
            created_at: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/orgs/:org/teams/:team_slug/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/orgs/:org/teams/:team_slug/discussions/:discussion_number/reactions',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json(
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
              _ => ({
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                user: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                content: faker.random.arrayElement([
                  '+1',
                  '-1',
                  'laugh',
                  'confused',
                  'heart',
                  'hooray',
                  'rocket',
                  'eyes',
                ]),
                created_at: faker.random.words(),
              })
            )
          ),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.post(
    '/orgs/:org/teams/:team_slug/discussions/:discussion_number/reactions',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            content: faker.random.arrayElement([
              '+1',
              '-1',
              'laugh',
              'confused',
              'heart',
              'hooray',
              'rocket',
              'eyes',
            ]),
            created_at: faker.random.words(),
          }),
        ],
        [
          ctx.status(201),
          ctx.json({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            content: faker.random.arrayElement([
              '+1',
              '-1',
              'laugh',
              'confused',
              'heart',
              'hooray',
              'rocket',
              'eyes',
            ]),
            created_at: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/orgs/:org/teams/:team_slug/discussions/:discussion_number/reactions/:reaction_id',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get('/orgs/:org/teams/:team_slug/members', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get(
    '/orgs/:org/teams/:team_slug/memberships/:username',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            url: faker.random.words(),
            role: faker.random.arrayElement(['member', 'maintainer']),
            state: faker.random.arrayElement(['active', 'pending']),
          }),
        ],
        [ctx.status(404), ctx.json({})],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.put(
    '/orgs/:org/teams/:team_slug/memberships/:username',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            url: faker.random.words(),
            role: faker.random.arrayElement(['member', 'maintainer']),
            state: faker.random.arrayElement(['active', 'pending']),
          }),
        ],
        [ctx.status(403), ctx.json({})],
        [ctx.status(422), ctx.json({})],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/orgs/:org/teams/:team_slug/memberships/:username',
    (req, res, ctx) => {
      const resultArrray = [
        [ctx.status(204), ctx.json({})],
        [ctx.status(403), ctx.json({})],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get('/orgs/:org/teams/:team_slug/projects', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            owner_url: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            columns_url: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            body: faker.random.words(),
            number: faker.datatype.number(),
            state: faker.random.words(),
            creator: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            organization_permission: faker.random.words(),
            private: faker.datatype.boolean(),
            permissions: {
              read: faker.datatype.boolean(),
              write: faker.datatype.boolean(),
              admin: faker.datatype.boolean(),
            },
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get(
    '/orgs/:org/teams/:team_slug/projects/:project_id',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            owner_url: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            columns_url: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            body: faker.random.words(),
            number: faker.datatype.number(),
            state: faker.random.words(),
            creator: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            organization_permission: faker.random.words(),
            private: faker.datatype.boolean(),
            permissions: {
              read: faker.datatype.boolean(),
              write: faker.datatype.boolean(),
              admin: faker.datatype.boolean(),
            },
          }),
        ],
        [ctx.status(404), ctx.json({})],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.put(
    '/orgs/:org/teams/:team_slug/projects/:project_id',
    (req, res, ctx) => {
      const resultArrray = [
        [ctx.status(204), ctx.json({})],
        [
          ctx.status(403),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/orgs/:org/teams/:team_slug/projects/:project_id',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get('/orgs/:org/teams/:team_slug/repos', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            full_name: faker.random.words(),
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.random.words(),
            description: faker.random.words(),
            fork: faker.datatype.boolean(),
            url: faker.random.words(),
            archive_url: faker.random.words(),
            assignees_url: faker.random.words(),
            blobs_url: faker.random.words(),
            branches_url: faker.random.words(),
            collaborators_url: faker.random.words(),
            comments_url: faker.random.words(),
            commits_url: faker.random.words(),
            compare_url: faker.random.words(),
            contents_url: faker.random.words(),
            contributors_url: faker.random.words(),
            deployments_url: faker.random.words(),
            downloads_url: faker.random.words(),
            events_url: faker.random.words(),
            forks_url: faker.random.words(),
            git_commits_url: faker.random.words(),
            git_refs_url: faker.random.words(),
            git_tags_url: faker.random.words(),
            git_url: faker.random.words(),
            issue_comment_url: faker.random.words(),
            issue_events_url: faker.random.words(),
            issues_url: faker.random.words(),
            keys_url: faker.random.words(),
            labels_url: faker.random.words(),
            languages_url: faker.random.words(),
            merges_url: faker.random.words(),
            milestones_url: faker.random.words(),
            notifications_url: faker.random.words(),
            pulls_url: faker.random.words(),
            releases_url: faker.random.words(),
            ssh_url: faker.random.words(),
            stargazers_url: faker.random.words(),
            statuses_url: faker.random.words(),
            subscribers_url: faker.random.words(),
            subscription_url: faker.random.words(),
            tags_url: faker.random.words(),
            teams_url: faker.random.words(),
            trees_url: faker.random.words(),
            clone_url: faker.random.words(),
            mirror_url: faker.random.words(),
            hooks_url: faker.random.words(),
            svn_url: faker.random.words(),
            homepage: faker.random.words(),
            language: faker.random.words(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.random.words(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.random.words(),
            pushed_at: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              license: {
                key: faker.random.words(),
                name: faker.random.words(),
                url: faker.random.words(),
                spdx_id: faker.random.words(),
                node_id: faker.random.words(),
                html_url: faker.random.words(),
              },
              organization: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              allow_rebase_merge: faker.datatype.boolean(),
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                owner: {
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.random.words(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.random.words(),
              starred_at: faker.random.words(),
            },
            temp_clone_token: faker.random.words(),
            delete_branch_on_merge: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            code_of_conduct: {
              key: faker.random.words(),
              name: faker.random.words(),
              url: faker.random.words(),
              body: faker.random.words(),
              html_url: faker.random.words(),
            },
            license: {
              key: faker.random.words(),
              name: faker.random.words(),
              spdx_id: faker.random.words(),
              url: faker.random.words(),
              node_id: faker.random.words(),
            },
            forks: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            allow_forking: faker.datatype.boolean(),
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get(
    '/orgs/:org/teams/:team_slug/repos/:owner/:repo',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            full_name: faker.random.words(),
            license: {
              key: faker.random.words(),
              name: faker.random.words(),
              url: faker.random.words(),
              spdx_id: faker.random.words(),
              node_id: faker.random.words(),
              html_url: faker.random.words(),
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.random.words(),
            description: faker.random.words(),
            fork: faker.datatype.boolean(),
            url: faker.random.words(),
            archive_url: faker.random.words(),
            assignees_url: faker.random.words(),
            blobs_url: faker.random.words(),
            branches_url: faker.random.words(),
            collaborators_url: faker.random.words(),
            comments_url: faker.random.words(),
            commits_url: faker.random.words(),
            compare_url: faker.random.words(),
            contents_url: faker.random.words(),
            contributors_url: faker.random.words(),
            deployments_url: faker.random.words(),
            downloads_url: faker.random.words(),
            events_url: faker.random.words(),
            forks_url: faker.random.words(),
            git_commits_url: faker.random.words(),
            git_refs_url: faker.random.words(),
            git_tags_url: faker.random.words(),
            git_url: faker.random.words(),
            issue_comment_url: faker.random.words(),
            issue_events_url: faker.random.words(),
            issues_url: faker.random.words(),
            keys_url: faker.random.words(),
            labels_url: faker.random.words(),
            languages_url: faker.random.words(),
            merges_url: faker.random.words(),
            milestones_url: faker.random.words(),
            notifications_url: faker.random.words(),
            pulls_url: faker.random.words(),
            releases_url: faker.random.words(),
            ssh_url: faker.random.words(),
            stargazers_url: faker.random.words(),
            statuses_url: faker.random.words(),
            subscribers_url: faker.random.words(),
            subscription_url: faker.random.words(),
            tags_url: faker.random.words(),
            teams_url: faker.random.words(),
            trees_url: faker.random.words(),
            clone_url: faker.random.words(),
            mirror_url: faker.random.words(),
            hooks_url: faker.random.words(),
            svn_url: faker.random.words(),
            homepage: faker.random.words(),
            language: faker.random.words(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.random.words(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.random.words(),
            pushed_at: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            allow_rebase_merge: faker.datatype.boolean(),
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              license: {
                key: faker.random.words(),
                name: faker.random.words(),
                url: faker.random.words(),
                spdx_id: faker.random.words(),
                node_id: faker.random.words(),
                html_url: faker.random.words(),
              },
              organization: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              allow_rebase_merge: faker.datatype.boolean(),
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                owner: {
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.random.words(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.random.words(),
              starred_at: faker.random.words(),
            },
            temp_clone_token: faker.random.words(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.random.words(),
          }),
        ],
        [ctx.status(204), ctx.json({})],
        [ctx.status(404), ctx.json({})],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.put(
    '/orgs/:org/teams/:team_slug/repos/:owner/:repo',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/orgs/:org/teams/:team_slug/repos/:owner/:repo',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get('/orgs/:org/teams/:team_slug/teams', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            slug: faker.random.words(),
            description: faker.random.words(),
            privacy: faker.random.words(),
            permission: faker.random.words(),
            permissions: {
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              admin: faker.datatype.boolean(),
            },
            url: faker.random.words(),
            html_url: faker.random.words(),
            members_url: faker.random.words(),
            repositories_url: faker.random.words(),
            parent: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              url: faker.random.words(),
              members_url: faker.random.words(),
              name: faker.random.words(),
              description: faker.random.words(),
              permission: faker.random.words(),
              privacy: faker.random.words(),
              html_url: faker.random.words(),
              repositories_url: faker.random.words(),
              slug: faker.random.words(),
              ldap_dn: faker.random.words(),
            },
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/projects/columns/cards/:card_id', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          url: faker.random.words(),
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          note: faker.random.words(),
          creator: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          archived: faker.datatype.boolean(),
          column_name: faker.random.words(),
          project_id: faker.random.words(),
          column_url: faker.random.words(),
          content_url: faker.random.words(),
          project_url: faker.random.words(),
        }),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.patch('/projects/columns/cards/:card_id', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          url: faker.random.words(),
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          note: faker.random.words(),
          creator: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          archived: faker.datatype.boolean(),
          column_name: faker.random.words(),
          project_id: faker.random.words(),
          column_url: faker.random.words(),
          content_url: faker.random.words(),
          project_url: faker.random.words(),
        }),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/projects/columns/cards/:card_id', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/projects/columns/cards/:card_id/moves', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(201), ctx.json({})],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            code: faker.random.words(),
            message: faker.random.words(),
            resource: faker.random.words(),
            field: faker.random.words(),
          })),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
      [
        ctx.status(503),
        ctx.json({
          code: faker.random.words(),
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            code: faker.random.words(),
            message: faker.random.words(),
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/projects/columns/:column_id', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          url: faker.random.words(),
          project_url: faker.random.words(),
          cards_url: faker.random.words(),
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          name: faker.random.words(),
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
        }),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.patch('/projects/columns/:column_id', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          url: faker.random.words(),
          project_url: faker.random.words(),
          cards_url: faker.random.words(),
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          name: faker.random.words(),
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
        }),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/projects/columns/:column_id', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/projects/columns/:column_id/cards', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            url: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            note: faker.random.words(),
            creator: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            archived: faker.datatype.boolean(),
            column_name: faker.random.words(),
            project_id: faker.random.words(),
            column_url: faker.random.words(),
            content_url: faker.random.words(),
            project_url: faker.random.words(),
          }))
        ),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/projects/columns/:column_id/cards', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json({
          url: faker.random.words(),
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          note: faker.random.words(),
          creator: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          archived: faker.datatype.boolean(),
          column_name: faker.random.words(),
          project_id: faker.random.words(),
          column_url: faker.random.words(),
          content_url: faker.random.words(),
          project_url: faker.random.words(),
        }),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [ctx.status(422), ctx.json({})],
      [
        ctx.status(503),
        ctx.json({
          code: faker.random.words(),
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            code: faker.random.words(),
            message: faker.random.words(),
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/projects/columns/:column_id/moves', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(201), ctx.json({})],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/projects/:project_id', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          owner_url: faker.random.words(),
          url: faker.random.words(),
          html_url: faker.random.words(),
          columns_url: faker.random.words(),
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          name: faker.random.words(),
          body: faker.random.words(),
          number: faker.datatype.number(),
          state: faker.random.words(),
          creator: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          organization_permission: faker.random.arrayElement([
            'read',
            'write',
            'admin',
            'none',
          ]),
          private: faker.datatype.boolean(),
        }),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.patch('/projects/:project_id', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          owner_url: faker.random.words(),
          url: faker.random.words(),
          html_url: faker.random.words(),
          columns_url: faker.random.words(),
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          name: faker.random.words(),
          body: faker.random.words(),
          number: faker.datatype.number(),
          state: faker.random.words(),
          creator: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          organization_permission: faker.random.arrayElement([
            'read',
            'write',
            'admin',
            'none',
          ]),
          private: faker.datatype.boolean(),
        }),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
        }),
      ],
      [ctx.status(404), ctx.json({})],
      [
        ctx.status(410),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/projects/:project_id', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(410),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/projects/:project_id/collaborators', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          }))
        ),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.put('/projects/:project_id/collaborators/:username', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete(
    '/projects/:project_id/collaborators/:username',
    (req, res, ctx) => {
      const resultArrray = [
        [ctx.status(204), ctx.json({})],
        [ctx.status(304), ctx.json({})],
        [
          ctx.status(401),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            errors: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              resource: faker.random.words(),
              field: faker.random.words(),
              message: faker.random.words(),
              code: faker.random.words(),
              index: faker.datatype.number(),
              value: {},
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/projects/:project_id/collaborators/:username/permission',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            permission: faker.random.words(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
          }),
        ],
        [ctx.status(304), ctx.json({})],
        [
          ctx.status(401),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            errors: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              resource: faker.random.words(),
              field: faker.random.words(),
              message: faker.random.words(),
              code: faker.random.words(),
              index: faker.datatype.number(),
              value: {},
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get('/projects/:project_id/columns', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            url: faker.random.words(),
            project_url: faker.random.words(),
            cards_url: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
          }))
        ),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/projects/:project_id/columns', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json({
          url: faker.random.words(),
          project_url: faker.random.words(),
          cards_url: faker.random.words(),
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          name: faker.random.words(),
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
        }),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/rate_limit', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          resources: {
            core: {
              limit: faker.datatype.number(),
              remaining: faker.datatype.number(),
              reset: faker.datatype.number(),
              used: faker.datatype.number(),
            },
            graphql: {
              limit: faker.datatype.number(),
              remaining: faker.datatype.number(),
              reset: faker.datatype.number(),
              used: faker.datatype.number(),
            },
            search: {
              limit: faker.datatype.number(),
              remaining: faker.datatype.number(),
              reset: faker.datatype.number(),
              used: faker.datatype.number(),
            },
            source_import: {
              limit: faker.datatype.number(),
              remaining: faker.datatype.number(),
              reset: faker.datatype.number(),
              used: faker.datatype.number(),
            },
            integration_manifest: {
              limit: faker.datatype.number(),
              remaining: faker.datatype.number(),
              reset: faker.datatype.number(),
              used: faker.datatype.number(),
            },
            code_scanning_upload: {
              limit: faker.datatype.number(),
              remaining: faker.datatype.number(),
              reset: faker.datatype.number(),
              used: faker.datatype.number(),
            },
            actions_runner_registration: {
              limit: faker.datatype.number(),
              remaining: faker.datatype.number(),
              reset: faker.datatype.number(),
              used: faker.datatype.number(),
            },
            scim: {
              limit: faker.datatype.number(),
              remaining: faker.datatype.number(),
              reset: faker.datatype.number(),
              used: faker.datatype.number(),
            },
          },
          rate: {
            limit: faker.datatype.number(),
            remaining: faker.datatype.number(),
            reset: faker.datatype.number(),
            used: faker.datatype.number(),
          },
        }),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/reactions/:reaction_id', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(410),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          name: faker.random.words(),
          full_name: faker.random.words(),
          owner: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.random.words(),
          description: faker.random.words(),
          fork: faker.datatype.boolean(),
          url: faker.random.words(),
          archive_url: faker.random.words(),
          assignees_url: faker.random.words(),
          blobs_url: faker.random.words(),
          branches_url: faker.random.words(),
          collaborators_url: faker.random.words(),
          comments_url: faker.random.words(),
          commits_url: faker.random.words(),
          compare_url: faker.random.words(),
          contents_url: faker.random.words(),
          contributors_url: faker.random.words(),
          deployments_url: faker.random.words(),
          downloads_url: faker.random.words(),
          events_url: faker.random.words(),
          forks_url: faker.random.words(),
          git_commits_url: faker.random.words(),
          git_refs_url: faker.random.words(),
          git_tags_url: faker.random.words(),
          git_url: faker.random.words(),
          issue_comment_url: faker.random.words(),
          issue_events_url: faker.random.words(),
          issues_url: faker.random.words(),
          keys_url: faker.random.words(),
          labels_url: faker.random.words(),
          languages_url: faker.random.words(),
          merges_url: faker.random.words(),
          milestones_url: faker.random.words(),
          notifications_url: faker.random.words(),
          pulls_url: faker.random.words(),
          releases_url: faker.random.words(),
          ssh_url: faker.random.words(),
          stargazers_url: faker.random.words(),
          statuses_url: faker.random.words(),
          subscribers_url: faker.random.words(),
          subscription_url: faker.random.words(),
          tags_url: faker.random.words(),
          teams_url: faker.random.words(),
          trees_url: faker.random.words(),
          clone_url: faker.random.words(),
          mirror_url: faker.random.words(),
          hooks_url: faker.random.words(),
          svn_url: faker.random.words(),
          homepage: faker.random.words(),
          language: faker.random.words(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.random.words(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.random.words(),
          pushed_at: faker.random.words(),
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          permissions: {
            admin: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
          },
          allow_rebase_merge: faker.datatype.boolean(),
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            full_name: faker.random.words(),
            license: {
              key: faker.random.words(),
              name: faker.random.words(),
              url: faker.random.words(),
              spdx_id: faker.random.words(),
              node_id: faker.random.words(),
              html_url: faker.random.words(),
            },
            organization: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.random.words(),
            description: faker.random.words(),
            fork: faker.datatype.boolean(),
            url: faker.random.words(),
            archive_url: faker.random.words(),
            assignees_url: faker.random.words(),
            blobs_url: faker.random.words(),
            branches_url: faker.random.words(),
            collaborators_url: faker.random.words(),
            comments_url: faker.random.words(),
            commits_url: faker.random.words(),
            compare_url: faker.random.words(),
            contents_url: faker.random.words(),
            contributors_url: faker.random.words(),
            deployments_url: faker.random.words(),
            downloads_url: faker.random.words(),
            events_url: faker.random.words(),
            forks_url: faker.random.words(),
            git_commits_url: faker.random.words(),
            git_refs_url: faker.random.words(),
            git_tags_url: faker.random.words(),
            git_url: faker.random.words(),
            issue_comment_url: faker.random.words(),
            issue_events_url: faker.random.words(),
            issues_url: faker.random.words(),
            keys_url: faker.random.words(),
            labels_url: faker.random.words(),
            languages_url: faker.random.words(),
            merges_url: faker.random.words(),
            milestones_url: faker.random.words(),
            notifications_url: faker.random.words(),
            pulls_url: faker.random.words(),
            releases_url: faker.random.words(),
            ssh_url: faker.random.words(),
            stargazers_url: faker.random.words(),
            statuses_url: faker.random.words(),
            subscribers_url: faker.random.words(),
            subscription_url: faker.random.words(),
            tags_url: faker.random.words(),
            teams_url: faker.random.words(),
            trees_url: faker.random.words(),
            clone_url: faker.random.words(),
            mirror_url: faker.random.words(),
            hooks_url: faker.random.words(),
            svn_url: faker.random.words(),
            homepage: faker.random.words(),
            language: faker.random.words(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.random.words(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.random.words(),
            pushed_at: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            allow_rebase_merge: faker.datatype.boolean(),
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              owner: {
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.random.words(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.random.words(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.random.words(),
            starred_at: faker.random.words(),
          },
          temp_clone_token: faker.random.words(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          license: {
            key: faker.random.words(),
            name: faker.random.words(),
            url: faker.random.words(),
            spdx_id: faker.random.words(),
            node_id: faker.random.words(),
            html_url: faker.random.words(),
          },
          organization: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          parent: {
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            full_name: faker.random.words(),
            license: {
              key: faker.random.words(),
              name: faker.random.words(),
              url: faker.random.words(),
              spdx_id: faker.random.words(),
              node_id: faker.random.words(),
              html_url: faker.random.words(),
            },
            organization: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.random.words(),
            description: faker.random.words(),
            fork: faker.datatype.boolean(),
            url: faker.random.words(),
            archive_url: faker.random.words(),
            assignees_url: faker.random.words(),
            blobs_url: faker.random.words(),
            branches_url: faker.random.words(),
            collaborators_url: faker.random.words(),
            comments_url: faker.random.words(),
            commits_url: faker.random.words(),
            compare_url: faker.random.words(),
            contents_url: faker.random.words(),
            contributors_url: faker.random.words(),
            deployments_url: faker.random.words(),
            downloads_url: faker.random.words(),
            events_url: faker.random.words(),
            forks_url: faker.random.words(),
            git_commits_url: faker.random.words(),
            git_refs_url: faker.random.words(),
            git_tags_url: faker.random.words(),
            git_url: faker.random.words(),
            issue_comment_url: faker.random.words(),
            issue_events_url: faker.random.words(),
            issues_url: faker.random.words(),
            keys_url: faker.random.words(),
            labels_url: faker.random.words(),
            languages_url: faker.random.words(),
            merges_url: faker.random.words(),
            milestones_url: faker.random.words(),
            notifications_url: faker.random.words(),
            pulls_url: faker.random.words(),
            releases_url: faker.random.words(),
            ssh_url: faker.random.words(),
            stargazers_url: faker.random.words(),
            statuses_url: faker.random.words(),
            subscribers_url: faker.random.words(),
            subscription_url: faker.random.words(),
            tags_url: faker.random.words(),
            teams_url: faker.random.words(),
            trees_url: faker.random.words(),
            clone_url: faker.random.words(),
            mirror_url: faker.random.words(),
            hooks_url: faker.random.words(),
            svn_url: faker.random.words(),
            homepage: faker.random.words(),
            language: faker.random.words(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.random.words(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.random.words(),
            pushed_at: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            allow_rebase_merge: faker.datatype.boolean(),
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              owner: {
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.random.words(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.random.words(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.random.words(),
            starred_at: faker.random.words(),
          },
          source: {
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            full_name: faker.random.words(),
            license: {
              key: faker.random.words(),
              name: faker.random.words(),
              url: faker.random.words(),
              spdx_id: faker.random.words(),
              node_id: faker.random.words(),
              html_url: faker.random.words(),
            },
            organization: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.random.words(),
            description: faker.random.words(),
            fork: faker.datatype.boolean(),
            url: faker.random.words(),
            archive_url: faker.random.words(),
            assignees_url: faker.random.words(),
            blobs_url: faker.random.words(),
            branches_url: faker.random.words(),
            collaborators_url: faker.random.words(),
            comments_url: faker.random.words(),
            commits_url: faker.random.words(),
            compare_url: faker.random.words(),
            contents_url: faker.random.words(),
            contributors_url: faker.random.words(),
            deployments_url: faker.random.words(),
            downloads_url: faker.random.words(),
            events_url: faker.random.words(),
            forks_url: faker.random.words(),
            git_commits_url: faker.random.words(),
            git_refs_url: faker.random.words(),
            git_tags_url: faker.random.words(),
            git_url: faker.random.words(),
            issue_comment_url: faker.random.words(),
            issue_events_url: faker.random.words(),
            issues_url: faker.random.words(),
            keys_url: faker.random.words(),
            labels_url: faker.random.words(),
            languages_url: faker.random.words(),
            merges_url: faker.random.words(),
            milestones_url: faker.random.words(),
            notifications_url: faker.random.words(),
            pulls_url: faker.random.words(),
            releases_url: faker.random.words(),
            ssh_url: faker.random.words(),
            stargazers_url: faker.random.words(),
            statuses_url: faker.random.words(),
            subscribers_url: faker.random.words(),
            subscription_url: faker.random.words(),
            tags_url: faker.random.words(),
            teams_url: faker.random.words(),
            trees_url: faker.random.words(),
            clone_url: faker.random.words(),
            mirror_url: faker.random.words(),
            hooks_url: faker.random.words(),
            svn_url: faker.random.words(),
            homepage: faker.random.words(),
            language: faker.random.words(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.random.words(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.random.words(),
            pushed_at: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            allow_rebase_merge: faker.datatype.boolean(),
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              owner: {
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.random.words(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.random.words(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.random.words(),
            starred_at: faker.random.words(),
          },
          forks: faker.datatype.number(),
          master_branch: faker.random.words(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          anonymous_access_enabled: faker.datatype.boolean(),
          code_of_conduct: {
            url: faker.random.words(),
            key: faker.random.words(),
            name: faker.random.words(),
            html_url: faker.random.words(),
          },
          security_and_analysis: {
            advanced_security: {
              status: faker.random.arrayElement(['enabled', 'disabled']),
            },
            secret_scanning: {
              status: faker.random.arrayElement(['enabled', 'disabled']),
            },
          },
        }),
      ],
      [
        ctx.status(301),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.patch('/repos/:owner/:repo', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          name: faker.random.words(),
          full_name: faker.random.words(),
          owner: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.random.words(),
          description: faker.random.words(),
          fork: faker.datatype.boolean(),
          url: faker.random.words(),
          archive_url: faker.random.words(),
          assignees_url: faker.random.words(),
          blobs_url: faker.random.words(),
          branches_url: faker.random.words(),
          collaborators_url: faker.random.words(),
          comments_url: faker.random.words(),
          commits_url: faker.random.words(),
          compare_url: faker.random.words(),
          contents_url: faker.random.words(),
          contributors_url: faker.random.words(),
          deployments_url: faker.random.words(),
          downloads_url: faker.random.words(),
          events_url: faker.random.words(),
          forks_url: faker.random.words(),
          git_commits_url: faker.random.words(),
          git_refs_url: faker.random.words(),
          git_tags_url: faker.random.words(),
          git_url: faker.random.words(),
          issue_comment_url: faker.random.words(),
          issue_events_url: faker.random.words(),
          issues_url: faker.random.words(),
          keys_url: faker.random.words(),
          labels_url: faker.random.words(),
          languages_url: faker.random.words(),
          merges_url: faker.random.words(),
          milestones_url: faker.random.words(),
          notifications_url: faker.random.words(),
          pulls_url: faker.random.words(),
          releases_url: faker.random.words(),
          ssh_url: faker.random.words(),
          stargazers_url: faker.random.words(),
          statuses_url: faker.random.words(),
          subscribers_url: faker.random.words(),
          subscription_url: faker.random.words(),
          tags_url: faker.random.words(),
          teams_url: faker.random.words(),
          trees_url: faker.random.words(),
          clone_url: faker.random.words(),
          mirror_url: faker.random.words(),
          hooks_url: faker.random.words(),
          svn_url: faker.random.words(),
          homepage: faker.random.words(),
          language: faker.random.words(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.random.words(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.random.words(),
          pushed_at: faker.random.words(),
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          permissions: {
            admin: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
          },
          allow_rebase_merge: faker.datatype.boolean(),
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            full_name: faker.random.words(),
            license: {
              key: faker.random.words(),
              name: faker.random.words(),
              url: faker.random.words(),
              spdx_id: faker.random.words(),
              node_id: faker.random.words(),
              html_url: faker.random.words(),
            },
            organization: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.random.words(),
            description: faker.random.words(),
            fork: faker.datatype.boolean(),
            url: faker.random.words(),
            archive_url: faker.random.words(),
            assignees_url: faker.random.words(),
            blobs_url: faker.random.words(),
            branches_url: faker.random.words(),
            collaborators_url: faker.random.words(),
            comments_url: faker.random.words(),
            commits_url: faker.random.words(),
            compare_url: faker.random.words(),
            contents_url: faker.random.words(),
            contributors_url: faker.random.words(),
            deployments_url: faker.random.words(),
            downloads_url: faker.random.words(),
            events_url: faker.random.words(),
            forks_url: faker.random.words(),
            git_commits_url: faker.random.words(),
            git_refs_url: faker.random.words(),
            git_tags_url: faker.random.words(),
            git_url: faker.random.words(),
            issue_comment_url: faker.random.words(),
            issue_events_url: faker.random.words(),
            issues_url: faker.random.words(),
            keys_url: faker.random.words(),
            labels_url: faker.random.words(),
            languages_url: faker.random.words(),
            merges_url: faker.random.words(),
            milestones_url: faker.random.words(),
            notifications_url: faker.random.words(),
            pulls_url: faker.random.words(),
            releases_url: faker.random.words(),
            ssh_url: faker.random.words(),
            stargazers_url: faker.random.words(),
            statuses_url: faker.random.words(),
            subscribers_url: faker.random.words(),
            subscription_url: faker.random.words(),
            tags_url: faker.random.words(),
            teams_url: faker.random.words(),
            trees_url: faker.random.words(),
            clone_url: faker.random.words(),
            mirror_url: faker.random.words(),
            hooks_url: faker.random.words(),
            svn_url: faker.random.words(),
            homepage: faker.random.words(),
            language: faker.random.words(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.random.words(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.random.words(),
            pushed_at: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            allow_rebase_merge: faker.datatype.boolean(),
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              owner: {
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.random.words(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.random.words(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.random.words(),
            starred_at: faker.random.words(),
          },
          temp_clone_token: faker.random.words(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          license: {
            key: faker.random.words(),
            name: faker.random.words(),
            url: faker.random.words(),
            spdx_id: faker.random.words(),
            node_id: faker.random.words(),
            html_url: faker.random.words(),
          },
          organization: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          parent: {
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            full_name: faker.random.words(),
            license: {
              key: faker.random.words(),
              name: faker.random.words(),
              url: faker.random.words(),
              spdx_id: faker.random.words(),
              node_id: faker.random.words(),
              html_url: faker.random.words(),
            },
            organization: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.random.words(),
            description: faker.random.words(),
            fork: faker.datatype.boolean(),
            url: faker.random.words(),
            archive_url: faker.random.words(),
            assignees_url: faker.random.words(),
            blobs_url: faker.random.words(),
            branches_url: faker.random.words(),
            collaborators_url: faker.random.words(),
            comments_url: faker.random.words(),
            commits_url: faker.random.words(),
            compare_url: faker.random.words(),
            contents_url: faker.random.words(),
            contributors_url: faker.random.words(),
            deployments_url: faker.random.words(),
            downloads_url: faker.random.words(),
            events_url: faker.random.words(),
            forks_url: faker.random.words(),
            git_commits_url: faker.random.words(),
            git_refs_url: faker.random.words(),
            git_tags_url: faker.random.words(),
            git_url: faker.random.words(),
            issue_comment_url: faker.random.words(),
            issue_events_url: faker.random.words(),
            issues_url: faker.random.words(),
            keys_url: faker.random.words(),
            labels_url: faker.random.words(),
            languages_url: faker.random.words(),
            merges_url: faker.random.words(),
            milestones_url: faker.random.words(),
            notifications_url: faker.random.words(),
            pulls_url: faker.random.words(),
            releases_url: faker.random.words(),
            ssh_url: faker.random.words(),
            stargazers_url: faker.random.words(),
            statuses_url: faker.random.words(),
            subscribers_url: faker.random.words(),
            subscription_url: faker.random.words(),
            tags_url: faker.random.words(),
            teams_url: faker.random.words(),
            trees_url: faker.random.words(),
            clone_url: faker.random.words(),
            mirror_url: faker.random.words(),
            hooks_url: faker.random.words(),
            svn_url: faker.random.words(),
            homepage: faker.random.words(),
            language: faker.random.words(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.random.words(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.random.words(),
            pushed_at: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            allow_rebase_merge: faker.datatype.boolean(),
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              owner: {
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.random.words(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.random.words(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.random.words(),
            starred_at: faker.random.words(),
          },
          source: {
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            full_name: faker.random.words(),
            license: {
              key: faker.random.words(),
              name: faker.random.words(),
              url: faker.random.words(),
              spdx_id: faker.random.words(),
              node_id: faker.random.words(),
              html_url: faker.random.words(),
            },
            organization: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.random.words(),
            description: faker.random.words(),
            fork: faker.datatype.boolean(),
            url: faker.random.words(),
            archive_url: faker.random.words(),
            assignees_url: faker.random.words(),
            blobs_url: faker.random.words(),
            branches_url: faker.random.words(),
            collaborators_url: faker.random.words(),
            comments_url: faker.random.words(),
            commits_url: faker.random.words(),
            compare_url: faker.random.words(),
            contents_url: faker.random.words(),
            contributors_url: faker.random.words(),
            deployments_url: faker.random.words(),
            downloads_url: faker.random.words(),
            events_url: faker.random.words(),
            forks_url: faker.random.words(),
            git_commits_url: faker.random.words(),
            git_refs_url: faker.random.words(),
            git_tags_url: faker.random.words(),
            git_url: faker.random.words(),
            issue_comment_url: faker.random.words(),
            issue_events_url: faker.random.words(),
            issues_url: faker.random.words(),
            keys_url: faker.random.words(),
            labels_url: faker.random.words(),
            languages_url: faker.random.words(),
            merges_url: faker.random.words(),
            milestones_url: faker.random.words(),
            notifications_url: faker.random.words(),
            pulls_url: faker.random.words(),
            releases_url: faker.random.words(),
            ssh_url: faker.random.words(),
            stargazers_url: faker.random.words(),
            statuses_url: faker.random.words(),
            subscribers_url: faker.random.words(),
            subscription_url: faker.random.words(),
            tags_url: faker.random.words(),
            teams_url: faker.random.words(),
            trees_url: faker.random.words(),
            clone_url: faker.random.words(),
            mirror_url: faker.random.words(),
            hooks_url: faker.random.words(),
            svn_url: faker.random.words(),
            homepage: faker.random.words(),
            language: faker.random.words(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.random.words(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.random.words(),
            pushed_at: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            allow_rebase_merge: faker.datatype.boolean(),
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              owner: {
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.random.words(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.random.words(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.random.words(),
            starred_at: faker.random.words(),
          },
          forks: faker.datatype.number(),
          master_branch: faker.random.words(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          anonymous_access_enabled: faker.datatype.boolean(),
          code_of_conduct: {
            url: faker.random.words(),
            key: faker.random.words(),
            name: faker.random.words(),
            html_url: faker.random.words(),
          },
          security_and_analysis: {
            advanced_security: {
              status: faker.random.arrayElement(['enabled', 'disabled']),
            },
            secret_scanning: {
              status: faker.random.arrayElement(['enabled', 'disabled']),
            },
          },
        }),
      ],
      [
        ctx.status(307),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/repos/:owner/:repo', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [
        ctx.status(307),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/actions/artifacts', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          total_count: faker.datatype.number(),
          artifacts: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            size_in_bytes: faker.datatype.number(),
            url: faker.random.words(),
            archive_download_url: faker.random.words(),
            expired: faker.datatype.boolean(),
            created_at: faker.random.words(),
            expires_at: faker.random.words(),
            updated_at: faker.random.words(),
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get(
    '/repos/:owner/:repo/actions/artifacts/:artifact_id',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            size_in_bytes: faker.datatype.number(),
            url: faker.random.words(),
            archive_download_url: faker.random.words(),
            expired: faker.datatype.boolean(),
            created_at: faker.random.words(),
            expires_at: faker.random.words(),
            updated_at: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/repos/:owner/:repo/actions/artifacts/:artifact_id',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/repos/:owner/:repo/actions/artifacts/:artifact_id/:archive_format',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(302), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get('/repos/:owner/:repo/actions/jobs/:job_id', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.datatype.number(),
          run_id: faker.datatype.number(),
          run_url: faker.random.words(),
          run_attempt: faker.datatype.number(),
          node_id: faker.random.words(),
          head_sha: faker.random.words(),
          url: faker.random.words(),
          html_url: faker.random.words(),
          status: faker.random.arrayElement([
            'queued',
            'in_progress',
            'completed',
          ]),
          conclusion: faker.random.words(),
          started_at: faker.random.words(),
          completed_at: faker.random.words(),
          name: faker.random.words(),
          steps: [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
            _ => ({
              status: faker.random.arrayElement([
                'queued',
                'in_progress',
                'completed',
              ]),
              conclusion: faker.random.words(),
              name: faker.random.words(),
              number: faker.datatype.number(),
              started_at: faker.random.words(),
              completed_at: faker.random.words(),
            })
          ),
          check_run_url: faker.random.words(),
          labels: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
          runner_id: faker.datatype.number(),
          runner_name: faker.random.words(),
          runner_group_id: faker.datatype.number(),
          runner_group_name: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/actions/jobs/:job_id/logs', (req, res, ctx) => {
    const resultArrray = [[ctx.status(302), ctx.json({})]];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/actions/permissions', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          enabled: faker.datatype.boolean(),
          allowed_actions: faker.random.arrayElement([
            'all',
            'local_only',
            'selected',
          ]),
          selected_actions_url: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.put('/repos/:owner/:repo/actions/permissions', (req, res, ctx) => {
    const resultArrray = [[ctx.status(204), ctx.json({})]];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get(
    '/repos/:owner/:repo/actions/permissions/selected-actions',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            github_owned_allowed: faker.datatype.boolean(),
            patterns_allowed: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.put(
    '/repos/:owner/:repo/actions/permissions/selected-actions',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get('/repos/:owner/:repo/actions/runners', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          total_count: faker.datatype.number(),
          runners: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            name: faker.random.words(),
            os: faker.random.words(),
            status: faker.random.words(),
            busy: faker.datatype.boolean(),
            labels: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              name: faker.random.words(),
              type: faker.random.arrayElement(['read-only', 'custom']),
            })),
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/actions/runners/downloads', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            os: faker.random.words(),
            architecture: faker.random.words(),
            download_url: faker.random.words(),
            filename: faker.random.words(),
            temp_download_token: faker.random.words(),
            sha256_checksum: faker.random.words(),
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post(
    '/repos/:owner/:repo/actions/runners/registration-token',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(201),
          ctx.json({
            token: faker.random.words(),
            expires_at: faker.random.words(),
            permissions: {},
            repositories: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              license: {
                key: faker.random.words(),
                name: faker.random.words(),
                url: faker.random.words(),
                spdx_id: faker.random.words(),
                node_id: faker.random.words(),
                html_url: faker.random.words(),
              },
              organization: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              allow_rebase_merge: faker.datatype.boolean(),
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                owner: {
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.random.words(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.random.words(),
              starred_at: faker.random.words(),
            })),
            single_file: faker.random.words(),
            repository_selection: faker.random.arrayElement([
              'all',
              'selected',
            ]),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.post(
    '/repos/:owner/:repo/actions/runners/remove-token',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(201),
          ctx.json({
            token: faker.random.words(),
            expires_at: faker.random.words(),
            permissions: {},
            repositories: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              license: {
                key: faker.random.words(),
                name: faker.random.words(),
                url: faker.random.words(),
                spdx_id: faker.random.words(),
                node_id: faker.random.words(),
                html_url: faker.random.words(),
              },
              organization: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              allow_rebase_merge: faker.datatype.boolean(),
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                owner: {
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.random.words(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.random.words(),
              starred_at: faker.random.words(),
            })),
            single_file: faker.random.words(),
            repository_selection: faker.random.arrayElement([
              'all',
              'selected',
            ]),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/repos/:owner/:repo/actions/runners/:runner_id',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            name: faker.random.words(),
            os: faker.random.words(),
            status: faker.random.words(),
            busy: faker.datatype.boolean(),
            labels: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              name: faker.random.words(),
              type: faker.random.arrayElement(['read-only', 'custom']),
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/repos/:owner/:repo/actions/runners/:runner_id',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get('/repos/:owner/:repo/actions/runs', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          total_count: faker.datatype.number(),
          workflow_runs: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            name: faker.random.words(),
            node_id: faker.random.words(),
            check_suite_id: faker.datatype.number(),
            check_suite_node_id: faker.random.words(),
            head_branch: faker.random.words(),
            head_sha: faker.random.words(),
            run_number: faker.datatype.number(),
            run_attempt: faker.datatype.number(),
            event: faker.random.words(),
            status: faker.random.words(),
            conclusion: faker.random.words(),
            workflow_id: faker.datatype.number(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            pull_requests: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              number: faker.datatype.number(),
              url: faker.random.words(),
              head: {
                ref: faker.random.words(),
                sha: faker.random.words(),
                repo: {
                  id: faker.datatype.number(),
                  url: faker.random.words(),
                  name: faker.random.words(),
                },
              },
              base: {
                ref: faker.random.words(),
                sha: faker.random.words(),
                repo: {
                  id: faker.datatype.number(),
                  url: faker.random.words(),
                  name: faker.random.words(),
                },
              },
            })),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            run_started_at: faker.random.words(),
            jobs_url: faker.random.words(),
            logs_url: faker.random.words(),
            check_suite_url: faker.random.words(),
            artifacts_url: faker.random.words(),
            cancel_url: faker.random.words(),
            rerun_url: faker.random.words(),
            previous_attempt_url: faker.random.words(),
            workflow_url: faker.random.words(),
            head_commit: {
              id: faker.random.words(),
              tree_id: faker.random.words(),
              message: faker.random.words(),
              timestamp: faker.random.words(),
              author: {
                name: faker.random.words(),
                email: faker.random.words(),
              },
              committer: {
                name: faker.random.words(),
                email: faker.random.words(),
              },
            },
            repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                license: {
                  key: faker.random.words(),
                  name: faker.random.words(),
                  url: faker.random.words(),
                  spdx_id: faker.random.words(),
                  node_id: faker.random.words(),
                  html_url: faker.random.words(),
                },
                organization: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                forks: faker.datatype.number(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                },
                owner: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                allow_rebase_merge: faker.datatype.boolean(),
                template_repository: {
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  name: faker.random.words(),
                  full_name: faker.random.words(),
                  owner: {
                    login: faker.random.words(),
                    id: faker.datatype.number(),
                    node_id: faker.random.words(),
                    avatar_url: faker.random.words(),
                    gravatar_id: faker.random.words(),
                    url: faker.random.words(),
                    html_url: faker.random.words(),
                    followers_url: faker.random.words(),
                    following_url: faker.random.words(),
                    gists_url: faker.random.words(),
                    starred_url: faker.random.words(),
                    subscriptions_url: faker.random.words(),
                    organizations_url: faker.random.words(),
                    repos_url: faker.random.words(),
                    events_url: faker.random.words(),
                    received_events_url: faker.random.words(),
                    type: faker.random.words(),
                    site_admin: faker.datatype.boolean(),
                  },
                  private: faker.datatype.boolean(),
                  html_url: faker.random.words(),
                  description: faker.random.words(),
                  fork: faker.datatype.boolean(),
                  url: faker.random.words(),
                  archive_url: faker.random.words(),
                  assignees_url: faker.random.words(),
                  blobs_url: faker.random.words(),
                  branches_url: faker.random.words(),
                  collaborators_url: faker.random.words(),
                  comments_url: faker.random.words(),
                  commits_url: faker.random.words(),
                  compare_url: faker.random.words(),
                  contents_url: faker.random.words(),
                  contributors_url: faker.random.words(),
                  deployments_url: faker.random.words(),
                  downloads_url: faker.random.words(),
                  events_url: faker.random.words(),
                  forks_url: faker.random.words(),
                  git_commits_url: faker.random.words(),
                  git_refs_url: faker.random.words(),
                  git_tags_url: faker.random.words(),
                  git_url: faker.random.words(),
                  issue_comment_url: faker.random.words(),
                  issue_events_url: faker.random.words(),
                  issues_url: faker.random.words(),
                  keys_url: faker.random.words(),
                  labels_url: faker.random.words(),
                  languages_url: faker.random.words(),
                  merges_url: faker.random.words(),
                  milestones_url: faker.random.words(),
                  notifications_url: faker.random.words(),
                  pulls_url: faker.random.words(),
                  releases_url: faker.random.words(),
                  ssh_url: faker.random.words(),
                  stargazers_url: faker.random.words(),
                  statuses_url: faker.random.words(),
                  subscribers_url: faker.random.words(),
                  subscription_url: faker.random.words(),
                  tags_url: faker.random.words(),
                  teams_url: faker.random.words(),
                  trees_url: faker.random.words(),
                  clone_url: faker.random.words(),
                  mirror_url: faker.random.words(),
                  hooks_url: faker.random.words(),
                  svn_url: faker.random.words(),
                  homepage: faker.random.words(),
                  language: faker.random.words(),
                  forks_count: faker.datatype.number(),
                  stargazers_count: faker.datatype.number(),
                  watchers_count: faker.datatype.number(),
                  size: faker.datatype.number(),
                  default_branch: faker.random.words(),
                  open_issues_count: faker.datatype.number(),
                  is_template: faker.datatype.boolean(),
                  topics: [
                    ...new Array(faker.datatype.number({ max: 100 })).keys(),
                  ].map(_ => faker.random.words()),
                  has_issues: faker.datatype.boolean(),
                  has_projects: faker.datatype.boolean(),
                  has_wiki: faker.datatype.boolean(),
                  has_pages: faker.datatype.boolean(),
                  has_downloads: faker.datatype.boolean(),
                  archived: faker.datatype.boolean(),
                  disabled: faker.datatype.boolean(),
                  visibility: faker.random.words(),
                  pushed_at: faker.random.words(),
                  created_at: faker.random.words(),
                  updated_at: faker.random.words(),
                  permissions: {
                    admin: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    pull: faker.datatype.boolean(),
                  },
                  allow_rebase_merge: faker.datatype.boolean(),
                  temp_clone_token: faker.random.words(),
                  allow_squash_merge: faker.datatype.boolean(),
                  allow_auto_merge: faker.datatype.boolean(),
                  delete_branch_on_merge: faker.datatype.boolean(),
                  allow_update_branch: faker.datatype.boolean(),
                  allow_merge_commit: faker.datatype.boolean(),
                  subscribers_count: faker.datatype.number(),
                  network_count: faker.datatype.number(),
                },
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                allow_forking: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
                open_issues: faker.datatype.number(),
                watchers: faker.datatype.number(),
                master_branch: faker.random.words(),
                starred_at: faker.random.words(),
              },
              temp_clone_token: faker.random.words(),
              delete_branch_on_merge: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              code_of_conduct: {
                key: faker.random.words(),
                name: faker.random.words(),
                url: faker.random.words(),
                body: faker.random.words(),
                html_url: faker.random.words(),
              },
              license: {
                key: faker.random.words(),
                name: faker.random.words(),
                spdx_id: faker.random.words(),
                url: faker.random.words(),
                node_id: faker.random.words(),
              },
              forks: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              allow_forking: faker.datatype.boolean(),
            },
            head_repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                license: {
                  key: faker.random.words(),
                  name: faker.random.words(),
                  url: faker.random.words(),
                  spdx_id: faker.random.words(),
                  node_id: faker.random.words(),
                  html_url: faker.random.words(),
                },
                organization: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                forks: faker.datatype.number(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                },
                owner: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                allow_rebase_merge: faker.datatype.boolean(),
                template_repository: {
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  name: faker.random.words(),
                  full_name: faker.random.words(),
                  owner: {
                    login: faker.random.words(),
                    id: faker.datatype.number(),
                    node_id: faker.random.words(),
                    avatar_url: faker.random.words(),
                    gravatar_id: faker.random.words(),
                    url: faker.random.words(),
                    html_url: faker.random.words(),
                    followers_url: faker.random.words(),
                    following_url: faker.random.words(),
                    gists_url: faker.random.words(),
                    starred_url: faker.random.words(),
                    subscriptions_url: faker.random.words(),
                    organizations_url: faker.random.words(),
                    repos_url: faker.random.words(),
                    events_url: faker.random.words(),
                    received_events_url: faker.random.words(),
                    type: faker.random.words(),
                    site_admin: faker.datatype.boolean(),
                  },
                  private: faker.datatype.boolean(),
                  html_url: faker.random.words(),
                  description: faker.random.words(),
                  fork: faker.datatype.boolean(),
                  url: faker.random.words(),
                  archive_url: faker.random.words(),
                  assignees_url: faker.random.words(),
                  blobs_url: faker.random.words(),
                  branches_url: faker.random.words(),
                  collaborators_url: faker.random.words(),
                  comments_url: faker.random.words(),
                  commits_url: faker.random.words(),
                  compare_url: faker.random.words(),
                  contents_url: faker.random.words(),
                  contributors_url: faker.random.words(),
                  deployments_url: faker.random.words(),
                  downloads_url: faker.random.words(),
                  events_url: faker.random.words(),
                  forks_url: faker.random.words(),
                  git_commits_url: faker.random.words(),
                  git_refs_url: faker.random.words(),
                  git_tags_url: faker.random.words(),
                  git_url: faker.random.words(),
                  issue_comment_url: faker.random.words(),
                  issue_events_url: faker.random.words(),
                  issues_url: faker.random.words(),
                  keys_url: faker.random.words(),
                  labels_url: faker.random.words(),
                  languages_url: faker.random.words(),
                  merges_url: faker.random.words(),
                  milestones_url: faker.random.words(),
                  notifications_url: faker.random.words(),
                  pulls_url: faker.random.words(),
                  releases_url: faker.random.words(),
                  ssh_url: faker.random.words(),
                  stargazers_url: faker.random.words(),
                  statuses_url: faker.random.words(),
                  subscribers_url: faker.random.words(),
                  subscription_url: faker.random.words(),
                  tags_url: faker.random.words(),
                  teams_url: faker.random.words(),
                  trees_url: faker.random.words(),
                  clone_url: faker.random.words(),
                  mirror_url: faker.random.words(),
                  hooks_url: faker.random.words(),
                  svn_url: faker.random.words(),
                  homepage: faker.random.words(),
                  language: faker.random.words(),
                  forks_count: faker.datatype.number(),
                  stargazers_count: faker.datatype.number(),
                  watchers_count: faker.datatype.number(),
                  size: faker.datatype.number(),
                  default_branch: faker.random.words(),
                  open_issues_count: faker.datatype.number(),
                  is_template: faker.datatype.boolean(),
                  topics: [
                    ...new Array(faker.datatype.number({ max: 100 })).keys(),
                  ].map(_ => faker.random.words()),
                  has_issues: faker.datatype.boolean(),
                  has_projects: faker.datatype.boolean(),
                  has_wiki: faker.datatype.boolean(),
                  has_pages: faker.datatype.boolean(),
                  has_downloads: faker.datatype.boolean(),
                  archived: faker.datatype.boolean(),
                  disabled: faker.datatype.boolean(),
                  visibility: faker.random.words(),
                  pushed_at: faker.random.words(),
                  created_at: faker.random.words(),
                  updated_at: faker.random.words(),
                  permissions: {
                    admin: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    pull: faker.datatype.boolean(),
                  },
                  allow_rebase_merge: faker.datatype.boolean(),
                  temp_clone_token: faker.random.words(),
                  allow_squash_merge: faker.datatype.boolean(),
                  allow_auto_merge: faker.datatype.boolean(),
                  delete_branch_on_merge: faker.datatype.boolean(),
                  allow_update_branch: faker.datatype.boolean(),
                  allow_merge_commit: faker.datatype.boolean(),
                  subscribers_count: faker.datatype.number(),
                  network_count: faker.datatype.number(),
                },
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                allow_forking: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
                open_issues: faker.datatype.number(),
                watchers: faker.datatype.number(),
                master_branch: faker.random.words(),
                starred_at: faker.random.words(),
              },
              temp_clone_token: faker.random.words(),
              delete_branch_on_merge: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              code_of_conduct: {
                key: faker.random.words(),
                name: faker.random.words(),
                url: faker.random.words(),
                body: faker.random.words(),
                html_url: faker.random.words(),
              },
              license: {
                key: faker.random.words(),
                name: faker.random.words(),
                spdx_id: faker.random.words(),
                url: faker.random.words(),
                node_id: faker.random.words(),
              },
              forks: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              allow_forking: faker.datatype.boolean(),
            },
            head_repository_id: faker.datatype.number(),
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/actions/runs/:run_id', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.datatype.number(),
          name: faker.random.words(),
          node_id: faker.random.words(),
          check_suite_id: faker.datatype.number(),
          check_suite_node_id: faker.random.words(),
          head_branch: faker.random.words(),
          head_sha: faker.random.words(),
          run_number: faker.datatype.number(),
          run_attempt: faker.datatype.number(),
          event: faker.random.words(),
          status: faker.random.words(),
          conclusion: faker.random.words(),
          workflow_id: faker.datatype.number(),
          url: faker.random.words(),
          html_url: faker.random.words(),
          pull_requests: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            number: faker.datatype.number(),
            url: faker.random.words(),
            head: {
              ref: faker.random.words(),
              sha: faker.random.words(),
              repo: {
                id: faker.datatype.number(),
                url: faker.random.words(),
                name: faker.random.words(),
              },
            },
            base: {
              ref: faker.random.words(),
              sha: faker.random.words(),
              repo: {
                id: faker.datatype.number(),
                url: faker.random.words(),
                name: faker.random.words(),
              },
            },
          })),
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          run_started_at: faker.random.words(),
          jobs_url: faker.random.words(),
          logs_url: faker.random.words(),
          check_suite_url: faker.random.words(),
          artifacts_url: faker.random.words(),
          cancel_url: faker.random.words(),
          rerun_url: faker.random.words(),
          previous_attempt_url: faker.random.words(),
          workflow_url: faker.random.words(),
          head_commit: {
            id: faker.random.words(),
            tree_id: faker.random.words(),
            message: faker.random.words(),
            timestamp: faker.random.words(),
            author: {
              name: faker.random.words(),
              email: faker.random.words(),
            },
            committer: {
              name: faker.random.words(),
              email: faker.random.words(),
            },
          },
          repository: {
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            full_name: faker.random.words(),
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.random.words(),
            description: faker.random.words(),
            fork: faker.datatype.boolean(),
            url: faker.random.words(),
            archive_url: faker.random.words(),
            assignees_url: faker.random.words(),
            blobs_url: faker.random.words(),
            branches_url: faker.random.words(),
            collaborators_url: faker.random.words(),
            comments_url: faker.random.words(),
            commits_url: faker.random.words(),
            compare_url: faker.random.words(),
            contents_url: faker.random.words(),
            contributors_url: faker.random.words(),
            deployments_url: faker.random.words(),
            downloads_url: faker.random.words(),
            events_url: faker.random.words(),
            forks_url: faker.random.words(),
            git_commits_url: faker.random.words(),
            git_refs_url: faker.random.words(),
            git_tags_url: faker.random.words(),
            git_url: faker.random.words(),
            issue_comment_url: faker.random.words(),
            issue_events_url: faker.random.words(),
            issues_url: faker.random.words(),
            keys_url: faker.random.words(),
            labels_url: faker.random.words(),
            languages_url: faker.random.words(),
            merges_url: faker.random.words(),
            milestones_url: faker.random.words(),
            notifications_url: faker.random.words(),
            pulls_url: faker.random.words(),
            releases_url: faker.random.words(),
            ssh_url: faker.random.words(),
            stargazers_url: faker.random.words(),
            statuses_url: faker.random.words(),
            subscribers_url: faker.random.words(),
            subscription_url: faker.random.words(),
            tags_url: faker.random.words(),
            teams_url: faker.random.words(),
            trees_url: faker.random.words(),
            clone_url: faker.random.words(),
            mirror_url: faker.random.words(),
            hooks_url: faker.random.words(),
            svn_url: faker.random.words(),
            homepage: faker.random.words(),
            language: faker.random.words(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.random.words(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.random.words(),
            pushed_at: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              license: {
                key: faker.random.words(),
                name: faker.random.words(),
                url: faker.random.words(),
                spdx_id: faker.random.words(),
                node_id: faker.random.words(),
                html_url: faker.random.words(),
              },
              organization: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              allow_rebase_merge: faker.datatype.boolean(),
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                owner: {
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.random.words(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.random.words(),
              starred_at: faker.random.words(),
            },
            temp_clone_token: faker.random.words(),
            delete_branch_on_merge: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            code_of_conduct: {
              key: faker.random.words(),
              name: faker.random.words(),
              url: faker.random.words(),
              body: faker.random.words(),
              html_url: faker.random.words(),
            },
            license: {
              key: faker.random.words(),
              name: faker.random.words(),
              spdx_id: faker.random.words(),
              url: faker.random.words(),
              node_id: faker.random.words(),
            },
            forks: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            allow_forking: faker.datatype.boolean(),
          },
          head_repository: {
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            full_name: faker.random.words(),
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.random.words(),
            description: faker.random.words(),
            fork: faker.datatype.boolean(),
            url: faker.random.words(),
            archive_url: faker.random.words(),
            assignees_url: faker.random.words(),
            blobs_url: faker.random.words(),
            branches_url: faker.random.words(),
            collaborators_url: faker.random.words(),
            comments_url: faker.random.words(),
            commits_url: faker.random.words(),
            compare_url: faker.random.words(),
            contents_url: faker.random.words(),
            contributors_url: faker.random.words(),
            deployments_url: faker.random.words(),
            downloads_url: faker.random.words(),
            events_url: faker.random.words(),
            forks_url: faker.random.words(),
            git_commits_url: faker.random.words(),
            git_refs_url: faker.random.words(),
            git_tags_url: faker.random.words(),
            git_url: faker.random.words(),
            issue_comment_url: faker.random.words(),
            issue_events_url: faker.random.words(),
            issues_url: faker.random.words(),
            keys_url: faker.random.words(),
            labels_url: faker.random.words(),
            languages_url: faker.random.words(),
            merges_url: faker.random.words(),
            milestones_url: faker.random.words(),
            notifications_url: faker.random.words(),
            pulls_url: faker.random.words(),
            releases_url: faker.random.words(),
            ssh_url: faker.random.words(),
            stargazers_url: faker.random.words(),
            statuses_url: faker.random.words(),
            subscribers_url: faker.random.words(),
            subscription_url: faker.random.words(),
            tags_url: faker.random.words(),
            teams_url: faker.random.words(),
            trees_url: faker.random.words(),
            clone_url: faker.random.words(),
            mirror_url: faker.random.words(),
            hooks_url: faker.random.words(),
            svn_url: faker.random.words(),
            homepage: faker.random.words(),
            language: faker.random.words(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.random.words(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.random.words(),
            pushed_at: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              license: {
                key: faker.random.words(),
                name: faker.random.words(),
                url: faker.random.words(),
                spdx_id: faker.random.words(),
                node_id: faker.random.words(),
                html_url: faker.random.words(),
              },
              organization: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              allow_rebase_merge: faker.datatype.boolean(),
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                owner: {
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.random.words(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.random.words(),
              starred_at: faker.random.words(),
            },
            temp_clone_token: faker.random.words(),
            delete_branch_on_merge: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            code_of_conduct: {
              key: faker.random.words(),
              name: faker.random.words(),
              url: faker.random.words(),
              body: faker.random.words(),
              html_url: faker.random.words(),
            },
            license: {
              key: faker.random.words(),
              name: faker.random.words(),
              spdx_id: faker.random.words(),
              url: faker.random.words(),
              node_id: faker.random.words(),
            },
            forks: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            allow_forking: faker.datatype.boolean(),
          },
          head_repository_id: faker.datatype.number(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/repos/:owner/:repo/actions/runs/:run_id', (req, res, ctx) => {
    const resultArrray = [[ctx.status(204), ctx.json({})]];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get(
    '/repos/:owner/:repo/actions/runs/:run_id/approvals',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json(
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
              _ => ({
                environments: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => ({
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  name: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  created_at: faker.random.words(),
                  updated_at: faker.random.words(),
                })),
                state: faker.random.arrayElement(['approved', 'rejected']),
                user: {},
                comment: faker.random.words(),
              })
            )
          ),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/repos/:owner/:repo/actions/runs/:run_id/artifacts',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            total_count: faker.datatype.number(),
            artifacts: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              size_in_bytes: faker.datatype.number(),
              url: faker.random.words(),
              archive_download_url: faker.random.words(),
              expired: faker.datatype.boolean(),
              created_at: faker.random.words(),
              expires_at: faker.random.words(),
              updated_at: faker.random.words(),
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/repos/:owner/:repo/actions/runs/:run_id/attempts/:attempt_number',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            name: faker.random.words(),
            node_id: faker.random.words(),
            check_suite_id: faker.datatype.number(),
            check_suite_node_id: faker.random.words(),
            head_branch: faker.random.words(),
            head_sha: faker.random.words(),
            run_number: faker.datatype.number(),
            run_attempt: faker.datatype.number(),
            event: faker.random.words(),
            status: faker.random.words(),
            conclusion: faker.random.words(),
            workflow_id: faker.datatype.number(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            pull_requests: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              number: faker.datatype.number(),
              url: faker.random.words(),
              head: {
                ref: faker.random.words(),
                sha: faker.random.words(),
                repo: {
                  id: faker.datatype.number(),
                  url: faker.random.words(),
                  name: faker.random.words(),
                },
              },
              base: {
                ref: faker.random.words(),
                sha: faker.random.words(),
                repo: {
                  id: faker.datatype.number(),
                  url: faker.random.words(),
                  name: faker.random.words(),
                },
              },
            })),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            run_started_at: faker.random.words(),
            jobs_url: faker.random.words(),
            logs_url: faker.random.words(),
            check_suite_url: faker.random.words(),
            artifacts_url: faker.random.words(),
            cancel_url: faker.random.words(),
            rerun_url: faker.random.words(),
            previous_attempt_url: faker.random.words(),
            workflow_url: faker.random.words(),
            head_commit: {
              id: faker.random.words(),
              tree_id: faker.random.words(),
              message: faker.random.words(),
              timestamp: faker.random.words(),
              author: {
                name: faker.random.words(),
                email: faker.random.words(),
              },
              committer: {
                name: faker.random.words(),
                email: faker.random.words(),
              },
            },
            repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                license: {
                  key: faker.random.words(),
                  name: faker.random.words(),
                  url: faker.random.words(),
                  spdx_id: faker.random.words(),
                  node_id: faker.random.words(),
                  html_url: faker.random.words(),
                },
                organization: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                forks: faker.datatype.number(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                },
                owner: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                allow_rebase_merge: faker.datatype.boolean(),
                template_repository: {
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  name: faker.random.words(),
                  full_name: faker.random.words(),
                  owner: {
                    login: faker.random.words(),
                    id: faker.datatype.number(),
                    node_id: faker.random.words(),
                    avatar_url: faker.random.words(),
                    gravatar_id: faker.random.words(),
                    url: faker.random.words(),
                    html_url: faker.random.words(),
                    followers_url: faker.random.words(),
                    following_url: faker.random.words(),
                    gists_url: faker.random.words(),
                    starred_url: faker.random.words(),
                    subscriptions_url: faker.random.words(),
                    organizations_url: faker.random.words(),
                    repos_url: faker.random.words(),
                    events_url: faker.random.words(),
                    received_events_url: faker.random.words(),
                    type: faker.random.words(),
                    site_admin: faker.datatype.boolean(),
                  },
                  private: faker.datatype.boolean(),
                  html_url: faker.random.words(),
                  description: faker.random.words(),
                  fork: faker.datatype.boolean(),
                  url: faker.random.words(),
                  archive_url: faker.random.words(),
                  assignees_url: faker.random.words(),
                  blobs_url: faker.random.words(),
                  branches_url: faker.random.words(),
                  collaborators_url: faker.random.words(),
                  comments_url: faker.random.words(),
                  commits_url: faker.random.words(),
                  compare_url: faker.random.words(),
                  contents_url: faker.random.words(),
                  contributors_url: faker.random.words(),
                  deployments_url: faker.random.words(),
                  downloads_url: faker.random.words(),
                  events_url: faker.random.words(),
                  forks_url: faker.random.words(),
                  git_commits_url: faker.random.words(),
                  git_refs_url: faker.random.words(),
                  git_tags_url: faker.random.words(),
                  git_url: faker.random.words(),
                  issue_comment_url: faker.random.words(),
                  issue_events_url: faker.random.words(),
                  issues_url: faker.random.words(),
                  keys_url: faker.random.words(),
                  labels_url: faker.random.words(),
                  languages_url: faker.random.words(),
                  merges_url: faker.random.words(),
                  milestones_url: faker.random.words(),
                  notifications_url: faker.random.words(),
                  pulls_url: faker.random.words(),
                  releases_url: faker.random.words(),
                  ssh_url: faker.random.words(),
                  stargazers_url: faker.random.words(),
                  statuses_url: faker.random.words(),
                  subscribers_url: faker.random.words(),
                  subscription_url: faker.random.words(),
                  tags_url: faker.random.words(),
                  teams_url: faker.random.words(),
                  trees_url: faker.random.words(),
                  clone_url: faker.random.words(),
                  mirror_url: faker.random.words(),
                  hooks_url: faker.random.words(),
                  svn_url: faker.random.words(),
                  homepage: faker.random.words(),
                  language: faker.random.words(),
                  forks_count: faker.datatype.number(),
                  stargazers_count: faker.datatype.number(),
                  watchers_count: faker.datatype.number(),
                  size: faker.datatype.number(),
                  default_branch: faker.random.words(),
                  open_issues_count: faker.datatype.number(),
                  is_template: faker.datatype.boolean(),
                  topics: [
                    ...new Array(faker.datatype.number({ max: 100 })).keys(),
                  ].map(_ => faker.random.words()),
                  has_issues: faker.datatype.boolean(),
                  has_projects: faker.datatype.boolean(),
                  has_wiki: faker.datatype.boolean(),
                  has_pages: faker.datatype.boolean(),
                  has_downloads: faker.datatype.boolean(),
                  archived: faker.datatype.boolean(),
                  disabled: faker.datatype.boolean(),
                  visibility: faker.random.words(),
                  pushed_at: faker.random.words(),
                  created_at: faker.random.words(),
                  updated_at: faker.random.words(),
                  permissions: {
                    admin: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    pull: faker.datatype.boolean(),
                  },
                  allow_rebase_merge: faker.datatype.boolean(),
                  temp_clone_token: faker.random.words(),
                  allow_squash_merge: faker.datatype.boolean(),
                  allow_auto_merge: faker.datatype.boolean(),
                  delete_branch_on_merge: faker.datatype.boolean(),
                  allow_update_branch: faker.datatype.boolean(),
                  allow_merge_commit: faker.datatype.boolean(),
                  subscribers_count: faker.datatype.number(),
                  network_count: faker.datatype.number(),
                },
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                allow_forking: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
                open_issues: faker.datatype.number(),
                watchers: faker.datatype.number(),
                master_branch: faker.random.words(),
                starred_at: faker.random.words(),
              },
              temp_clone_token: faker.random.words(),
              delete_branch_on_merge: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              code_of_conduct: {
                key: faker.random.words(),
                name: faker.random.words(),
                url: faker.random.words(),
                body: faker.random.words(),
                html_url: faker.random.words(),
              },
              license: {
                key: faker.random.words(),
                name: faker.random.words(),
                spdx_id: faker.random.words(),
                url: faker.random.words(),
                node_id: faker.random.words(),
              },
              forks: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              allow_forking: faker.datatype.boolean(),
            },
            head_repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                license: {
                  key: faker.random.words(),
                  name: faker.random.words(),
                  url: faker.random.words(),
                  spdx_id: faker.random.words(),
                  node_id: faker.random.words(),
                  html_url: faker.random.words(),
                },
                organization: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                forks: faker.datatype.number(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                },
                owner: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                allow_rebase_merge: faker.datatype.boolean(),
                template_repository: {
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  name: faker.random.words(),
                  full_name: faker.random.words(),
                  owner: {
                    login: faker.random.words(),
                    id: faker.datatype.number(),
                    node_id: faker.random.words(),
                    avatar_url: faker.random.words(),
                    gravatar_id: faker.random.words(),
                    url: faker.random.words(),
                    html_url: faker.random.words(),
                    followers_url: faker.random.words(),
                    following_url: faker.random.words(),
                    gists_url: faker.random.words(),
                    starred_url: faker.random.words(),
                    subscriptions_url: faker.random.words(),
                    organizations_url: faker.random.words(),
                    repos_url: faker.random.words(),
                    events_url: faker.random.words(),
                    received_events_url: faker.random.words(),
                    type: faker.random.words(),
                    site_admin: faker.datatype.boolean(),
                  },
                  private: faker.datatype.boolean(),
                  html_url: faker.random.words(),
                  description: faker.random.words(),
                  fork: faker.datatype.boolean(),
                  url: faker.random.words(),
                  archive_url: faker.random.words(),
                  assignees_url: faker.random.words(),
                  blobs_url: faker.random.words(),
                  branches_url: faker.random.words(),
                  collaborators_url: faker.random.words(),
                  comments_url: faker.random.words(),
                  commits_url: faker.random.words(),
                  compare_url: faker.random.words(),
                  contents_url: faker.random.words(),
                  contributors_url: faker.random.words(),
                  deployments_url: faker.random.words(),
                  downloads_url: faker.random.words(),
                  events_url: faker.random.words(),
                  forks_url: faker.random.words(),
                  git_commits_url: faker.random.words(),
                  git_refs_url: faker.random.words(),
                  git_tags_url: faker.random.words(),
                  git_url: faker.random.words(),
                  issue_comment_url: faker.random.words(),
                  issue_events_url: faker.random.words(),
                  issues_url: faker.random.words(),
                  keys_url: faker.random.words(),
                  labels_url: faker.random.words(),
                  languages_url: faker.random.words(),
                  merges_url: faker.random.words(),
                  milestones_url: faker.random.words(),
                  notifications_url: faker.random.words(),
                  pulls_url: faker.random.words(),
                  releases_url: faker.random.words(),
                  ssh_url: faker.random.words(),
                  stargazers_url: faker.random.words(),
                  statuses_url: faker.random.words(),
                  subscribers_url: faker.random.words(),
                  subscription_url: faker.random.words(),
                  tags_url: faker.random.words(),
                  teams_url: faker.random.words(),
                  trees_url: faker.random.words(),
                  clone_url: faker.random.words(),
                  mirror_url: faker.random.words(),
                  hooks_url: faker.random.words(),
                  svn_url: faker.random.words(),
                  homepage: faker.random.words(),
                  language: faker.random.words(),
                  forks_count: faker.datatype.number(),
                  stargazers_count: faker.datatype.number(),
                  watchers_count: faker.datatype.number(),
                  size: faker.datatype.number(),
                  default_branch: faker.random.words(),
                  open_issues_count: faker.datatype.number(),
                  is_template: faker.datatype.boolean(),
                  topics: [
                    ...new Array(faker.datatype.number({ max: 100 })).keys(),
                  ].map(_ => faker.random.words()),
                  has_issues: faker.datatype.boolean(),
                  has_projects: faker.datatype.boolean(),
                  has_wiki: faker.datatype.boolean(),
                  has_pages: faker.datatype.boolean(),
                  has_downloads: faker.datatype.boolean(),
                  archived: faker.datatype.boolean(),
                  disabled: faker.datatype.boolean(),
                  visibility: faker.random.words(),
                  pushed_at: faker.random.words(),
                  created_at: faker.random.words(),
                  updated_at: faker.random.words(),
                  permissions: {
                    admin: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    pull: faker.datatype.boolean(),
                  },
                  allow_rebase_merge: faker.datatype.boolean(),
                  temp_clone_token: faker.random.words(),
                  allow_squash_merge: faker.datatype.boolean(),
                  allow_auto_merge: faker.datatype.boolean(),
                  delete_branch_on_merge: faker.datatype.boolean(),
                  allow_update_branch: faker.datatype.boolean(),
                  allow_merge_commit: faker.datatype.boolean(),
                  subscribers_count: faker.datatype.number(),
                  network_count: faker.datatype.number(),
                },
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                allow_forking: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
                open_issues: faker.datatype.number(),
                watchers: faker.datatype.number(),
                master_branch: faker.random.words(),
                starred_at: faker.random.words(),
              },
              temp_clone_token: faker.random.words(),
              delete_branch_on_merge: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              code_of_conduct: {
                key: faker.random.words(),
                name: faker.random.words(),
                url: faker.random.words(),
                body: faker.random.words(),
                html_url: faker.random.words(),
              },
              license: {
                key: faker.random.words(),
                name: faker.random.words(),
                spdx_id: faker.random.words(),
                url: faker.random.words(),
                node_id: faker.random.words(),
              },
              forks: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              allow_forking: faker.datatype.boolean(),
            },
            head_repository_id: faker.datatype.number(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/repos/:owner/:repo/actions/runs/:run_id/attempts/:attempt_number/jobs',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            total_count: faker.datatype.number(),
            jobs: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              run_id: faker.datatype.number(),
              run_url: faker.random.words(),
              run_attempt: faker.datatype.number(),
              node_id: faker.random.words(),
              head_sha: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              status: faker.random.arrayElement([
                'queued',
                'in_progress',
                'completed',
              ]),
              conclusion: faker.random.words(),
              started_at: faker.random.words(),
              completed_at: faker.random.words(),
              name: faker.random.words(),
              steps: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => ({
                status: faker.random.arrayElement([
                  'queued',
                  'in_progress',
                  'completed',
                ]),
                conclusion: faker.random.words(),
                name: faker.random.words(),
                number: faker.datatype.number(),
                started_at: faker.random.words(),
                completed_at: faker.random.words(),
              })),
              check_run_url: faker.random.words(),
              labels: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              runner_id: faker.datatype.number(),
              runner_name: faker.random.words(),
              runner_group_id: faker.datatype.number(),
              runner_group_name: faker.random.words(),
            })),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.post(
    '/repos/:owner/:repo/actions/runs/:run_id/cancel',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(202), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get('/repos/:owner/:repo/actions/runs/:run_id/jobs', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          total_count: faker.datatype.number(),
          jobs: [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
            _ => ({
              id: faker.datatype.number(),
              run_id: faker.datatype.number(),
              run_url: faker.random.words(),
              run_attempt: faker.datatype.number(),
              node_id: faker.random.words(),
              head_sha: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              status: faker.random.arrayElement([
                'queued',
                'in_progress',
                'completed',
              ]),
              conclusion: faker.random.words(),
              started_at: faker.random.words(),
              completed_at: faker.random.words(),
              name: faker.random.words(),
              steps: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => ({
                status: faker.random.arrayElement([
                  'queued',
                  'in_progress',
                  'completed',
                ]),
                conclusion: faker.random.words(),
                name: faker.random.words(),
                number: faker.datatype.number(),
                started_at: faker.random.words(),
                completed_at: faker.random.words(),
              })),
              check_run_url: faker.random.words(),
              labels: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              runner_id: faker.datatype.number(),
              runner_name: faker.random.words(),
              runner_group_id: faker.datatype.number(),
              runner_group_name: faker.random.words(),
            })
          ),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/actions/runs/:run_id/logs', (req, res, ctx) => {
    const resultArrray = [[ctx.status(302), ctx.json({})]];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete(
    '/repos/:owner/:repo/actions/runs/:run_id/logs',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/repos/:owner/:repo/actions/runs/:run_id/pending_deployments',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json(
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
              _ => ({
                environment: {
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  name: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                },
                wait_timer: faker.datatype.number(),
                wait_timer_started_at: faker.random.words(),
                current_user_can_approve: faker.datatype.boolean(),
                reviewers: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => ({
                  type: {},
                  reviewer: {},
                })),
              })
            )
          ),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.post(
    '/repos/:owner/:repo/actions/runs/:run_id/pending_deployments',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json(
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
              _ => ({
                url: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                sha: faker.random.words(),
                ref: faker.random.words(),
                task: faker.random.words(),
                payload: {},
                original_environment: faker.random.words(),
                environment: faker.random.words(),
                description: faker.random.words(),
                creator: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                statuses_url: faker.random.words(),
                repository_url: faker.random.words(),
                transient_environment: faker.datatype.boolean(),
                production_environment: faker.datatype.boolean(),
                performed_via_github_app: {
                  id: faker.datatype.number(),
                  slug: faker.random.words(),
                  node_id: faker.random.words(),
                  owner: {
                    name: faker.random.words(),
                    email: faker.random.words(),
                    login: faker.random.words(),
                    id: faker.datatype.number(),
                    node_id: faker.random.words(),
                    avatar_url: faker.random.words(),
                    gravatar_id: faker.random.words(),
                    url: faker.random.words(),
                    html_url: faker.random.words(),
                    followers_url: faker.random.words(),
                    following_url: faker.random.words(),
                    gists_url: faker.random.words(),
                    starred_url: faker.random.words(),
                    subscriptions_url: faker.random.words(),
                    organizations_url: faker.random.words(),
                    repos_url: faker.random.words(),
                    events_url: faker.random.words(),
                    received_events_url: faker.random.words(),
                    type: faker.random.words(),
                    site_admin: faker.datatype.boolean(),
                    starred_at: faker.random.words(),
                  },
                  name: faker.random.words(),
                  description: faker.random.words(),
                  external_url: faker.random.words(),
                  html_url: faker.random.words(),
                  created_at: faker.random.words(),
                  updated_at: faker.random.words(),
                  permissions: {
                    issues: faker.random.words(),
                    checks: faker.random.words(),
                    metadata: faker.random.words(),
                    contents: faker.random.words(),
                    deployments: faker.random.words(),
                  },
                  events: [
                    ...new Array(faker.datatype.number({ max: 100 })).keys(),
                  ].map(_ => faker.random.words()),
                  installations_count: faker.datatype.number(),
                  client_id: faker.random.words(),
                  client_secret: faker.random.words(),
                  webhook_secret: faker.random.words(),
                  pem: faker.random.words(),
                },
              })
            )
          ),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.post(
    '/repos/:owner/:repo/actions/runs/:run_id/rerun',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(201), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get('/repos/:owner/:repo/actions/secrets', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          total_count: faker.datatype.number(),
          secrets: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            name: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get(
    '/repos/:owner/:repo/actions/secrets/public-key',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            key_id: faker.random.words(),
            key: faker.random.words(),
            id: faker.datatype.number(),
            url: faker.random.words(),
            title: faker.random.words(),
            created_at: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/repos/:owner/:repo/actions/secrets/:secret_name',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            name: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.put(
    '/repos/:owner/:repo/actions/secrets/:secret_name',
    (req, res, ctx) => {
      const resultArrray = [
        [ctx.status(201), ctx.json({})],
        [ctx.status(204), ctx.json({})],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/repos/:owner/:repo/actions/secrets/:secret_name',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get('/repos/:owner/:repo/actions/workflows', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          total_count: faker.datatype.number(),
          workflows: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            path: faker.random.words(),
            state: faker.random.arrayElement([
              'active',
              'deleted',
              'disabled_fork',
              'disabled_inactivity',
              'disabled_manually',
            ]),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            badge_url: faker.random.words(),
            deleted_at: faker.random.words(),
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get(
    '/repos/:owner/:repo/actions/workflows/:workflow_id',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            path: faker.random.words(),
            state: faker.random.arrayElement([
              'active',
              'deleted',
              'disabled_fork',
              'disabled_inactivity',
              'disabled_manually',
            ]),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            badge_url: faker.random.words(),
            deleted_at: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.put(
    '/repos/:owner/:repo/actions/workflows/:workflow_id/disable',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.post(
    '/repos/:owner/:repo/actions/workflows/:workflow_id/dispatches',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.put(
    '/repos/:owner/:repo/actions/workflows/:workflow_id/enable',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/repos/:owner/:repo/actions/workflows/:workflow_id/runs',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            total_count: faker.datatype.number(),
            workflow_runs: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              name: faker.random.words(),
              node_id: faker.random.words(),
              check_suite_id: faker.datatype.number(),
              check_suite_node_id: faker.random.words(),
              head_branch: faker.random.words(),
              head_sha: faker.random.words(),
              run_number: faker.datatype.number(),
              run_attempt: faker.datatype.number(),
              event: faker.random.words(),
              status: faker.random.words(),
              conclusion: faker.random.words(),
              workflow_id: faker.datatype.number(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              pull_requests: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => ({
                id: faker.datatype.number(),
                number: faker.datatype.number(),
                url: faker.random.words(),
                head: {
                  ref: faker.random.words(),
                  sha: faker.random.words(),
                  repo: {
                    id: faker.datatype.number(),
                    url: faker.random.words(),
                    name: faker.random.words(),
                  },
                },
                base: {
                  ref: faker.random.words(),
                  sha: faker.random.words(),
                  repo: {
                    id: faker.datatype.number(),
                    url: faker.random.words(),
                    name: faker.random.words(),
                  },
                },
              })),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              run_started_at: faker.random.words(),
              jobs_url: faker.random.words(),
              logs_url: faker.random.words(),
              check_suite_url: faker.random.words(),
              artifacts_url: faker.random.words(),
              cancel_url: faker.random.words(),
              rerun_url: faker.random.words(),
              previous_attempt_url: faker.random.words(),
              workflow_url: faker.random.words(),
              head_commit: {
                id: faker.random.words(),
                tree_id: faker.random.words(),
                message: faker.random.words(),
                timestamp: faker.random.words(),
                author: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                },
                committer: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                },
              },
              repository: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                owner: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                template_repository: {
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  name: faker.random.words(),
                  full_name: faker.random.words(),
                  license: {
                    key: faker.random.words(),
                    name: faker.random.words(),
                    url: faker.random.words(),
                    spdx_id: faker.random.words(),
                    node_id: faker.random.words(),
                    html_url: faker.random.words(),
                  },
                  organization: {
                    name: faker.random.words(),
                    email: faker.random.words(),
                    login: faker.random.words(),
                    id: faker.datatype.number(),
                    node_id: faker.random.words(),
                    avatar_url: faker.random.words(),
                    gravatar_id: faker.random.words(),
                    url: faker.random.words(),
                    html_url: faker.random.words(),
                    followers_url: faker.random.words(),
                    following_url: faker.random.words(),
                    gists_url: faker.random.words(),
                    starred_url: faker.random.words(),
                    subscriptions_url: faker.random.words(),
                    organizations_url: faker.random.words(),
                    repos_url: faker.random.words(),
                    events_url: faker.random.words(),
                    received_events_url: faker.random.words(),
                    type: faker.random.words(),
                    site_admin: faker.datatype.boolean(),
                    starred_at: faker.random.words(),
                  },
                  forks: faker.datatype.number(),
                  permissions: {
                    admin: faker.datatype.boolean(),
                    pull: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                  },
                  owner: {
                    name: faker.random.words(),
                    email: faker.random.words(),
                    login: faker.random.words(),
                    id: faker.datatype.number(),
                    node_id: faker.random.words(),
                    avatar_url: faker.random.words(),
                    gravatar_id: faker.random.words(),
                    url: faker.random.words(),
                    html_url: faker.random.words(),
                    followers_url: faker.random.words(),
                    following_url: faker.random.words(),
                    gists_url: faker.random.words(),
                    starred_url: faker.random.words(),
                    subscriptions_url: faker.random.words(),
                    organizations_url: faker.random.words(),
                    repos_url: faker.random.words(),
                    events_url: faker.random.words(),
                    received_events_url: faker.random.words(),
                    type: faker.random.words(),
                    site_admin: faker.datatype.boolean(),
                    starred_at: faker.random.words(),
                  },
                  private: faker.datatype.boolean(),
                  html_url: faker.random.words(),
                  description: faker.random.words(),
                  fork: faker.datatype.boolean(),
                  url: faker.random.words(),
                  archive_url: faker.random.words(),
                  assignees_url: faker.random.words(),
                  blobs_url: faker.random.words(),
                  branches_url: faker.random.words(),
                  collaborators_url: faker.random.words(),
                  comments_url: faker.random.words(),
                  commits_url: faker.random.words(),
                  compare_url: faker.random.words(),
                  contents_url: faker.random.words(),
                  contributors_url: faker.random.words(),
                  deployments_url: faker.random.words(),
                  downloads_url: faker.random.words(),
                  events_url: faker.random.words(),
                  forks_url: faker.random.words(),
                  git_commits_url: faker.random.words(),
                  git_refs_url: faker.random.words(),
                  git_tags_url: faker.random.words(),
                  git_url: faker.random.words(),
                  issue_comment_url: faker.random.words(),
                  issue_events_url: faker.random.words(),
                  issues_url: faker.random.words(),
                  keys_url: faker.random.words(),
                  labels_url: faker.random.words(),
                  languages_url: faker.random.words(),
                  merges_url: faker.random.words(),
                  milestones_url: faker.random.words(),
                  notifications_url: faker.random.words(),
                  pulls_url: faker.random.words(),
                  releases_url: faker.random.words(),
                  ssh_url: faker.random.words(),
                  stargazers_url: faker.random.words(),
                  statuses_url: faker.random.words(),
                  subscribers_url: faker.random.words(),
                  subscription_url: faker.random.words(),
                  tags_url: faker.random.words(),
                  teams_url: faker.random.words(),
                  trees_url: faker.random.words(),
                  clone_url: faker.random.words(),
                  mirror_url: faker.random.words(),
                  hooks_url: faker.random.words(),
                  svn_url: faker.random.words(),
                  homepage: faker.random.words(),
                  language: faker.random.words(),
                  forks_count: faker.datatype.number(),
                  stargazers_count: faker.datatype.number(),
                  watchers_count: faker.datatype.number(),
                  size: faker.datatype.number(),
                  default_branch: faker.random.words(),
                  open_issues_count: faker.datatype.number(),
                  is_template: faker.datatype.boolean(),
                  topics: [
                    ...new Array(faker.datatype.number({ max: 100 })).keys(),
                  ].map(_ => faker.random.words()),
                  has_issues: faker.datatype.boolean(),
                  has_projects: faker.datatype.boolean(),
                  has_wiki: faker.datatype.boolean(),
                  has_pages: faker.datatype.boolean(),
                  has_downloads: faker.datatype.boolean(),
                  archived: faker.datatype.boolean(),
                  disabled: faker.datatype.boolean(),
                  visibility: faker.random.words(),
                  pushed_at: faker.random.words(),
                  created_at: faker.random.words(),
                  updated_at: faker.random.words(),
                  allow_rebase_merge: faker.datatype.boolean(),
                  template_repository: {
                    id: faker.datatype.number(),
                    node_id: faker.random.words(),
                    name: faker.random.words(),
                    full_name: faker.random.words(),
                    owner: {
                      login: faker.random.words(),
                      id: faker.datatype.number(),
                      node_id: faker.random.words(),
                      avatar_url: faker.random.words(),
                      gravatar_id: faker.random.words(),
                      url: faker.random.words(),
                      html_url: faker.random.words(),
                      followers_url: faker.random.words(),
                      following_url: faker.random.words(),
                      gists_url: faker.random.words(),
                      starred_url: faker.random.words(),
                      subscriptions_url: faker.random.words(),
                      organizations_url: faker.random.words(),
                      repos_url: faker.random.words(),
                      events_url: faker.random.words(),
                      received_events_url: faker.random.words(),
                      type: faker.random.words(),
                      site_admin: faker.datatype.boolean(),
                    },
                    private: faker.datatype.boolean(),
                    html_url: faker.random.words(),
                    description: faker.random.words(),
                    fork: faker.datatype.boolean(),
                    url: faker.random.words(),
                    archive_url: faker.random.words(),
                    assignees_url: faker.random.words(),
                    blobs_url: faker.random.words(),
                    branches_url: faker.random.words(),
                    collaborators_url: faker.random.words(),
                    comments_url: faker.random.words(),
                    commits_url: faker.random.words(),
                    compare_url: faker.random.words(),
                    contents_url: faker.random.words(),
                    contributors_url: faker.random.words(),
                    deployments_url: faker.random.words(),
                    downloads_url: faker.random.words(),
                    events_url: faker.random.words(),
                    forks_url: faker.random.words(),
                    git_commits_url: faker.random.words(),
                    git_refs_url: faker.random.words(),
                    git_tags_url: faker.random.words(),
                    git_url: faker.random.words(),
                    issue_comment_url: faker.random.words(),
                    issue_events_url: faker.random.words(),
                    issues_url: faker.random.words(),
                    keys_url: faker.random.words(),
                    labels_url: faker.random.words(),
                    languages_url: faker.random.words(),
                    merges_url: faker.random.words(),
                    milestones_url: faker.random.words(),
                    notifications_url: faker.random.words(),
                    pulls_url: faker.random.words(),
                    releases_url: faker.random.words(),
                    ssh_url: faker.random.words(),
                    stargazers_url: faker.random.words(),
                    statuses_url: faker.random.words(),
                    subscribers_url: faker.random.words(),
                    subscription_url: faker.random.words(),
                    tags_url: faker.random.words(),
                    teams_url: faker.random.words(),
                    trees_url: faker.random.words(),
                    clone_url: faker.random.words(),
                    mirror_url: faker.random.words(),
                    hooks_url: faker.random.words(),
                    svn_url: faker.random.words(),
                    homepage: faker.random.words(),
                    language: faker.random.words(),
                    forks_count: faker.datatype.number(),
                    stargazers_count: faker.datatype.number(),
                    watchers_count: faker.datatype.number(),
                    size: faker.datatype.number(),
                    default_branch: faker.random.words(),
                    open_issues_count: faker.datatype.number(),
                    is_template: faker.datatype.boolean(),
                    topics: [
                      ...new Array(faker.datatype.number({ max: 100 })).keys(),
                    ].map(_ => faker.random.words()),
                    has_issues: faker.datatype.boolean(),
                    has_projects: faker.datatype.boolean(),
                    has_wiki: faker.datatype.boolean(),
                    has_pages: faker.datatype.boolean(),
                    has_downloads: faker.datatype.boolean(),
                    archived: faker.datatype.boolean(),
                    disabled: faker.datatype.boolean(),
                    visibility: faker.random.words(),
                    pushed_at: faker.random.words(),
                    created_at: faker.random.words(),
                    updated_at: faker.random.words(),
                    permissions: {
                      admin: faker.datatype.boolean(),
                      maintain: faker.datatype.boolean(),
                      push: faker.datatype.boolean(),
                      triage: faker.datatype.boolean(),
                      pull: faker.datatype.boolean(),
                    },
                    allow_rebase_merge: faker.datatype.boolean(),
                    temp_clone_token: faker.random.words(),
                    allow_squash_merge: faker.datatype.boolean(),
                    allow_auto_merge: faker.datatype.boolean(),
                    delete_branch_on_merge: faker.datatype.boolean(),
                    allow_update_branch: faker.datatype.boolean(),
                    allow_merge_commit: faker.datatype.boolean(),
                    subscribers_count: faker.datatype.number(),
                    network_count: faker.datatype.number(),
                  },
                  temp_clone_token: faker.random.words(),
                  allow_squash_merge: faker.datatype.boolean(),
                  allow_auto_merge: faker.datatype.boolean(),
                  delete_branch_on_merge: faker.datatype.boolean(),
                  allow_merge_commit: faker.datatype.boolean(),
                  allow_forking: faker.datatype.boolean(),
                  subscribers_count: faker.datatype.number(),
                  network_count: faker.datatype.number(),
                  open_issues: faker.datatype.number(),
                  watchers: faker.datatype.number(),
                  master_branch: faker.random.words(),
                  starred_at: faker.random.words(),
                },
                temp_clone_token: faker.random.words(),
                delete_branch_on_merge: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
                code_of_conduct: {
                  key: faker.random.words(),
                  name: faker.random.words(),
                  url: faker.random.words(),
                  body: faker.random.words(),
                  html_url: faker.random.words(),
                },
                license: {
                  key: faker.random.words(),
                  name: faker.random.words(),
                  spdx_id: faker.random.words(),
                  url: faker.random.words(),
                  node_id: faker.random.words(),
                },
                forks: faker.datatype.number(),
                open_issues: faker.datatype.number(),
                watchers: faker.datatype.number(),
                allow_forking: faker.datatype.boolean(),
              },
              head_repository: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                owner: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                template_repository: {
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  name: faker.random.words(),
                  full_name: faker.random.words(),
                  license: {
                    key: faker.random.words(),
                    name: faker.random.words(),
                    url: faker.random.words(),
                    spdx_id: faker.random.words(),
                    node_id: faker.random.words(),
                    html_url: faker.random.words(),
                  },
                  organization: {
                    name: faker.random.words(),
                    email: faker.random.words(),
                    login: faker.random.words(),
                    id: faker.datatype.number(),
                    node_id: faker.random.words(),
                    avatar_url: faker.random.words(),
                    gravatar_id: faker.random.words(),
                    url: faker.random.words(),
                    html_url: faker.random.words(),
                    followers_url: faker.random.words(),
                    following_url: faker.random.words(),
                    gists_url: faker.random.words(),
                    starred_url: faker.random.words(),
                    subscriptions_url: faker.random.words(),
                    organizations_url: faker.random.words(),
                    repos_url: faker.random.words(),
                    events_url: faker.random.words(),
                    received_events_url: faker.random.words(),
                    type: faker.random.words(),
                    site_admin: faker.datatype.boolean(),
                    starred_at: faker.random.words(),
                  },
                  forks: faker.datatype.number(),
                  permissions: {
                    admin: faker.datatype.boolean(),
                    pull: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                  },
                  owner: {
                    name: faker.random.words(),
                    email: faker.random.words(),
                    login: faker.random.words(),
                    id: faker.datatype.number(),
                    node_id: faker.random.words(),
                    avatar_url: faker.random.words(),
                    gravatar_id: faker.random.words(),
                    url: faker.random.words(),
                    html_url: faker.random.words(),
                    followers_url: faker.random.words(),
                    following_url: faker.random.words(),
                    gists_url: faker.random.words(),
                    starred_url: faker.random.words(),
                    subscriptions_url: faker.random.words(),
                    organizations_url: faker.random.words(),
                    repos_url: faker.random.words(),
                    events_url: faker.random.words(),
                    received_events_url: faker.random.words(),
                    type: faker.random.words(),
                    site_admin: faker.datatype.boolean(),
                    starred_at: faker.random.words(),
                  },
                  private: faker.datatype.boolean(),
                  html_url: faker.random.words(),
                  description: faker.random.words(),
                  fork: faker.datatype.boolean(),
                  url: faker.random.words(),
                  archive_url: faker.random.words(),
                  assignees_url: faker.random.words(),
                  blobs_url: faker.random.words(),
                  branches_url: faker.random.words(),
                  collaborators_url: faker.random.words(),
                  comments_url: faker.random.words(),
                  commits_url: faker.random.words(),
                  compare_url: faker.random.words(),
                  contents_url: faker.random.words(),
                  contributors_url: faker.random.words(),
                  deployments_url: faker.random.words(),
                  downloads_url: faker.random.words(),
                  events_url: faker.random.words(),
                  forks_url: faker.random.words(),
                  git_commits_url: faker.random.words(),
                  git_refs_url: faker.random.words(),
                  git_tags_url: faker.random.words(),
                  git_url: faker.random.words(),
                  issue_comment_url: faker.random.words(),
                  issue_events_url: faker.random.words(),
                  issues_url: faker.random.words(),
                  keys_url: faker.random.words(),
                  labels_url: faker.random.words(),
                  languages_url: faker.random.words(),
                  merges_url: faker.random.words(),
                  milestones_url: faker.random.words(),
                  notifications_url: faker.random.words(),
                  pulls_url: faker.random.words(),
                  releases_url: faker.random.words(),
                  ssh_url: faker.random.words(),
                  stargazers_url: faker.random.words(),
                  statuses_url: faker.random.words(),
                  subscribers_url: faker.random.words(),
                  subscription_url: faker.random.words(),
                  tags_url: faker.random.words(),
                  teams_url: faker.random.words(),
                  trees_url: faker.random.words(),
                  clone_url: faker.random.words(),
                  mirror_url: faker.random.words(),
                  hooks_url: faker.random.words(),
                  svn_url: faker.random.words(),
                  homepage: faker.random.words(),
                  language: faker.random.words(),
                  forks_count: faker.datatype.number(),
                  stargazers_count: faker.datatype.number(),
                  watchers_count: faker.datatype.number(),
                  size: faker.datatype.number(),
                  default_branch: faker.random.words(),
                  open_issues_count: faker.datatype.number(),
                  is_template: faker.datatype.boolean(),
                  topics: [
                    ...new Array(faker.datatype.number({ max: 100 })).keys(),
                  ].map(_ => faker.random.words()),
                  has_issues: faker.datatype.boolean(),
                  has_projects: faker.datatype.boolean(),
                  has_wiki: faker.datatype.boolean(),
                  has_pages: faker.datatype.boolean(),
                  has_downloads: faker.datatype.boolean(),
                  archived: faker.datatype.boolean(),
                  disabled: faker.datatype.boolean(),
                  visibility: faker.random.words(),
                  pushed_at: faker.random.words(),
                  created_at: faker.random.words(),
                  updated_at: faker.random.words(),
                  allow_rebase_merge: faker.datatype.boolean(),
                  template_repository: {
                    id: faker.datatype.number(),
                    node_id: faker.random.words(),
                    name: faker.random.words(),
                    full_name: faker.random.words(),
                    owner: {
                      login: faker.random.words(),
                      id: faker.datatype.number(),
                      node_id: faker.random.words(),
                      avatar_url: faker.random.words(),
                      gravatar_id: faker.random.words(),
                      url: faker.random.words(),
                      html_url: faker.random.words(),
                      followers_url: faker.random.words(),
                      following_url: faker.random.words(),
                      gists_url: faker.random.words(),
                      starred_url: faker.random.words(),
                      subscriptions_url: faker.random.words(),
                      organizations_url: faker.random.words(),
                      repos_url: faker.random.words(),
                      events_url: faker.random.words(),
                      received_events_url: faker.random.words(),
                      type: faker.random.words(),
                      site_admin: faker.datatype.boolean(),
                    },
                    private: faker.datatype.boolean(),
                    html_url: faker.random.words(),
                    description: faker.random.words(),
                    fork: faker.datatype.boolean(),
                    url: faker.random.words(),
                    archive_url: faker.random.words(),
                    assignees_url: faker.random.words(),
                    blobs_url: faker.random.words(),
                    branches_url: faker.random.words(),
                    collaborators_url: faker.random.words(),
                    comments_url: faker.random.words(),
                    commits_url: faker.random.words(),
                    compare_url: faker.random.words(),
                    contents_url: faker.random.words(),
                    contributors_url: faker.random.words(),
                    deployments_url: faker.random.words(),
                    downloads_url: faker.random.words(),
                    events_url: faker.random.words(),
                    forks_url: faker.random.words(),
                    git_commits_url: faker.random.words(),
                    git_refs_url: faker.random.words(),
                    git_tags_url: faker.random.words(),
                    git_url: faker.random.words(),
                    issue_comment_url: faker.random.words(),
                    issue_events_url: faker.random.words(),
                    issues_url: faker.random.words(),
                    keys_url: faker.random.words(),
                    labels_url: faker.random.words(),
                    languages_url: faker.random.words(),
                    merges_url: faker.random.words(),
                    milestones_url: faker.random.words(),
                    notifications_url: faker.random.words(),
                    pulls_url: faker.random.words(),
                    releases_url: faker.random.words(),
                    ssh_url: faker.random.words(),
                    stargazers_url: faker.random.words(),
                    statuses_url: faker.random.words(),
                    subscribers_url: faker.random.words(),
                    subscription_url: faker.random.words(),
                    tags_url: faker.random.words(),
                    teams_url: faker.random.words(),
                    trees_url: faker.random.words(),
                    clone_url: faker.random.words(),
                    mirror_url: faker.random.words(),
                    hooks_url: faker.random.words(),
                    svn_url: faker.random.words(),
                    homepage: faker.random.words(),
                    language: faker.random.words(),
                    forks_count: faker.datatype.number(),
                    stargazers_count: faker.datatype.number(),
                    watchers_count: faker.datatype.number(),
                    size: faker.datatype.number(),
                    default_branch: faker.random.words(),
                    open_issues_count: faker.datatype.number(),
                    is_template: faker.datatype.boolean(),
                    topics: [
                      ...new Array(faker.datatype.number({ max: 100 })).keys(),
                    ].map(_ => faker.random.words()),
                    has_issues: faker.datatype.boolean(),
                    has_projects: faker.datatype.boolean(),
                    has_wiki: faker.datatype.boolean(),
                    has_pages: faker.datatype.boolean(),
                    has_downloads: faker.datatype.boolean(),
                    archived: faker.datatype.boolean(),
                    disabled: faker.datatype.boolean(),
                    visibility: faker.random.words(),
                    pushed_at: faker.random.words(),
                    created_at: faker.random.words(),
                    updated_at: faker.random.words(),
                    permissions: {
                      admin: faker.datatype.boolean(),
                      maintain: faker.datatype.boolean(),
                      push: faker.datatype.boolean(),
                      triage: faker.datatype.boolean(),
                      pull: faker.datatype.boolean(),
                    },
                    allow_rebase_merge: faker.datatype.boolean(),
                    temp_clone_token: faker.random.words(),
                    allow_squash_merge: faker.datatype.boolean(),
                    allow_auto_merge: faker.datatype.boolean(),
                    delete_branch_on_merge: faker.datatype.boolean(),
                    allow_update_branch: faker.datatype.boolean(),
                    allow_merge_commit: faker.datatype.boolean(),
                    subscribers_count: faker.datatype.number(),
                    network_count: faker.datatype.number(),
                  },
                  temp_clone_token: faker.random.words(),
                  allow_squash_merge: faker.datatype.boolean(),
                  allow_auto_merge: faker.datatype.boolean(),
                  delete_branch_on_merge: faker.datatype.boolean(),
                  allow_merge_commit: faker.datatype.boolean(),
                  allow_forking: faker.datatype.boolean(),
                  subscribers_count: faker.datatype.number(),
                  network_count: faker.datatype.number(),
                  open_issues: faker.datatype.number(),
                  watchers: faker.datatype.number(),
                  master_branch: faker.random.words(),
                  starred_at: faker.random.words(),
                },
                temp_clone_token: faker.random.words(),
                delete_branch_on_merge: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
                code_of_conduct: {
                  key: faker.random.words(),
                  name: faker.random.words(),
                  url: faker.random.words(),
                  body: faker.random.words(),
                  html_url: faker.random.words(),
                },
                license: {
                  key: faker.random.words(),
                  name: faker.random.words(),
                  spdx_id: faker.random.words(),
                  url: faker.random.words(),
                  node_id: faker.random.words(),
                },
                forks: faker.datatype.number(),
                open_issues: faker.datatype.number(),
                watchers: faker.datatype.number(),
                allow_forking: faker.datatype.boolean(),
              },
              head_repository_id: faker.datatype.number(),
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get('/repos/:owner/:repo/assignees', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          }))
        ),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/assignees/:assignee', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/autolinks', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.datatype.number(),
            key_prefix: faker.random.words(),
            url_template: faker.random.words(),
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/repos/:owner/:repo/autolinks', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json({
          id: faker.datatype.number(),
          key_prefix: faker.random.words(),
          url_template: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/autolinks/:autolink_id', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.datatype.number(),
          key_prefix: faker.random.words(),
          url_template: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/repos/:owner/:repo/autolinks/:autolink_id', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/branches', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            name: faker.random.words(),
            commit: {
              sha: faker.random.words(),
              url: faker.random.words(),
            },
            protected: faker.datatype.boolean(),
            protection: {},
            protection_url: faker.random.words(),
          }))
        ),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/branches/:branch', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          name: faker.random.words(),
          commit: {
            url: faker.random.words(),
            sha: faker.random.words(),
            node_id: faker.random.words(),
            html_url: faker.random.words(),
            comments_url: faker.random.words(),
            commit: {
              url: faker.random.words(),
              author: {
                name: faker.random.words(),
                email: faker.random.words(),
                date: faker.random.words(),
              },
              committer: {
                name: faker.random.words(),
                email: faker.random.words(),
                date: faker.random.words(),
              },
              message: faker.random.words(),
              comment_count: faker.datatype.number(),
              tree: {
                sha: faker.random.words(),
                url: faker.random.words(),
              },
              verification: {
                verified: faker.datatype.boolean(),
                reason: faker.random.words(),
                payload: faker.random.words(),
                signature: faker.random.words(),
              },
            },
            author: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            committer: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            parents: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              sha: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
            })),
            stats: {
              additions: faker.datatype.number(),
              deletions: faker.datatype.number(),
              total: faker.datatype.number(),
            },
            files: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              sha: faker.random.words(),
              filename: faker.random.words(),
              status: faker.random.arrayElement([
                'added',
                'removed',
                'modified',
                'renamed',
                'copied',
                'changed',
                'unchanged',
              ]),
              additions: faker.datatype.number(),
              deletions: faker.datatype.number(),
              changes: faker.datatype.number(),
              blob_url: faker.random.words(),
              raw_url: faker.random.words(),
              contents_url: faker.random.words(),
              patch: faker.random.words(),
              previous_filename: faker.random.words(),
            })),
          },
          _links: {
            html: faker.random.words(),
            self: faker.random.words(),
          },
          protected: faker.datatype.boolean(),
          protection: {
            url: faker.random.words(),
            enabled: faker.datatype.boolean(),
            required_status_checks: {
              url: faker.random.words(),
              enforcement_level: faker.random.words(),
              contexts: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              contexts_url: faker.random.words(),
              strict: faker.datatype.boolean(),
            },
            enforce_admins: {
              url: faker.random.words(),
              enabled: faker.datatype.boolean(),
            },
            required_pull_request_reviews: {
              url: faker.random.words(),
              dismissal_restrictions: {
                users: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => ({
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                })),
                teams: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => ({
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  name: faker.random.words(),
                  slug: faker.random.words(),
                  description: faker.random.words(),
                  privacy: faker.random.words(),
                  permission: faker.random.words(),
                  permissions: {
                    pull: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                    admin: faker.datatype.boolean(),
                  },
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  members_url: faker.random.words(),
                  repositories_url: faker.random.words(),
                  parent: {
                    id: faker.datatype.number(),
                    node_id: faker.random.words(),
                    url: faker.random.words(),
                    members_url: faker.random.words(),
                    name: faker.random.words(),
                    description: faker.random.words(),
                    permission: faker.random.words(),
                    privacy: faker.random.words(),
                    html_url: faker.random.words(),
                    repositories_url: faker.random.words(),
                    slug: faker.random.words(),
                    ldap_dn: faker.random.words(),
                  },
                })),
                url: faker.random.words(),
                users_url: faker.random.words(),
                teams_url: faker.random.words(),
              },
              dismiss_stale_reviews: faker.datatype.boolean(),
              require_code_owner_reviews: faker.datatype.boolean(),
              required_approving_review_count: faker.datatype.number(),
            },
            restrictions: {
              url: faker.random.words(),
              users_url: faker.random.words(),
              teams_url: faker.random.words(),
              apps_url: faker.random.words(),
              users: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => ({
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
              })),
              teams: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => ({
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                name: faker.random.words(),
                slug: faker.random.words(),
                description: faker.random.words(),
                privacy: faker.random.words(),
                permission: faker.random.words(),
                members_url: faker.random.words(),
                repositories_url: faker.random.words(),
                parent: faker.random.words(),
              })),
              apps: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => ({
                id: faker.datatype.number(),
                slug: faker.random.words(),
                node_id: faker.random.words(),
                owner: {
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  hooks_url: faker.random.words(),
                  issues_url: faker.random.words(),
                  members_url: faker.random.words(),
                  public_members_url: faker.random.words(),
                  avatar_url: faker.random.words(),
                  description: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                },
                name: faker.random.words(),
                description: faker.random.words(),
                external_url: faker.random.words(),
                html_url: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                permissions: {
                  metadata: faker.random.words(),
                  contents: faker.random.words(),
                  issues: faker.random.words(),
                  single_file: faker.random.words(),
                },
                events: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
              })),
            },
            required_linear_history: {
              enabled: faker.datatype.boolean(),
            },
            allow_force_pushes: {
              enabled: faker.datatype.boolean(),
            },
            allow_deletions: {
              enabled: faker.datatype.boolean(),
            },
            required_conversation_resolution: {
              enabled: faker.datatype.boolean(),
            },
            name: faker.random.words(),
            protection_url: faker.random.words(),
            required_signatures: {
              url: faker.random.words(),
              enabled: faker.datatype.boolean(),
            },
          },
          protection_url: faker.random.words(),
          pattern: faker.random.words(),
          required_approving_review_count: faker.datatype.number(),
        }),
      ],
      [
        ctx.status(301),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(415),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get(
    '/repos/:owner/:repo/branches/:branch/protection',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            url: faker.random.words(),
            enabled: faker.datatype.boolean(),
            required_status_checks: {
              url: faker.random.words(),
              enforcement_level: faker.random.words(),
              contexts: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              contexts_url: faker.random.words(),
              strict: faker.datatype.boolean(),
            },
            enforce_admins: {
              url: faker.random.words(),
              enabled: faker.datatype.boolean(),
            },
            required_pull_request_reviews: {
              url: faker.random.words(),
              dismissal_restrictions: {
                users: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => ({
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                })),
                teams: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => ({
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  name: faker.random.words(),
                  slug: faker.random.words(),
                  description: faker.random.words(),
                  privacy: faker.random.words(),
                  permission: faker.random.words(),
                  permissions: {
                    pull: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                    admin: faker.datatype.boolean(),
                  },
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  members_url: faker.random.words(),
                  repositories_url: faker.random.words(),
                  parent: {
                    id: faker.datatype.number(),
                    node_id: faker.random.words(),
                    url: faker.random.words(),
                    members_url: faker.random.words(),
                    name: faker.random.words(),
                    description: faker.random.words(),
                    permission: faker.random.words(),
                    privacy: faker.random.words(),
                    html_url: faker.random.words(),
                    repositories_url: faker.random.words(),
                    slug: faker.random.words(),
                    ldap_dn: faker.random.words(),
                  },
                })),
                url: faker.random.words(),
                users_url: faker.random.words(),
                teams_url: faker.random.words(),
              },
              dismiss_stale_reviews: faker.datatype.boolean(),
              require_code_owner_reviews: faker.datatype.boolean(),
              required_approving_review_count: faker.datatype.number(),
            },
            restrictions: {
              url: faker.random.words(),
              users_url: faker.random.words(),
              teams_url: faker.random.words(),
              apps_url: faker.random.words(),
              users: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => ({
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
              })),
              teams: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => ({
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                name: faker.random.words(),
                slug: faker.random.words(),
                description: faker.random.words(),
                privacy: faker.random.words(),
                permission: faker.random.words(),
                members_url: faker.random.words(),
                repositories_url: faker.random.words(),
                parent: faker.random.words(),
              })),
              apps: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => ({
                id: faker.datatype.number(),
                slug: faker.random.words(),
                node_id: faker.random.words(),
                owner: {
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  hooks_url: faker.random.words(),
                  issues_url: faker.random.words(),
                  members_url: faker.random.words(),
                  public_members_url: faker.random.words(),
                  avatar_url: faker.random.words(),
                  description: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                },
                name: faker.random.words(),
                description: faker.random.words(),
                external_url: faker.random.words(),
                html_url: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                permissions: {
                  metadata: faker.random.words(),
                  contents: faker.random.words(),
                  issues: faker.random.words(),
                  single_file: faker.random.words(),
                },
                events: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
              })),
            },
            required_linear_history: {
              enabled: faker.datatype.boolean(),
            },
            allow_force_pushes: {
              enabled: faker.datatype.boolean(),
            },
            allow_deletions: {
              enabled: faker.datatype.boolean(),
            },
            required_conversation_resolution: {
              enabled: faker.datatype.boolean(),
            },
            name: faker.random.words(),
            protection_url: faker.random.words(),
            required_signatures: {
              url: faker.random.words(),
              enabled: faker.datatype.boolean(),
            },
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.put(
    '/repos/:owner/:repo/branches/:branch/protection',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            url: faker.random.words(),
            required_status_checks: {
              url: faker.random.words(),
              strict: faker.datatype.boolean(),
              contexts: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              contexts_url: faker.random.words(),
            },
            required_pull_request_reviews: {
              url: faker.random.words(),
              dismiss_stale_reviews: faker.datatype.boolean(),
              require_code_owner_reviews: faker.datatype.boolean(),
              required_approving_review_count: faker.datatype.number(),
              dismissal_restrictions: {
                url: faker.random.words(),
                users_url: faker.random.words(),
                teams_url: faker.random.words(),
                users: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => ({
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                })),
                teams: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => ({
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  name: faker.random.words(),
                  slug: faker.random.words(),
                  description: faker.random.words(),
                  privacy: faker.random.words(),
                  permission: faker.random.words(),
                  permissions: {
                    pull: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                    admin: faker.datatype.boolean(),
                  },
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  members_url: faker.random.words(),
                  repositories_url: faker.random.words(),
                  parent: {
                    id: faker.datatype.number(),
                    node_id: faker.random.words(),
                    url: faker.random.words(),
                    members_url: faker.random.words(),
                    name: faker.random.words(),
                    description: faker.random.words(),
                    permission: faker.random.words(),
                    privacy: faker.random.words(),
                    html_url: faker.random.words(),
                    repositories_url: faker.random.words(),
                    slug: faker.random.words(),
                    ldap_dn: faker.random.words(),
                  },
                })),
              },
            },
            required_signatures: {
              url: faker.random.words(),
              enabled: faker.datatype.boolean(),
            },
            enforce_admins: {
              url: faker.random.words(),
              enabled: faker.datatype.boolean(),
            },
            required_linear_history: {
              enabled: faker.datatype.boolean(),
            },
            allow_force_pushes: {
              enabled: faker.datatype.boolean(),
            },
            allow_deletions: {
              enabled: faker.datatype.boolean(),
            },
            restrictions: {
              url: faker.random.words(),
              users_url: faker.random.words(),
              teams_url: faker.random.words(),
              apps_url: faker.random.words(),
              users: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => ({
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
              })),
              teams: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => ({
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                name: faker.random.words(),
                slug: faker.random.words(),
                description: faker.random.words(),
                privacy: faker.random.words(),
                permission: faker.random.words(),
                members_url: faker.random.words(),
                repositories_url: faker.random.words(),
                parent: faker.random.words(),
              })),
              apps: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => ({
                id: faker.datatype.number(),
                slug: faker.random.words(),
                node_id: faker.random.words(),
                owner: {
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  hooks_url: faker.random.words(),
                  issues_url: faker.random.words(),
                  members_url: faker.random.words(),
                  public_members_url: faker.random.words(),
                  avatar_url: faker.random.words(),
                  description: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                },
                name: faker.random.words(),
                description: faker.random.words(),
                external_url: faker.random.words(),
                html_url: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                permissions: {
                  metadata: faker.random.words(),
                  contents: faker.random.words(),
                  issues: faker.random.words(),
                  single_file: faker.random.words(),
                },
                events: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
              })),
            },
            required_conversation_resolution: {
              enabled: faker.datatype.boolean(),
            },
          }),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            errors: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/repos/:owner/:repo/branches/:branch/protection',
    (req, res, ctx) => {
      const resultArrray = [
        [ctx.status(204), ctx.json({})],
        [
          ctx.status(403),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/repos/:owner/:repo/branches/:branch/protection/enforce_admins',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            url: faker.random.words(),
            enabled: faker.datatype.boolean(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.post(
    '/repos/:owner/:repo/branches/:branch/protection/enforce_admins',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            url: faker.random.words(),
            enabled: faker.datatype.boolean(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/repos/:owner/:repo/branches/:branch/protection/enforce_admins',
    (req, res, ctx) => {
      const resultArrray = [
        [ctx.status(204), ctx.json({})],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            url: faker.random.words(),
            dismissal_restrictions: {
              users: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => ({
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              })),
              teams: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => ({
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                slug: faker.random.words(),
                description: faker.random.words(),
                privacy: faker.random.words(),
                permission: faker.random.words(),
                permissions: {
                  pull: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  admin: faker.datatype.boolean(),
                },
                url: faker.random.words(),
                html_url: faker.random.words(),
                members_url: faker.random.words(),
                repositories_url: faker.random.words(),
                parent: {
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  url: faker.random.words(),
                  members_url: faker.random.words(),
                  name: faker.random.words(),
                  description: faker.random.words(),
                  permission: faker.random.words(),
                  privacy: faker.random.words(),
                  html_url: faker.random.words(),
                  repositories_url: faker.random.words(),
                  slug: faker.random.words(),
                  ldap_dn: faker.random.words(),
                },
              })),
              url: faker.random.words(),
              users_url: faker.random.words(),
              teams_url: faker.random.words(),
            },
            dismiss_stale_reviews: faker.datatype.boolean(),
            require_code_owner_reviews: faker.datatype.boolean(),
            required_approving_review_count: faker.datatype.number(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.patch(
    '/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            url: faker.random.words(),
            dismissal_restrictions: {
              users: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => ({
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              })),
              teams: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => ({
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                slug: faker.random.words(),
                description: faker.random.words(),
                privacy: faker.random.words(),
                permission: faker.random.words(),
                permissions: {
                  pull: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  admin: faker.datatype.boolean(),
                },
                url: faker.random.words(),
                html_url: faker.random.words(),
                members_url: faker.random.words(),
                repositories_url: faker.random.words(),
                parent: {
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  url: faker.random.words(),
                  members_url: faker.random.words(),
                  name: faker.random.words(),
                  description: faker.random.words(),
                  permission: faker.random.words(),
                  privacy: faker.random.words(),
                  html_url: faker.random.words(),
                  repositories_url: faker.random.words(),
                  slug: faker.random.words(),
                  ldap_dn: faker.random.words(),
                },
              })),
              url: faker.random.words(),
              users_url: faker.random.words(),
              teams_url: faker.random.words(),
            },
            dismiss_stale_reviews: faker.datatype.boolean(),
            require_code_owner_reviews: faker.datatype.boolean(),
            required_approving_review_count: faker.datatype.number(),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            errors: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              resource: faker.random.words(),
              field: faker.random.words(),
              message: faker.random.words(),
              code: faker.random.words(),
              index: faker.datatype.number(),
              value: {},
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews',
    (req, res, ctx) => {
      const resultArrray = [
        [ctx.status(204), ctx.json({})],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/repos/:owner/:repo/branches/:branch/protection/required_signatures',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            url: faker.random.words(),
            enabled: faker.datatype.boolean(),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.post(
    '/repos/:owner/:repo/branches/:branch/protection/required_signatures',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            url: faker.random.words(),
            enabled: faker.datatype.boolean(),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/repos/:owner/:repo/branches/:branch/protection/required_signatures',
    (req, res, ctx) => {
      const resultArrray = [
        [ctx.status(204), ctx.json({})],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/repos/:owner/:repo/branches/:branch/protection/required_status_checks',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            url: faker.random.words(),
            strict: faker.datatype.boolean(),
            contexts: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            contexts_url: faker.random.words(),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.patch(
    '/repos/:owner/:repo/branches/:branch/protection/required_status_checks',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            url: faker.random.words(),
            strict: faker.datatype.boolean(),
            contexts: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            contexts_url: faker.random.words(),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            errors: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              resource: faker.random.words(),
              field: faker.random.words(),
              message: faker.random.words(),
              code: faker.random.words(),
              index: faker.datatype.number(),
              value: {},
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/repos/:owner/:repo/branches/:branch/protection/required_status_checks',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json(
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ =>
              faker.random.words()
            )
          ),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.post(
    '/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json(
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ =>
              faker.random.words()
            )
          ),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            errors: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              resource: faker.random.words(),
              field: faker.random.words(),
              message: faker.random.words(),
              code: faker.random.words(),
              index: faker.datatype.number(),
              value: {},
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.put(
    '/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json(
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ =>
              faker.random.words()
            )
          ),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            errors: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              resource: faker.random.words(),
              field: faker.random.words(),
              message: faker.random.words(),
              code: faker.random.words(),
              index: faker.datatype.number(),
              value: {},
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json(
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ =>
              faker.random.words()
            )
          ),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            errors: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              resource: faker.random.words(),
              field: faker.random.words(),
              message: faker.random.words(),
              code: faker.random.words(),
              index: faker.datatype.number(),
              value: {},
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/repos/:owner/:repo/branches/:branch/protection/restrictions',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            url: faker.random.words(),
            users_url: faker.random.words(),
            teams_url: faker.random.words(),
            apps_url: faker.random.words(),
            users: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
            })),
            teams: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              name: faker.random.words(),
              slug: faker.random.words(),
              description: faker.random.words(),
              privacy: faker.random.words(),
              permission: faker.random.words(),
              members_url: faker.random.words(),
              repositories_url: faker.random.words(),
              parent: faker.random.words(),
            })),
            apps: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              slug: faker.random.words(),
              node_id: faker.random.words(),
              owner: {
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                hooks_url: faker.random.words(),
                issues_url: faker.random.words(),
                members_url: faker.random.words(),
                public_members_url: faker.random.words(),
                avatar_url: faker.random.words(),
                description: faker.random.words(),
                gravatar_id: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
              },
              name: faker.random.words(),
              description: faker.random.words(),
              external_url: faker.random.words(),
              html_url: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                metadata: faker.random.words(),
                contents: faker.random.words(),
                issues: faker.random.words(),
                single_file: faker.random.words(),
              },
              events: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
            })),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/repos/:owner/:repo/branches/:branch/protection/restrictions',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/repos/:owner/:repo/branches/:branch/protection/restrictions/apps',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json(
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
              _ => ({
                id: faker.datatype.number(),
                slug: faker.random.words(),
                node_id: faker.random.words(),
                owner: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                name: faker.random.words(),
                description: faker.random.words(),
                external_url: faker.random.words(),
                html_url: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                permissions: {
                  issues: faker.random.words(),
                  checks: faker.random.words(),
                  metadata: faker.random.words(),
                  contents: faker.random.words(),
                  deployments: faker.random.words(),
                },
                events: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                installations_count: faker.datatype.number(),
                client_id: faker.random.words(),
                client_secret: faker.random.words(),
                webhook_secret: faker.random.words(),
                pem: faker.random.words(),
              })
            )
          ),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.post(
    '/repos/:owner/:repo/branches/:branch/protection/restrictions/apps',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json(
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
              _ => ({
                id: faker.datatype.number(),
                slug: faker.random.words(),
                node_id: faker.random.words(),
                owner: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                name: faker.random.words(),
                description: faker.random.words(),
                external_url: faker.random.words(),
                html_url: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                permissions: {
                  issues: faker.random.words(),
                  checks: faker.random.words(),
                  metadata: faker.random.words(),
                  contents: faker.random.words(),
                  deployments: faker.random.words(),
                },
                events: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                installations_count: faker.datatype.number(),
                client_id: faker.random.words(),
                client_secret: faker.random.words(),
                webhook_secret: faker.random.words(),
                pem: faker.random.words(),
              })
            )
          ),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            errors: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              resource: faker.random.words(),
              field: faker.random.words(),
              message: faker.random.words(),
              code: faker.random.words(),
              index: faker.datatype.number(),
              value: {},
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.put(
    '/repos/:owner/:repo/branches/:branch/protection/restrictions/apps',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json(
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
              _ => ({
                id: faker.datatype.number(),
                slug: faker.random.words(),
                node_id: faker.random.words(),
                owner: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                name: faker.random.words(),
                description: faker.random.words(),
                external_url: faker.random.words(),
                html_url: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                permissions: {
                  issues: faker.random.words(),
                  checks: faker.random.words(),
                  metadata: faker.random.words(),
                  contents: faker.random.words(),
                  deployments: faker.random.words(),
                },
                events: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                installations_count: faker.datatype.number(),
                client_id: faker.random.words(),
                client_secret: faker.random.words(),
                webhook_secret: faker.random.words(),
                pem: faker.random.words(),
              })
            )
          ),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            errors: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              resource: faker.random.words(),
              field: faker.random.words(),
              message: faker.random.words(),
              code: faker.random.words(),
              index: faker.datatype.number(),
              value: {},
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/repos/:owner/:repo/branches/:branch/protection/restrictions/apps',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json(
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
              _ => ({
                id: faker.datatype.number(),
                slug: faker.random.words(),
                node_id: faker.random.words(),
                owner: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                name: faker.random.words(),
                description: faker.random.words(),
                external_url: faker.random.words(),
                html_url: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                permissions: {
                  issues: faker.random.words(),
                  checks: faker.random.words(),
                  metadata: faker.random.words(),
                  contents: faker.random.words(),
                  deployments: faker.random.words(),
                },
                events: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                installations_count: faker.datatype.number(),
                client_id: faker.random.words(),
                client_secret: faker.random.words(),
                webhook_secret: faker.random.words(),
                pem: faker.random.words(),
              })
            )
          ),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            errors: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              resource: faker.random.words(),
              field: faker.random.words(),
              message: faker.random.words(),
              code: faker.random.words(),
              index: faker.datatype.number(),
              value: {},
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/repos/:owner/:repo/branches/:branch/protection/restrictions/teams',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json(
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
              _ => ({
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                slug: faker.random.words(),
                description: faker.random.words(),
                privacy: faker.random.words(),
                permission: faker.random.words(),
                permissions: {
                  pull: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  admin: faker.datatype.boolean(),
                },
                url: faker.random.words(),
                html_url: faker.random.words(),
                members_url: faker.random.words(),
                repositories_url: faker.random.words(),
                parent: {
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  url: faker.random.words(),
                  members_url: faker.random.words(),
                  name: faker.random.words(),
                  description: faker.random.words(),
                  permission: faker.random.words(),
                  privacy: faker.random.words(),
                  html_url: faker.random.words(),
                  repositories_url: faker.random.words(),
                  slug: faker.random.words(),
                  ldap_dn: faker.random.words(),
                },
              })
            )
          ),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.post(
    '/repos/:owner/:repo/branches/:branch/protection/restrictions/teams',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json(
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
              _ => ({
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                slug: faker.random.words(),
                description: faker.random.words(),
                privacy: faker.random.words(),
                permission: faker.random.words(),
                permissions: {
                  pull: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  admin: faker.datatype.boolean(),
                },
                url: faker.random.words(),
                html_url: faker.random.words(),
                members_url: faker.random.words(),
                repositories_url: faker.random.words(),
                parent: {
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  url: faker.random.words(),
                  members_url: faker.random.words(),
                  name: faker.random.words(),
                  description: faker.random.words(),
                  permission: faker.random.words(),
                  privacy: faker.random.words(),
                  html_url: faker.random.words(),
                  repositories_url: faker.random.words(),
                  slug: faker.random.words(),
                  ldap_dn: faker.random.words(),
                },
              })
            )
          ),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            errors: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              resource: faker.random.words(),
              field: faker.random.words(),
              message: faker.random.words(),
              code: faker.random.words(),
              index: faker.datatype.number(),
              value: {},
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.put(
    '/repos/:owner/:repo/branches/:branch/protection/restrictions/teams',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json(
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
              _ => ({
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                slug: faker.random.words(),
                description: faker.random.words(),
                privacy: faker.random.words(),
                permission: faker.random.words(),
                permissions: {
                  pull: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  admin: faker.datatype.boolean(),
                },
                url: faker.random.words(),
                html_url: faker.random.words(),
                members_url: faker.random.words(),
                repositories_url: faker.random.words(),
                parent: {
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  url: faker.random.words(),
                  members_url: faker.random.words(),
                  name: faker.random.words(),
                  description: faker.random.words(),
                  permission: faker.random.words(),
                  privacy: faker.random.words(),
                  html_url: faker.random.words(),
                  repositories_url: faker.random.words(),
                  slug: faker.random.words(),
                  ldap_dn: faker.random.words(),
                },
              })
            )
          ),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            errors: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              resource: faker.random.words(),
              field: faker.random.words(),
              message: faker.random.words(),
              code: faker.random.words(),
              index: faker.datatype.number(),
              value: {},
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/repos/:owner/:repo/branches/:branch/protection/restrictions/teams',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json(
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
              _ => ({
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                slug: faker.random.words(),
                description: faker.random.words(),
                privacy: faker.random.words(),
                permission: faker.random.words(),
                permissions: {
                  pull: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  admin: faker.datatype.boolean(),
                },
                url: faker.random.words(),
                html_url: faker.random.words(),
                members_url: faker.random.words(),
                repositories_url: faker.random.words(),
                parent: {
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  url: faker.random.words(),
                  members_url: faker.random.words(),
                  name: faker.random.words(),
                  description: faker.random.words(),
                  permission: faker.random.words(),
                  privacy: faker.random.words(),
                  html_url: faker.random.words(),
                  repositories_url: faker.random.words(),
                  slug: faker.random.words(),
                  ldap_dn: faker.random.words(),
                },
              })
            )
          ),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            errors: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              resource: faker.random.words(),
              field: faker.random.words(),
              message: faker.random.words(),
              code: faker.random.words(),
              index: faker.datatype.number(),
              value: {},
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/repos/:owner/:repo/branches/:branch/protection/restrictions/users',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json(
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
              _ => ({
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              })
            )
          ),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.post(
    '/repos/:owner/:repo/branches/:branch/protection/restrictions/users',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json(
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
              _ => ({
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              })
            )
          ),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            errors: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              resource: faker.random.words(),
              field: faker.random.words(),
              message: faker.random.words(),
              code: faker.random.words(),
              index: faker.datatype.number(),
              value: {},
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.put(
    '/repos/:owner/:repo/branches/:branch/protection/restrictions/users',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json(
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
              _ => ({
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              })
            )
          ),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            errors: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              resource: faker.random.words(),
              field: faker.random.words(),
              message: faker.random.words(),
              code: faker.random.words(),
              index: faker.datatype.number(),
              value: {},
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/repos/:owner/:repo/branches/:branch/protection/restrictions/users',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json(
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
              _ => ({
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              })
            )
          ),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            errors: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              resource: faker.random.words(),
              field: faker.random.words(),
              message: faker.random.words(),
              code: faker.random.words(),
              index: faker.datatype.number(),
              value: {},
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.post('/repos/:owner/:repo/branches/:branch/rename', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json({
          name: faker.random.words(),
          commit: {
            url: faker.random.words(),
            sha: faker.random.words(),
            node_id: faker.random.words(),
            html_url: faker.random.words(),
            comments_url: faker.random.words(),
            commit: {
              url: faker.random.words(),
              author: {
                name: faker.random.words(),
                email: faker.random.words(),
                date: faker.random.words(),
              },
              committer: {
                name: faker.random.words(),
                email: faker.random.words(),
                date: faker.random.words(),
              },
              message: faker.random.words(),
              comment_count: faker.datatype.number(),
              tree: {
                sha: faker.random.words(),
                url: faker.random.words(),
              },
              verification: {
                verified: faker.datatype.boolean(),
                reason: faker.random.words(),
                payload: faker.random.words(),
                signature: faker.random.words(),
              },
            },
            author: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            committer: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            parents: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              sha: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
            })),
            stats: {
              additions: faker.datatype.number(),
              deletions: faker.datatype.number(),
              total: faker.datatype.number(),
            },
            files: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              sha: faker.random.words(),
              filename: faker.random.words(),
              status: faker.random.arrayElement([
                'added',
                'removed',
                'modified',
                'renamed',
                'copied',
                'changed',
                'unchanged',
              ]),
              additions: faker.datatype.number(),
              deletions: faker.datatype.number(),
              changes: faker.datatype.number(),
              blob_url: faker.random.words(),
              raw_url: faker.random.words(),
              contents_url: faker.random.words(),
              patch: faker.random.words(),
              previous_filename: faker.random.words(),
            })),
          },
          _links: {
            html: faker.random.words(),
            self: faker.random.words(),
          },
          protected: faker.datatype.boolean(),
          protection: {
            url: faker.random.words(),
            enabled: faker.datatype.boolean(),
            required_status_checks: {
              url: faker.random.words(),
              enforcement_level: faker.random.words(),
              contexts: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              contexts_url: faker.random.words(),
              strict: faker.datatype.boolean(),
            },
            enforce_admins: {
              url: faker.random.words(),
              enabled: faker.datatype.boolean(),
            },
            required_pull_request_reviews: {
              url: faker.random.words(),
              dismissal_restrictions: {
                users: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => ({
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                })),
                teams: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => ({
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  name: faker.random.words(),
                  slug: faker.random.words(),
                  description: faker.random.words(),
                  privacy: faker.random.words(),
                  permission: faker.random.words(),
                  permissions: {
                    pull: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                    admin: faker.datatype.boolean(),
                  },
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  members_url: faker.random.words(),
                  repositories_url: faker.random.words(),
                  parent: {
                    id: faker.datatype.number(),
                    node_id: faker.random.words(),
                    url: faker.random.words(),
                    members_url: faker.random.words(),
                    name: faker.random.words(),
                    description: faker.random.words(),
                    permission: faker.random.words(),
                    privacy: faker.random.words(),
                    html_url: faker.random.words(),
                    repositories_url: faker.random.words(),
                    slug: faker.random.words(),
                    ldap_dn: faker.random.words(),
                  },
                })),
                url: faker.random.words(),
                users_url: faker.random.words(),
                teams_url: faker.random.words(),
              },
              dismiss_stale_reviews: faker.datatype.boolean(),
              require_code_owner_reviews: faker.datatype.boolean(),
              required_approving_review_count: faker.datatype.number(),
            },
            restrictions: {
              url: faker.random.words(),
              users_url: faker.random.words(),
              teams_url: faker.random.words(),
              apps_url: faker.random.words(),
              users: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => ({
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
              })),
              teams: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => ({
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                name: faker.random.words(),
                slug: faker.random.words(),
                description: faker.random.words(),
                privacy: faker.random.words(),
                permission: faker.random.words(),
                members_url: faker.random.words(),
                repositories_url: faker.random.words(),
                parent: faker.random.words(),
              })),
              apps: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => ({
                id: faker.datatype.number(),
                slug: faker.random.words(),
                node_id: faker.random.words(),
                owner: {
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  hooks_url: faker.random.words(),
                  issues_url: faker.random.words(),
                  members_url: faker.random.words(),
                  public_members_url: faker.random.words(),
                  avatar_url: faker.random.words(),
                  description: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                },
                name: faker.random.words(),
                description: faker.random.words(),
                external_url: faker.random.words(),
                html_url: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                permissions: {
                  metadata: faker.random.words(),
                  contents: faker.random.words(),
                  issues: faker.random.words(),
                  single_file: faker.random.words(),
                },
                events: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
              })),
            },
            required_linear_history: {
              enabled: faker.datatype.boolean(),
            },
            allow_force_pushes: {
              enabled: faker.datatype.boolean(),
            },
            allow_deletions: {
              enabled: faker.datatype.boolean(),
            },
            required_conversation_resolution: {
              enabled: faker.datatype.boolean(),
            },
            name: faker.random.words(),
            protection_url: faker.random.words(),
            required_signatures: {
              url: faker.random.words(),
              enabled: faker.datatype.boolean(),
            },
          },
          protection_url: faker.random.words(),
          pattern: faker.random.words(),
          required_approving_review_count: faker.datatype.number(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/repos/:owner/:repo/check-runs', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json({
          id: faker.datatype.number(),
          head_sha: faker.random.words(),
          node_id: faker.random.words(),
          external_id: faker.random.words(),
          url: faker.random.words(),
          html_url: faker.random.words(),
          details_url: faker.random.words(),
          status: faker.random.arrayElement([
            'queued',
            'in_progress',
            'completed',
          ]),
          conclusion: faker.random.arrayElement([
            'success',
            'failure',
            'neutral',
            'cancelled',
            'skipped',
            'timed_out',
            'action_required',
          ]),
          started_at: faker.random.words(),
          completed_at: faker.random.words(),
          output: {
            title: faker.random.words(),
            summary: faker.random.words(),
            text: faker.random.words(),
            annotations_count: faker.datatype.number(),
            annotations_url: faker.random.words(),
          },
          name: faker.random.words(),
          check_suite: {
            id: faker.datatype.number(),
          },
          app: {
            id: faker.datatype.number(),
            slug: faker.random.words(),
            node_id: faker.random.words(),
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            name: faker.random.words(),
            description: faker.random.words(),
            external_url: faker.random.words(),
            html_url: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            permissions: {
              issues: faker.random.words(),
              checks: faker.random.words(),
              metadata: faker.random.words(),
              contents: faker.random.words(),
              deployments: faker.random.words(),
            },
            events: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            installations_count: faker.datatype.number(),
            client_id: faker.random.words(),
            client_secret: faker.random.words(),
            webhook_secret: faker.random.words(),
            pem: faker.random.words(),
          },
          pull_requests: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            number: faker.datatype.number(),
            url: faker.random.words(),
            head: {
              ref: faker.random.words(),
              sha: faker.random.words(),
              repo: {
                id: faker.datatype.number(),
                url: faker.random.words(),
                name: faker.random.words(),
              },
            },
            base: {
              ref: faker.random.words(),
              sha: faker.random.words(),
              repo: {
                id: faker.datatype.number(),
                url: faker.random.words(),
                name: faker.random.words(),
              },
            },
          })),
          deployment: {
            url: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            task: faker.random.words(),
            original_environment: faker.random.words(),
            environment: faker.random.words(),
            description: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            statuses_url: faker.random.words(),
            repository_url: faker.random.words(),
            transient_environment: faker.datatype.boolean(),
            production_environment: faker.datatype.boolean(),
            performed_via_github_app: {
              id: faker.datatype.number(),
              slug: faker.random.words(),
              node_id: faker.random.words(),
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              name: faker.random.words(),
              description: faker.random.words(),
              external_url: faker.random.words(),
              html_url: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                issues: faker.random.words(),
                checks: faker.random.words(),
                metadata: faker.random.words(),
                contents: faker.random.words(),
                deployments: faker.random.words(),
              },
              events: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              installations_count: faker.datatype.number(),
              client_id: faker.random.words(),
              client_secret: faker.random.words(),
              webhook_secret: faker.random.words(),
              pem: faker.random.words(),
            },
          },
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/check-runs/:check_run_id', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.datatype.number(),
          head_sha: faker.random.words(),
          node_id: faker.random.words(),
          external_id: faker.random.words(),
          url: faker.random.words(),
          html_url: faker.random.words(),
          details_url: faker.random.words(),
          status: faker.random.arrayElement([
            'queued',
            'in_progress',
            'completed',
          ]),
          conclusion: faker.random.arrayElement([
            'success',
            'failure',
            'neutral',
            'cancelled',
            'skipped',
            'timed_out',
            'action_required',
          ]),
          started_at: faker.random.words(),
          completed_at: faker.random.words(),
          output: {
            title: faker.random.words(),
            summary: faker.random.words(),
            text: faker.random.words(),
            annotations_count: faker.datatype.number(),
            annotations_url: faker.random.words(),
          },
          name: faker.random.words(),
          check_suite: {
            id: faker.datatype.number(),
          },
          app: {
            id: faker.datatype.number(),
            slug: faker.random.words(),
            node_id: faker.random.words(),
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            name: faker.random.words(),
            description: faker.random.words(),
            external_url: faker.random.words(),
            html_url: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            permissions: {
              issues: faker.random.words(),
              checks: faker.random.words(),
              metadata: faker.random.words(),
              contents: faker.random.words(),
              deployments: faker.random.words(),
            },
            events: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            installations_count: faker.datatype.number(),
            client_id: faker.random.words(),
            client_secret: faker.random.words(),
            webhook_secret: faker.random.words(),
            pem: faker.random.words(),
          },
          pull_requests: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            number: faker.datatype.number(),
            url: faker.random.words(),
            head: {
              ref: faker.random.words(),
              sha: faker.random.words(),
              repo: {
                id: faker.datatype.number(),
                url: faker.random.words(),
                name: faker.random.words(),
              },
            },
            base: {
              ref: faker.random.words(),
              sha: faker.random.words(),
              repo: {
                id: faker.datatype.number(),
                url: faker.random.words(),
                name: faker.random.words(),
              },
            },
          })),
          deployment: {
            url: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            task: faker.random.words(),
            original_environment: faker.random.words(),
            environment: faker.random.words(),
            description: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            statuses_url: faker.random.words(),
            repository_url: faker.random.words(),
            transient_environment: faker.datatype.boolean(),
            production_environment: faker.datatype.boolean(),
            performed_via_github_app: {
              id: faker.datatype.number(),
              slug: faker.random.words(),
              node_id: faker.random.words(),
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              name: faker.random.words(),
              description: faker.random.words(),
              external_url: faker.random.words(),
              html_url: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                issues: faker.random.words(),
                checks: faker.random.words(),
                metadata: faker.random.words(),
                contents: faker.random.words(),
                deployments: faker.random.words(),
              },
              events: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              installations_count: faker.datatype.number(),
              client_id: faker.random.words(),
              client_secret: faker.random.words(),
              webhook_secret: faker.random.words(),
              pem: faker.random.words(),
            },
          },
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.patch(
    '/repos/:owner/:repo/check-runs/:check_run_id',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            head_sha: faker.random.words(),
            node_id: faker.random.words(),
            external_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            details_url: faker.random.words(),
            status: faker.random.arrayElement([
              'queued',
              'in_progress',
              'completed',
            ]),
            conclusion: faker.random.arrayElement([
              'success',
              'failure',
              'neutral',
              'cancelled',
              'skipped',
              'timed_out',
              'action_required',
            ]),
            started_at: faker.random.words(),
            completed_at: faker.random.words(),
            output: {
              title: faker.random.words(),
              summary: faker.random.words(),
              text: faker.random.words(),
              annotations_count: faker.datatype.number(),
              annotations_url: faker.random.words(),
            },
            name: faker.random.words(),
            check_suite: {
              id: faker.datatype.number(),
            },
            app: {
              id: faker.datatype.number(),
              slug: faker.random.words(),
              node_id: faker.random.words(),
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              name: faker.random.words(),
              description: faker.random.words(),
              external_url: faker.random.words(),
              html_url: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                issues: faker.random.words(),
                checks: faker.random.words(),
                metadata: faker.random.words(),
                contents: faker.random.words(),
                deployments: faker.random.words(),
              },
              events: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              installations_count: faker.datatype.number(),
              client_id: faker.random.words(),
              client_secret: faker.random.words(),
              webhook_secret: faker.random.words(),
              pem: faker.random.words(),
            },
            pull_requests: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              number: faker.datatype.number(),
              url: faker.random.words(),
              head: {
                ref: faker.random.words(),
                sha: faker.random.words(),
                repo: {
                  id: faker.datatype.number(),
                  url: faker.random.words(),
                  name: faker.random.words(),
                },
              },
              base: {
                ref: faker.random.words(),
                sha: faker.random.words(),
                repo: {
                  id: faker.datatype.number(),
                  url: faker.random.words(),
                  name: faker.random.words(),
                },
              },
            })),
            deployment: {
              url: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              task: faker.random.words(),
              original_environment: faker.random.words(),
              environment: faker.random.words(),
              description: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              statuses_url: faker.random.words(),
              repository_url: faker.random.words(),
              transient_environment: faker.datatype.boolean(),
              production_environment: faker.datatype.boolean(),
              performed_via_github_app: {
                id: faker.datatype.number(),
                slug: faker.random.words(),
                node_id: faker.random.words(),
                owner: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                name: faker.random.words(),
                description: faker.random.words(),
                external_url: faker.random.words(),
                html_url: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                permissions: {
                  issues: faker.random.words(),
                  checks: faker.random.words(),
                  metadata: faker.random.words(),
                  contents: faker.random.words(),
                  deployments: faker.random.words(),
                },
                events: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                installations_count: faker.datatype.number(),
                client_id: faker.random.words(),
                client_secret: faker.random.words(),
                webhook_secret: faker.random.words(),
                pem: faker.random.words(),
              },
            },
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/repos/:owner/:repo/check-runs/:check_run_id/annotations',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json(
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
              _ => ({
                path: faker.random.words(),
                start_line: faker.datatype.number(),
                end_line: faker.datatype.number(),
                start_column: faker.datatype.number(),
                end_column: faker.datatype.number(),
                annotation_level: faker.random.words(),
                title: faker.random.words(),
                message: faker.random.words(),
                raw_details: faker.random.words(),
                blob_href: faker.random.words(),
              })
            )
          ),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.post(
    '/repos/:owner/:repo/check-runs/:check_run_id/rerequest',
    (req, res, ctx) => {
      const resultArrray = [
        [ctx.status(201), ctx.json({})],
        [
          ctx.status(403),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.post('/repos/:owner/:repo/check-suites', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          head_branch: faker.random.words(),
          head_sha: faker.random.words(),
          status: faker.random.arrayElement([
            'queued',
            'in_progress',
            'completed',
          ]),
          conclusion: faker.random.arrayElement([
            'success',
            'failure',
            'neutral',
            'cancelled',
            'skipped',
            'timed_out',
            'action_required',
          ]),
          url: faker.random.words(),
          before: faker.random.words(),
          after: faker.random.words(),
          pull_requests: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            number: faker.datatype.number(),
            url: faker.random.words(),
            head: {
              ref: faker.random.words(),
              sha: faker.random.words(),
              repo: {
                id: faker.datatype.number(),
                url: faker.random.words(),
                name: faker.random.words(),
              },
            },
            base: {
              ref: faker.random.words(),
              sha: faker.random.words(),
              repo: {
                id: faker.datatype.number(),
                url: faker.random.words(),
                name: faker.random.words(),
              },
            },
          })),
          app: {
            id: faker.datatype.number(),
            slug: faker.random.words(),
            node_id: faker.random.words(),
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            name: faker.random.words(),
            description: faker.random.words(),
            external_url: faker.random.words(),
            html_url: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            permissions: {
              issues: faker.random.words(),
              checks: faker.random.words(),
              metadata: faker.random.words(),
              contents: faker.random.words(),
              deployments: faker.random.words(),
            },
            events: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            installations_count: faker.datatype.number(),
            client_id: faker.random.words(),
            client_secret: faker.random.words(),
            webhook_secret: faker.random.words(),
            pem: faker.random.words(),
          },
          repository: {
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            full_name: faker.random.words(),
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.random.words(),
            description: faker.random.words(),
            fork: faker.datatype.boolean(),
            url: faker.random.words(),
            archive_url: faker.random.words(),
            assignees_url: faker.random.words(),
            blobs_url: faker.random.words(),
            branches_url: faker.random.words(),
            collaborators_url: faker.random.words(),
            comments_url: faker.random.words(),
            commits_url: faker.random.words(),
            compare_url: faker.random.words(),
            contents_url: faker.random.words(),
            contributors_url: faker.random.words(),
            deployments_url: faker.random.words(),
            downloads_url: faker.random.words(),
            events_url: faker.random.words(),
            forks_url: faker.random.words(),
            git_commits_url: faker.random.words(),
            git_refs_url: faker.random.words(),
            git_tags_url: faker.random.words(),
            git_url: faker.random.words(),
            issue_comment_url: faker.random.words(),
            issue_events_url: faker.random.words(),
            issues_url: faker.random.words(),
            keys_url: faker.random.words(),
            labels_url: faker.random.words(),
            languages_url: faker.random.words(),
            merges_url: faker.random.words(),
            milestones_url: faker.random.words(),
            notifications_url: faker.random.words(),
            pulls_url: faker.random.words(),
            releases_url: faker.random.words(),
            ssh_url: faker.random.words(),
            stargazers_url: faker.random.words(),
            statuses_url: faker.random.words(),
            subscribers_url: faker.random.words(),
            subscription_url: faker.random.words(),
            tags_url: faker.random.words(),
            teams_url: faker.random.words(),
            trees_url: faker.random.words(),
            clone_url: faker.random.words(),
            mirror_url: faker.random.words(),
            hooks_url: faker.random.words(),
            svn_url: faker.random.words(),
            homepage: faker.random.words(),
            language: faker.random.words(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.random.words(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.random.words(),
            pushed_at: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              license: {
                key: faker.random.words(),
                name: faker.random.words(),
                url: faker.random.words(),
                spdx_id: faker.random.words(),
                node_id: faker.random.words(),
                html_url: faker.random.words(),
              },
              organization: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              allow_rebase_merge: faker.datatype.boolean(),
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                owner: {
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.random.words(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.random.words(),
              starred_at: faker.random.words(),
            },
            temp_clone_token: faker.random.words(),
            delete_branch_on_merge: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            code_of_conduct: {
              key: faker.random.words(),
              name: faker.random.words(),
              url: faker.random.words(),
              body: faker.random.words(),
              html_url: faker.random.words(),
            },
            license: {
              key: faker.random.words(),
              name: faker.random.words(),
              spdx_id: faker.random.words(),
              url: faker.random.words(),
              node_id: faker.random.words(),
            },
            forks: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            allow_forking: faker.datatype.boolean(),
          },
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          head_commit: {
            id: faker.random.words(),
            tree_id: faker.random.words(),
            message: faker.random.words(),
            timestamp: faker.random.words(),
            author: {
              name: faker.random.words(),
              email: faker.random.words(),
            },
            committer: {
              name: faker.random.words(),
              email: faker.random.words(),
            },
          },
          latest_check_runs_count: faker.datatype.number(),
          check_runs_url: faker.random.words(),
          rerequestable: faker.datatype.boolean(),
          runs_rerequestable: faker.datatype.boolean(),
        }),
      ],
      [
        ctx.status(201),
        ctx.json({
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          head_branch: faker.random.words(),
          head_sha: faker.random.words(),
          status: faker.random.arrayElement([
            'queued',
            'in_progress',
            'completed',
          ]),
          conclusion: faker.random.arrayElement([
            'success',
            'failure',
            'neutral',
            'cancelled',
            'skipped',
            'timed_out',
            'action_required',
          ]),
          url: faker.random.words(),
          before: faker.random.words(),
          after: faker.random.words(),
          pull_requests: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            number: faker.datatype.number(),
            url: faker.random.words(),
            head: {
              ref: faker.random.words(),
              sha: faker.random.words(),
              repo: {
                id: faker.datatype.number(),
                url: faker.random.words(),
                name: faker.random.words(),
              },
            },
            base: {
              ref: faker.random.words(),
              sha: faker.random.words(),
              repo: {
                id: faker.datatype.number(),
                url: faker.random.words(),
                name: faker.random.words(),
              },
            },
          })),
          app: {
            id: faker.datatype.number(),
            slug: faker.random.words(),
            node_id: faker.random.words(),
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            name: faker.random.words(),
            description: faker.random.words(),
            external_url: faker.random.words(),
            html_url: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            permissions: {
              issues: faker.random.words(),
              checks: faker.random.words(),
              metadata: faker.random.words(),
              contents: faker.random.words(),
              deployments: faker.random.words(),
            },
            events: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            installations_count: faker.datatype.number(),
            client_id: faker.random.words(),
            client_secret: faker.random.words(),
            webhook_secret: faker.random.words(),
            pem: faker.random.words(),
          },
          repository: {
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            full_name: faker.random.words(),
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.random.words(),
            description: faker.random.words(),
            fork: faker.datatype.boolean(),
            url: faker.random.words(),
            archive_url: faker.random.words(),
            assignees_url: faker.random.words(),
            blobs_url: faker.random.words(),
            branches_url: faker.random.words(),
            collaborators_url: faker.random.words(),
            comments_url: faker.random.words(),
            commits_url: faker.random.words(),
            compare_url: faker.random.words(),
            contents_url: faker.random.words(),
            contributors_url: faker.random.words(),
            deployments_url: faker.random.words(),
            downloads_url: faker.random.words(),
            events_url: faker.random.words(),
            forks_url: faker.random.words(),
            git_commits_url: faker.random.words(),
            git_refs_url: faker.random.words(),
            git_tags_url: faker.random.words(),
            git_url: faker.random.words(),
            issue_comment_url: faker.random.words(),
            issue_events_url: faker.random.words(),
            issues_url: faker.random.words(),
            keys_url: faker.random.words(),
            labels_url: faker.random.words(),
            languages_url: faker.random.words(),
            merges_url: faker.random.words(),
            milestones_url: faker.random.words(),
            notifications_url: faker.random.words(),
            pulls_url: faker.random.words(),
            releases_url: faker.random.words(),
            ssh_url: faker.random.words(),
            stargazers_url: faker.random.words(),
            statuses_url: faker.random.words(),
            subscribers_url: faker.random.words(),
            subscription_url: faker.random.words(),
            tags_url: faker.random.words(),
            teams_url: faker.random.words(),
            trees_url: faker.random.words(),
            clone_url: faker.random.words(),
            mirror_url: faker.random.words(),
            hooks_url: faker.random.words(),
            svn_url: faker.random.words(),
            homepage: faker.random.words(),
            language: faker.random.words(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.random.words(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.random.words(),
            pushed_at: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              license: {
                key: faker.random.words(),
                name: faker.random.words(),
                url: faker.random.words(),
                spdx_id: faker.random.words(),
                node_id: faker.random.words(),
                html_url: faker.random.words(),
              },
              organization: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              allow_rebase_merge: faker.datatype.boolean(),
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                owner: {
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.random.words(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.random.words(),
              starred_at: faker.random.words(),
            },
            temp_clone_token: faker.random.words(),
            delete_branch_on_merge: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            code_of_conduct: {
              key: faker.random.words(),
              name: faker.random.words(),
              url: faker.random.words(),
              body: faker.random.words(),
              html_url: faker.random.words(),
            },
            license: {
              key: faker.random.words(),
              name: faker.random.words(),
              spdx_id: faker.random.words(),
              url: faker.random.words(),
              node_id: faker.random.words(),
            },
            forks: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            allow_forking: faker.datatype.boolean(),
          },
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          head_commit: {
            id: faker.random.words(),
            tree_id: faker.random.words(),
            message: faker.random.words(),
            timestamp: faker.random.words(),
            author: {
              name: faker.random.words(),
              email: faker.random.words(),
            },
            committer: {
              name: faker.random.words(),
              email: faker.random.words(),
            },
          },
          latest_check_runs_count: faker.datatype.number(),
          check_runs_url: faker.random.words(),
          rerequestable: faker.datatype.boolean(),
          runs_rerequestable: faker.datatype.boolean(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.patch(
    '/repos/:owner/:repo/check-suites/preferences',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            preferences: {
              auto_trigger_checks: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => ({
                app_id: faker.datatype.number(),
                setting: faker.datatype.boolean(),
              })),
            },
            repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                license: {
                  key: faker.random.words(),
                  name: faker.random.words(),
                  url: faker.random.words(),
                  spdx_id: faker.random.words(),
                  node_id: faker.random.words(),
                  html_url: faker.random.words(),
                },
                organization: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                forks: faker.datatype.number(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                },
                owner: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                allow_rebase_merge: faker.datatype.boolean(),
                template_repository: {
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  name: faker.random.words(),
                  full_name: faker.random.words(),
                  owner: {
                    login: faker.random.words(),
                    id: faker.datatype.number(),
                    node_id: faker.random.words(),
                    avatar_url: faker.random.words(),
                    gravatar_id: faker.random.words(),
                    url: faker.random.words(),
                    html_url: faker.random.words(),
                    followers_url: faker.random.words(),
                    following_url: faker.random.words(),
                    gists_url: faker.random.words(),
                    starred_url: faker.random.words(),
                    subscriptions_url: faker.random.words(),
                    organizations_url: faker.random.words(),
                    repos_url: faker.random.words(),
                    events_url: faker.random.words(),
                    received_events_url: faker.random.words(),
                    type: faker.random.words(),
                    site_admin: faker.datatype.boolean(),
                  },
                  private: faker.datatype.boolean(),
                  html_url: faker.random.words(),
                  description: faker.random.words(),
                  fork: faker.datatype.boolean(),
                  url: faker.random.words(),
                  archive_url: faker.random.words(),
                  assignees_url: faker.random.words(),
                  blobs_url: faker.random.words(),
                  branches_url: faker.random.words(),
                  collaborators_url: faker.random.words(),
                  comments_url: faker.random.words(),
                  commits_url: faker.random.words(),
                  compare_url: faker.random.words(),
                  contents_url: faker.random.words(),
                  contributors_url: faker.random.words(),
                  deployments_url: faker.random.words(),
                  downloads_url: faker.random.words(),
                  events_url: faker.random.words(),
                  forks_url: faker.random.words(),
                  git_commits_url: faker.random.words(),
                  git_refs_url: faker.random.words(),
                  git_tags_url: faker.random.words(),
                  git_url: faker.random.words(),
                  issue_comment_url: faker.random.words(),
                  issue_events_url: faker.random.words(),
                  issues_url: faker.random.words(),
                  keys_url: faker.random.words(),
                  labels_url: faker.random.words(),
                  languages_url: faker.random.words(),
                  merges_url: faker.random.words(),
                  milestones_url: faker.random.words(),
                  notifications_url: faker.random.words(),
                  pulls_url: faker.random.words(),
                  releases_url: faker.random.words(),
                  ssh_url: faker.random.words(),
                  stargazers_url: faker.random.words(),
                  statuses_url: faker.random.words(),
                  subscribers_url: faker.random.words(),
                  subscription_url: faker.random.words(),
                  tags_url: faker.random.words(),
                  teams_url: faker.random.words(),
                  trees_url: faker.random.words(),
                  clone_url: faker.random.words(),
                  mirror_url: faker.random.words(),
                  hooks_url: faker.random.words(),
                  svn_url: faker.random.words(),
                  homepage: faker.random.words(),
                  language: faker.random.words(),
                  forks_count: faker.datatype.number(),
                  stargazers_count: faker.datatype.number(),
                  watchers_count: faker.datatype.number(),
                  size: faker.datatype.number(),
                  default_branch: faker.random.words(),
                  open_issues_count: faker.datatype.number(),
                  is_template: faker.datatype.boolean(),
                  topics: [
                    ...new Array(faker.datatype.number({ max: 100 })).keys(),
                  ].map(_ => faker.random.words()),
                  has_issues: faker.datatype.boolean(),
                  has_projects: faker.datatype.boolean(),
                  has_wiki: faker.datatype.boolean(),
                  has_pages: faker.datatype.boolean(),
                  has_downloads: faker.datatype.boolean(),
                  archived: faker.datatype.boolean(),
                  disabled: faker.datatype.boolean(),
                  visibility: faker.random.words(),
                  pushed_at: faker.random.words(),
                  created_at: faker.random.words(),
                  updated_at: faker.random.words(),
                  permissions: {
                    admin: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    pull: faker.datatype.boolean(),
                  },
                  allow_rebase_merge: faker.datatype.boolean(),
                  temp_clone_token: faker.random.words(),
                  allow_squash_merge: faker.datatype.boolean(),
                  allow_auto_merge: faker.datatype.boolean(),
                  delete_branch_on_merge: faker.datatype.boolean(),
                  allow_update_branch: faker.datatype.boolean(),
                  allow_merge_commit: faker.datatype.boolean(),
                  subscribers_count: faker.datatype.number(),
                  network_count: faker.datatype.number(),
                },
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                allow_forking: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
                open_issues: faker.datatype.number(),
                watchers: faker.datatype.number(),
                master_branch: faker.random.words(),
                starred_at: faker.random.words(),
              },
              temp_clone_token: faker.random.words(),
              delete_branch_on_merge: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              code_of_conduct: {
                key: faker.random.words(),
                name: faker.random.words(),
                url: faker.random.words(),
                body: faker.random.words(),
                html_url: faker.random.words(),
              },
              license: {
                key: faker.random.words(),
                name: faker.random.words(),
                spdx_id: faker.random.words(),
                url: faker.random.words(),
                node_id: faker.random.words(),
              },
              forks: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              allow_forking: faker.datatype.boolean(),
            },
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/repos/:owner/:repo/check-suites/:check_suite_id',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            head_branch: faker.random.words(),
            head_sha: faker.random.words(),
            status: faker.random.arrayElement([
              'queued',
              'in_progress',
              'completed',
            ]),
            conclusion: faker.random.arrayElement([
              'success',
              'failure',
              'neutral',
              'cancelled',
              'skipped',
              'timed_out',
              'action_required',
            ]),
            url: faker.random.words(),
            before: faker.random.words(),
            after: faker.random.words(),
            pull_requests: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              number: faker.datatype.number(),
              url: faker.random.words(),
              head: {
                ref: faker.random.words(),
                sha: faker.random.words(),
                repo: {
                  id: faker.datatype.number(),
                  url: faker.random.words(),
                  name: faker.random.words(),
                },
              },
              base: {
                ref: faker.random.words(),
                sha: faker.random.words(),
                repo: {
                  id: faker.datatype.number(),
                  url: faker.random.words(),
                  name: faker.random.words(),
                },
              },
            })),
            app: {
              id: faker.datatype.number(),
              slug: faker.random.words(),
              node_id: faker.random.words(),
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              name: faker.random.words(),
              description: faker.random.words(),
              external_url: faker.random.words(),
              html_url: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                issues: faker.random.words(),
                checks: faker.random.words(),
                metadata: faker.random.words(),
                contents: faker.random.words(),
                deployments: faker.random.words(),
              },
              events: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              installations_count: faker.datatype.number(),
              client_id: faker.random.words(),
              client_secret: faker.random.words(),
              webhook_secret: faker.random.words(),
              pem: faker.random.words(),
            },
            repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                license: {
                  key: faker.random.words(),
                  name: faker.random.words(),
                  url: faker.random.words(),
                  spdx_id: faker.random.words(),
                  node_id: faker.random.words(),
                  html_url: faker.random.words(),
                },
                organization: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                forks: faker.datatype.number(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                },
                owner: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                allow_rebase_merge: faker.datatype.boolean(),
                template_repository: {
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  name: faker.random.words(),
                  full_name: faker.random.words(),
                  owner: {
                    login: faker.random.words(),
                    id: faker.datatype.number(),
                    node_id: faker.random.words(),
                    avatar_url: faker.random.words(),
                    gravatar_id: faker.random.words(),
                    url: faker.random.words(),
                    html_url: faker.random.words(),
                    followers_url: faker.random.words(),
                    following_url: faker.random.words(),
                    gists_url: faker.random.words(),
                    starred_url: faker.random.words(),
                    subscriptions_url: faker.random.words(),
                    organizations_url: faker.random.words(),
                    repos_url: faker.random.words(),
                    events_url: faker.random.words(),
                    received_events_url: faker.random.words(),
                    type: faker.random.words(),
                    site_admin: faker.datatype.boolean(),
                  },
                  private: faker.datatype.boolean(),
                  html_url: faker.random.words(),
                  description: faker.random.words(),
                  fork: faker.datatype.boolean(),
                  url: faker.random.words(),
                  archive_url: faker.random.words(),
                  assignees_url: faker.random.words(),
                  blobs_url: faker.random.words(),
                  branches_url: faker.random.words(),
                  collaborators_url: faker.random.words(),
                  comments_url: faker.random.words(),
                  commits_url: faker.random.words(),
                  compare_url: faker.random.words(),
                  contents_url: faker.random.words(),
                  contributors_url: faker.random.words(),
                  deployments_url: faker.random.words(),
                  downloads_url: faker.random.words(),
                  events_url: faker.random.words(),
                  forks_url: faker.random.words(),
                  git_commits_url: faker.random.words(),
                  git_refs_url: faker.random.words(),
                  git_tags_url: faker.random.words(),
                  git_url: faker.random.words(),
                  issue_comment_url: faker.random.words(),
                  issue_events_url: faker.random.words(),
                  issues_url: faker.random.words(),
                  keys_url: faker.random.words(),
                  labels_url: faker.random.words(),
                  languages_url: faker.random.words(),
                  merges_url: faker.random.words(),
                  milestones_url: faker.random.words(),
                  notifications_url: faker.random.words(),
                  pulls_url: faker.random.words(),
                  releases_url: faker.random.words(),
                  ssh_url: faker.random.words(),
                  stargazers_url: faker.random.words(),
                  statuses_url: faker.random.words(),
                  subscribers_url: faker.random.words(),
                  subscription_url: faker.random.words(),
                  tags_url: faker.random.words(),
                  teams_url: faker.random.words(),
                  trees_url: faker.random.words(),
                  clone_url: faker.random.words(),
                  mirror_url: faker.random.words(),
                  hooks_url: faker.random.words(),
                  svn_url: faker.random.words(),
                  homepage: faker.random.words(),
                  language: faker.random.words(),
                  forks_count: faker.datatype.number(),
                  stargazers_count: faker.datatype.number(),
                  watchers_count: faker.datatype.number(),
                  size: faker.datatype.number(),
                  default_branch: faker.random.words(),
                  open_issues_count: faker.datatype.number(),
                  is_template: faker.datatype.boolean(),
                  topics: [
                    ...new Array(faker.datatype.number({ max: 100 })).keys(),
                  ].map(_ => faker.random.words()),
                  has_issues: faker.datatype.boolean(),
                  has_projects: faker.datatype.boolean(),
                  has_wiki: faker.datatype.boolean(),
                  has_pages: faker.datatype.boolean(),
                  has_downloads: faker.datatype.boolean(),
                  archived: faker.datatype.boolean(),
                  disabled: faker.datatype.boolean(),
                  visibility: faker.random.words(),
                  pushed_at: faker.random.words(),
                  created_at: faker.random.words(),
                  updated_at: faker.random.words(),
                  permissions: {
                    admin: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    pull: faker.datatype.boolean(),
                  },
                  allow_rebase_merge: faker.datatype.boolean(),
                  temp_clone_token: faker.random.words(),
                  allow_squash_merge: faker.datatype.boolean(),
                  allow_auto_merge: faker.datatype.boolean(),
                  delete_branch_on_merge: faker.datatype.boolean(),
                  allow_update_branch: faker.datatype.boolean(),
                  allow_merge_commit: faker.datatype.boolean(),
                  subscribers_count: faker.datatype.number(),
                  network_count: faker.datatype.number(),
                },
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                allow_forking: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
                open_issues: faker.datatype.number(),
                watchers: faker.datatype.number(),
                master_branch: faker.random.words(),
                starred_at: faker.random.words(),
              },
              temp_clone_token: faker.random.words(),
              delete_branch_on_merge: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              code_of_conduct: {
                key: faker.random.words(),
                name: faker.random.words(),
                url: faker.random.words(),
                body: faker.random.words(),
                html_url: faker.random.words(),
              },
              license: {
                key: faker.random.words(),
                name: faker.random.words(),
                spdx_id: faker.random.words(),
                url: faker.random.words(),
                node_id: faker.random.words(),
              },
              forks: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              allow_forking: faker.datatype.boolean(),
            },
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            head_commit: {
              id: faker.random.words(),
              tree_id: faker.random.words(),
              message: faker.random.words(),
              timestamp: faker.random.words(),
              author: {
                name: faker.random.words(),
                email: faker.random.words(),
              },
              committer: {
                name: faker.random.words(),
                email: faker.random.words(),
              },
            },
            latest_check_runs_count: faker.datatype.number(),
            check_runs_url: faker.random.words(),
            rerequestable: faker.datatype.boolean(),
            runs_rerequestable: faker.datatype.boolean(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/repos/:owner/:repo/check-suites/:check_suite_id/check-runs',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            total_count: faker.datatype.number(),
            check_runs: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              head_sha: faker.random.words(),
              node_id: faker.random.words(),
              external_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              details_url: faker.random.words(),
              status: faker.random.arrayElement([
                'queued',
                'in_progress',
                'completed',
              ]),
              conclusion: faker.random.arrayElement([
                'success',
                'failure',
                'neutral',
                'cancelled',
                'skipped',
                'timed_out',
                'action_required',
              ]),
              started_at: faker.random.words(),
              completed_at: faker.random.words(),
              output: {
                title: faker.random.words(),
                summary: faker.random.words(),
                text: faker.random.words(),
                annotations_count: faker.datatype.number(),
                annotations_url: faker.random.words(),
              },
              name: faker.random.words(),
              check_suite: {
                id: faker.datatype.number(),
              },
              app: {
                id: faker.datatype.number(),
                slug: faker.random.words(),
                node_id: faker.random.words(),
                owner: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                name: faker.random.words(),
                description: faker.random.words(),
                external_url: faker.random.words(),
                html_url: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                permissions: {
                  issues: faker.random.words(),
                  checks: faker.random.words(),
                  metadata: faker.random.words(),
                  contents: faker.random.words(),
                  deployments: faker.random.words(),
                },
                events: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                installations_count: faker.datatype.number(),
                client_id: faker.random.words(),
                client_secret: faker.random.words(),
                webhook_secret: faker.random.words(),
                pem: faker.random.words(),
              },
              pull_requests: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => ({
                id: faker.datatype.number(),
                number: faker.datatype.number(),
                url: faker.random.words(),
                head: {
                  ref: faker.random.words(),
                  sha: faker.random.words(),
                  repo: {
                    id: faker.datatype.number(),
                    url: faker.random.words(),
                    name: faker.random.words(),
                  },
                },
                base: {
                  ref: faker.random.words(),
                  sha: faker.random.words(),
                  repo: {
                    id: faker.datatype.number(),
                    url: faker.random.words(),
                    name: faker.random.words(),
                  },
                },
              })),
              deployment: {
                url: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                task: faker.random.words(),
                original_environment: faker.random.words(),
                environment: faker.random.words(),
                description: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                statuses_url: faker.random.words(),
                repository_url: faker.random.words(),
                transient_environment: faker.datatype.boolean(),
                production_environment: faker.datatype.boolean(),
                performed_via_github_app: {
                  id: faker.datatype.number(),
                  slug: faker.random.words(),
                  node_id: faker.random.words(),
                  owner: {
                    name: faker.random.words(),
                    email: faker.random.words(),
                    login: faker.random.words(),
                    id: faker.datatype.number(),
                    node_id: faker.random.words(),
                    avatar_url: faker.random.words(),
                    gravatar_id: faker.random.words(),
                    url: faker.random.words(),
                    html_url: faker.random.words(),
                    followers_url: faker.random.words(),
                    following_url: faker.random.words(),
                    gists_url: faker.random.words(),
                    starred_url: faker.random.words(),
                    subscriptions_url: faker.random.words(),
                    organizations_url: faker.random.words(),
                    repos_url: faker.random.words(),
                    events_url: faker.random.words(),
                    received_events_url: faker.random.words(),
                    type: faker.random.words(),
                    site_admin: faker.datatype.boolean(),
                    starred_at: faker.random.words(),
                  },
                  name: faker.random.words(),
                  description: faker.random.words(),
                  external_url: faker.random.words(),
                  html_url: faker.random.words(),
                  created_at: faker.random.words(),
                  updated_at: faker.random.words(),
                  permissions: {
                    issues: faker.random.words(),
                    checks: faker.random.words(),
                    metadata: faker.random.words(),
                    contents: faker.random.words(),
                    deployments: faker.random.words(),
                  },
                  events: [
                    ...new Array(faker.datatype.number({ max: 100 })).keys(),
                  ].map(_ => faker.random.words()),
                  installations_count: faker.datatype.number(),
                  client_id: faker.random.words(),
                  client_secret: faker.random.words(),
                  webhook_secret: faker.random.words(),
                  pem: faker.random.words(),
                },
              },
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.post(
    '/repos/:owner/:repo/check-suites/:check_suite_id/rerequest',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(201), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get('/repos/:owner/:repo/code-scanning/alerts', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            number: {},
            created_at: {},
            url: {},
            html_url: {},
            instances_url: {},
            state: {},
            dismissed_by: {},
            dismissed_at: {},
            dismissed_reason: {},
            rule: {},
            tool: {},
            most_recent_instance: {},
          }))
        ),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(503),
        ctx.json({
          code: faker.random.words(),
          message: faker.random.words(),
          documentation_url: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get(
    '/repos/:owner/:repo/code-scanning/alerts/:alert_number',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            number: faker.datatype.number(),
            created_at: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            instances_url: faker.random.words(),
            state: faker.random.arrayElement([
              'open',
              'closed',
              'dismissed',
              'fixed',
            ]),
            dismissed_by: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            dismissed_at: faker.random.words(),
            dismissed_reason: faker.random.arrayElement([
              null,
              'false positive',
              "won't fix",
              'used in tests',
            ]),
            rule: {
              id: faker.random.words(),
              name: faker.random.words(),
              severity: faker.random.arrayElement([
                'none',
                'note',
                'warning',
                'error',
              ]),
              security_severity_level: faker.random.arrayElement([
                'low',
                'medium',
                'high',
                'critical',
              ]),
              description: faker.random.words(),
              full_description: faker.random.words(),
              tags: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              help: faker.random.words(),
            },
            tool: {
              name: faker.random.words(),
              version: faker.random.words(),
              guid: faker.random.words(),
            },
            most_recent_instance: {
              ref: faker.random.words(),
              analysis_key: faker.random.words(),
              environment: faker.random.words(),
              category: faker.random.words(),
              state: faker.random.arrayElement([
                'open',
                'closed',
                'dismissed',
                'fixed',
              ]),
              commit_sha: faker.random.words(),
              message: {
                text: faker.random.words(),
              },
              location: {
                path: faker.random.words(),
                start_line: faker.datatype.number(),
                end_line: faker.datatype.number(),
                start_column: faker.datatype.number(),
                end_column: faker.datatype.number(),
              },
              html_url: faker.random.words(),
              classifications: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ =>
                faker.random.arrayElement([
                  'source',
                  'generated',
                  'test',
                  'library',
                ])
              ),
            },
          }),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(503),
          ctx.json({
            code: faker.random.words(),
            message: faker.random.words(),
            documentation_url: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.patch(
    '/repos/:owner/:repo/code-scanning/alerts/:alert_number',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            number: faker.datatype.number(),
            created_at: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            instances_url: faker.random.words(),
            state: faker.random.arrayElement([
              'open',
              'closed',
              'dismissed',
              'fixed',
            ]),
            dismissed_by: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            dismissed_at: faker.random.words(),
            dismissed_reason: faker.random.arrayElement([
              null,
              'false positive',
              "won't fix",
              'used in tests',
            ]),
            rule: {
              id: faker.random.words(),
              name: faker.random.words(),
              severity: faker.random.arrayElement([
                'none',
                'note',
                'warning',
                'error',
              ]),
              security_severity_level: faker.random.arrayElement([
                'low',
                'medium',
                'high',
                'critical',
              ]),
              description: faker.random.words(),
              full_description: faker.random.words(),
              tags: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              help: faker.random.words(),
            },
            tool: {
              name: faker.random.words(),
              version: faker.random.words(),
              guid: faker.random.words(),
            },
            most_recent_instance: {
              ref: faker.random.words(),
              analysis_key: faker.random.words(),
              environment: faker.random.words(),
              category: faker.random.words(),
              state: faker.random.arrayElement([
                'open',
                'closed',
                'dismissed',
                'fixed',
              ]),
              commit_sha: faker.random.words(),
              message: {
                text: faker.random.words(),
              },
              location: {
                path: faker.random.words(),
                start_line: faker.datatype.number(),
                end_line: faker.datatype.number(),
                start_column: faker.datatype.number(),
                end_column: faker.datatype.number(),
              },
              html_url: faker.random.words(),
              classifications: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ =>
                faker.random.arrayElement([
                  'source',
                  'generated',
                  'test',
                  'library',
                ])
              ),
            },
          }),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(503),
          ctx.json({
            code: faker.random.words(),
            message: faker.random.words(),
            documentation_url: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/repos/:owner/:repo/code-scanning/alerts/:alert_number/instances',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json(
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
              _ => ({
                ref: faker.random.words(),
                analysis_key: faker.random.words(),
                environment: faker.random.words(),
                category: faker.random.words(),
                state: faker.random.arrayElement([
                  'open',
                  'closed',
                  'dismissed',
                  'fixed',
                ]),
                commit_sha: faker.random.words(),
                message: {
                  text: faker.random.words(),
                },
                location: {
                  path: faker.random.words(),
                  start_line: faker.datatype.number(),
                  end_line: faker.datatype.number(),
                  start_column: faker.datatype.number(),
                  end_column: faker.datatype.number(),
                },
                html_url: faker.random.words(),
                classifications: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ =>
                  faker.random.arrayElement([
                    'source',
                    'generated',
                    'test',
                    'library',
                  ])
                ),
              })
            )
          ),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(503),
          ctx.json({
            code: faker.random.words(),
            message: faker.random.words(),
            documentation_url: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get('/repos/:owner/:repo/code-scanning/analyses', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            ref: faker.random.words(),
            commit_sha: faker.random.words(),
            analysis_key: faker.random.words(),
            environment: faker.random.words(),
            category: faker.random.words(),
            error: faker.random.words(),
            created_at: faker.random.words(),
            results_count: faker.datatype.number(),
            rules_count: faker.datatype.number(),
            id: faker.datatype.number(),
            url: faker.random.words(),
            sarif_id: faker.random.words(),
            tool: {
              name: faker.random.words(),
              version: faker.random.words(),
              guid: faker.random.words(),
            },
            deletable: faker.datatype.boolean(),
            warning: faker.random.words(),
          }))
        ),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(503),
        ctx.json({
          code: faker.random.words(),
          message: faker.random.words(),
          documentation_url: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get(
    '/repos/:owner/:repo/code-scanning/analyses/:analysis_id',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            ref: faker.random.words(),
            commit_sha: faker.random.words(),
            analysis_key: faker.random.words(),
            environment: faker.random.words(),
            category: faker.random.words(),
            error: faker.random.words(),
            created_at: faker.random.words(),
            results_count: faker.datatype.number(),
            rules_count: faker.datatype.number(),
            id: faker.datatype.number(),
            url: faker.random.words(),
            sarif_id: faker.random.words(),
            tool: {
              name: faker.random.words(),
              version: faker.random.words(),
              guid: faker.random.words(),
            },
            deletable: faker.datatype.boolean(),
            warning: faker.random.words(),
          }),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(503),
          ctx.json({
            code: faker.random.words(),
            message: faker.random.words(),
            documentation_url: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/repos/:owner/:repo/code-scanning/analyses/:analysis_id',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            next_analysis_url: faker.random.words(),
            confirm_delete_url: faker.random.words(),
          }),
        ],
        [
          ctx.status(400),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(503),
          ctx.json({
            code: faker.random.words(),
            message: faker.random.words(),
            documentation_url: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.post('/repos/:owner/:repo/code-scanning/sarifs', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(202),
        ctx.json({
          id: faker.random.words(),
          url: faker.random.words(),
        }),
      ],
      [ctx.status(400), ctx.json({})],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [ctx.status(413), ctx.json({})],
      [
        ctx.status(503),
        ctx.json({
          code: faker.random.words(),
          message: faker.random.words(),
          documentation_url: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get(
    '/repos/:owner/:repo/code-scanning/sarifs/:sarif_id',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            processing_status: faker.random.arrayElement([
              'pending',
              'complete',
            ]),
            analyses_url: faker.random.words(),
          }),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [ctx.status(404), ctx.json({})],
        [
          ctx.status(503),
          ctx.json({
            code: faker.random.words(),
            message: faker.random.words(),
            documentation_url: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get('/repos/:owner/:repo/collaborators', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            login: faker.random.words(),
            id: faker.datatype.number(),
            email: faker.random.words(),
            name: faker.random.words(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            permissions: {
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              admin: faker.datatype.boolean(),
            },
          }))
        ),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/collaborators/:username', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [ctx.status(404), ctx.json({})],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.put('/repos/:owner/:repo/collaborators/:username', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json({
          id: faker.datatype.number(),
          repository: {
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            full_name: faker.random.words(),
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.random.words(),
            description: faker.random.words(),
            fork: faker.datatype.boolean(),
            url: faker.random.words(),
            archive_url: faker.random.words(),
            assignees_url: faker.random.words(),
            blobs_url: faker.random.words(),
            branches_url: faker.random.words(),
            collaborators_url: faker.random.words(),
            comments_url: faker.random.words(),
            commits_url: faker.random.words(),
            compare_url: faker.random.words(),
            contents_url: faker.random.words(),
            contributors_url: faker.random.words(),
            deployments_url: faker.random.words(),
            downloads_url: faker.random.words(),
            events_url: faker.random.words(),
            forks_url: faker.random.words(),
            git_commits_url: faker.random.words(),
            git_refs_url: faker.random.words(),
            git_tags_url: faker.random.words(),
            git_url: faker.random.words(),
            issue_comment_url: faker.random.words(),
            issue_events_url: faker.random.words(),
            issues_url: faker.random.words(),
            keys_url: faker.random.words(),
            labels_url: faker.random.words(),
            languages_url: faker.random.words(),
            merges_url: faker.random.words(),
            milestones_url: faker.random.words(),
            notifications_url: faker.random.words(),
            pulls_url: faker.random.words(),
            releases_url: faker.random.words(),
            ssh_url: faker.random.words(),
            stargazers_url: faker.random.words(),
            statuses_url: faker.random.words(),
            subscribers_url: faker.random.words(),
            subscription_url: faker.random.words(),
            tags_url: faker.random.words(),
            teams_url: faker.random.words(),
            trees_url: faker.random.words(),
            clone_url: faker.random.words(),
            mirror_url: faker.random.words(),
            hooks_url: faker.random.words(),
            svn_url: faker.random.words(),
            homepage: faker.random.words(),
            language: faker.random.words(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.random.words(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.random.words(),
            pushed_at: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              license: {
                key: faker.random.words(),
                name: faker.random.words(),
                url: faker.random.words(),
                spdx_id: faker.random.words(),
                node_id: faker.random.words(),
                html_url: faker.random.words(),
              },
              organization: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              allow_rebase_merge: faker.datatype.boolean(),
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                owner: {
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.random.words(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.random.words(),
              starred_at: faker.random.words(),
            },
            temp_clone_token: faker.random.words(),
            delete_branch_on_merge: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            code_of_conduct: {
              key: faker.random.words(),
              name: faker.random.words(),
              url: faker.random.words(),
              body: faker.random.words(),
              html_url: faker.random.words(),
            },
            license: {
              key: faker.random.words(),
              name: faker.random.words(),
              spdx_id: faker.random.words(),
              url: faker.random.words(),
              node_id: faker.random.words(),
            },
            forks: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            allow_forking: faker.datatype.boolean(),
          },
          invitee: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          inviter: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          permissions: faker.random.arrayElement([
            'read',
            'write',
            'admin',
            'triage',
            'maintain',
          ]),
          created_at: faker.random.words(),
          expired: faker.datatype.boolean(),
          url: faker.random.words(),
          html_url: faker.random.words(),
          node_id: faker.random.words(),
        }),
      ],
      [ctx.status(204), ctx.json({})],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete(
    '/repos/:owner/:repo/collaborators/:username',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/repos/:owner/:repo/collaborators/:username/permission',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            permission: faker.random.words(),
            user: {
              login: faker.random.words(),
              id: faker.datatype.number(),
              email: faker.random.words(),
              name: faker.random.words(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              permissions: {
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                admin: faker.datatype.boolean(),
              },
            },
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get('/repos/:owner/:repo/comments', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            html_url: faker.random.words(),
            url: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            body: faker.random.words(),
            path: faker.random.words(),
            position: faker.datatype.number(),
            line: faker.datatype.number(),
            commit_id: faker.random.words(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            author_association: faker.random.arrayElement([
              'COLLABORATOR',
              'CONTRIBUTOR',
              'FIRST_TIMER',
              'FIRST_TIME_CONTRIBUTOR',
              'MANNEQUIN',
              'MEMBER',
              'NONE',
              'OWNER',
            ]),
            reactions: {
              url: faker.random.words(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/comments/:comment_id', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          html_url: faker.random.words(),
          url: faker.random.words(),
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          body: faker.random.words(),
          path: faker.random.words(),
          position: faker.datatype.number(),
          line: faker.datatype.number(),
          commit_id: faker.random.words(),
          user: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          author_association: faker.random.arrayElement([
            'COLLABORATOR',
            'CONTRIBUTOR',
            'FIRST_TIMER',
            'FIRST_TIME_CONTRIBUTOR',
            'MANNEQUIN',
            'MEMBER',
            'NONE',
            'OWNER',
          ]),
          reactions: {
            url: faker.random.words(),
            total_count: faker.datatype.number(),
            '+1': faker.datatype.number(),
            '-1': faker.datatype.number(),
            laugh: faker.datatype.number(),
            confused: faker.datatype.number(),
            heart: faker.datatype.number(),
            hooray: faker.datatype.number(),
            eyes: faker.datatype.number(),
            rocket: faker.datatype.number(),
          },
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.patch('/repos/:owner/:repo/comments/:comment_id', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          html_url: faker.random.words(),
          url: faker.random.words(),
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          body: faker.random.words(),
          path: faker.random.words(),
          position: faker.datatype.number(),
          line: faker.datatype.number(),
          commit_id: faker.random.words(),
          user: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          author_association: faker.random.arrayElement([
            'COLLABORATOR',
            'CONTRIBUTOR',
            'FIRST_TIMER',
            'FIRST_TIME_CONTRIBUTOR',
            'MANNEQUIN',
            'MEMBER',
            'NONE',
            'OWNER',
          ]),
          reactions: {
            url: faker.random.words(),
            total_count: faker.datatype.number(),
            '+1': faker.datatype.number(),
            '-1': faker.datatype.number(),
            laugh: faker.datatype.number(),
            confused: faker.datatype.number(),
            heart: faker.datatype.number(),
            hooray: faker.datatype.number(),
            eyes: faker.datatype.number(),
            rocket: faker.datatype.number(),
          },
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/repos/:owner/:repo/comments/:comment_id', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get(
    '/repos/:owner/:repo/comments/:comment_id/reactions',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json(
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
              _ => ({
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                user: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                content: faker.random.arrayElement([
                  '+1',
                  '-1',
                  'laugh',
                  'confused',
                  'heart',
                  'hooray',
                  'rocket',
                  'eyes',
                ]),
                created_at: faker.random.words(),
              })
            )
          ),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.post(
    '/repos/:owner/:repo/comments/:comment_id/reactions',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            content: faker.random.arrayElement([
              '+1',
              '-1',
              'laugh',
              'confused',
              'heart',
              'hooray',
              'rocket',
              'eyes',
            ]),
            created_at: faker.random.words(),
          }),
        ],
        [
          ctx.status(201),
          ctx.json({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            content: faker.random.arrayElement([
              '+1',
              '-1',
              'laugh',
              'confused',
              'heart',
              'hooray',
              'rocket',
              'eyes',
            ]),
            created_at: faker.random.words(),
          }),
        ],
        [
          ctx.status(415),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            errors: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              resource: faker.random.words(),
              field: faker.random.words(),
              message: faker.random.words(),
              code: faker.random.words(),
              index: faker.datatype.number(),
              value: {},
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/repos/:owner/:repo/comments/:comment_id/reactions/:reaction_id',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get('/repos/:owner/:repo/commits', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            url: faker.random.words(),
            sha: faker.random.words(),
            node_id: faker.random.words(),
            html_url: faker.random.words(),
            comments_url: faker.random.words(),
            commit: {
              url: faker.random.words(),
              author: {
                name: faker.random.words(),
                email: faker.random.words(),
                date: faker.random.words(),
              },
              committer: {
                name: faker.random.words(),
                email: faker.random.words(),
                date: faker.random.words(),
              },
              message: faker.random.words(),
              comment_count: faker.datatype.number(),
              tree: {
                sha: faker.random.words(),
                url: faker.random.words(),
              },
              verification: {
                verified: faker.datatype.boolean(),
                reason: faker.random.words(),
                payload: faker.random.words(),
                signature: faker.random.words(),
              },
            },
            author: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            committer: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            parents: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              sha: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
            })),
            stats: {
              additions: faker.datatype.number(),
              deletions: faker.datatype.number(),
              total: faker.datatype.number(),
            },
            files: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              sha: faker.random.words(),
              filename: faker.random.words(),
              status: faker.random.arrayElement([
                'added',
                'removed',
                'modified',
                'renamed',
                'copied',
                'changed',
                'unchanged',
              ]),
              additions: faker.datatype.number(),
              deletions: faker.datatype.number(),
              changes: faker.datatype.number(),
              blob_url: faker.random.words(),
              raw_url: faker.random.words(),
              contents_url: faker.random.words(),
              patch: faker.random.words(),
              previous_filename: faker.random.words(),
            })),
          }))
        ),
      ],
      [
        ctx.status(400),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(409),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(500),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get(
    '/repos/:owner/:repo/commits/:commit_sha/branches-where-head',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json(
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
              _ => ({
                name: faker.random.words(),
                commit: {
                  sha: faker.random.words(),
                  url: faker.random.words(),
                },
                protected: faker.datatype.boolean(),
              })
            )
          ),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            errors: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              resource: faker.random.words(),
              field: faker.random.words(),
              message: faker.random.words(),
              code: faker.random.words(),
              index: faker.datatype.number(),
              value: {},
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/repos/:owner/:repo/commits/:commit_sha/comments',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json(
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
              _ => ({
                html_url: faker.random.words(),
                url: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                body: faker.random.words(),
                path: faker.random.words(),
                position: faker.datatype.number(),
                line: faker.datatype.number(),
                commit_id: faker.random.words(),
                user: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                author_association: faker.random.arrayElement([
                  'COLLABORATOR',
                  'CONTRIBUTOR',
                  'FIRST_TIMER',
                  'FIRST_TIME_CONTRIBUTOR',
                  'MANNEQUIN',
                  'MEMBER',
                  'NONE',
                  'OWNER',
                ]),
                reactions: {
                  url: faker.random.words(),
                  total_count: faker.datatype.number(),
                  '+1': faker.datatype.number(),
                  '-1': faker.datatype.number(),
                  laugh: faker.datatype.number(),
                  confused: faker.datatype.number(),
                  heart: faker.datatype.number(),
                  hooray: faker.datatype.number(),
                  eyes: faker.datatype.number(),
                  rocket: faker.datatype.number(),
                },
              })
            )
          ),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.post(
    '/repos/:owner/:repo/commits/:commit_sha/comments',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(201),
          ctx.json({
            html_url: faker.random.words(),
            url: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            body: faker.random.words(),
            path: faker.random.words(),
            position: faker.datatype.number(),
            line: faker.datatype.number(),
            commit_id: faker.random.words(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            author_association: faker.random.arrayElement([
              'COLLABORATOR',
              'CONTRIBUTOR',
              'FIRST_TIMER',
              'FIRST_TIME_CONTRIBUTOR',
              'MANNEQUIN',
              'MEMBER',
              'NONE',
              'OWNER',
            ]),
            reactions: {
              url: faker.random.words(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            errors: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              resource: faker.random.words(),
              field: faker.random.words(),
              message: faker.random.words(),
              code: faker.random.words(),
              index: faker.datatype.number(),
              value: {},
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get('/repos/:owner/:repo/commits/:commit_sha/pulls', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            url: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            html_url: faker.random.words(),
            diff_url: faker.random.words(),
            patch_url: faker.random.words(),
            issue_url: faker.random.words(),
            commits_url: faker.random.words(),
            review_comments_url: faker.random.words(),
            review_comment_url: faker.random.words(),
            comments_url: faker.random.words(),
            statuses_url: faker.random.words(),
            number: faker.datatype.number(),
            state: faker.random.words(),
            locked: faker.datatype.boolean(),
            title: faker.random.words(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            body: faker.random.words(),
            labels: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              url: faker.random.words(),
              name: faker.random.words(),
              description: faker.random.words(),
              color: faker.random.words(),
              default: faker.datatype.boolean(),
            })),
            milestone: {
              url: faker.random.words(),
              html_url: faker.random.words(),
              labels_url: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              number: faker.datatype.number(),
              state: faker.random.arrayElement(['open', 'closed']),
              title: faker.random.words(),
              description: faker.random.words(),
              creator: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              open_issues: faker.datatype.number(),
              closed_issues: faker.datatype.number(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              closed_at: faker.random.words(),
              due_on: faker.random.words(),
            },
            active_lock_reason: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            closed_at: faker.random.words(),
            merged_at: faker.random.words(),
            merge_commit_sha: faker.random.words(),
            assignee: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            assignees: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            })),
            requested_reviewers: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            })),
            requested_teams: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              slug: faker.random.words(),
              description: faker.random.words(),
              privacy: faker.random.words(),
              permission: faker.random.words(),
              permissions: {
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                admin: faker.datatype.boolean(),
              },
              url: faker.random.words(),
              html_url: faker.random.words(),
              members_url: faker.random.words(),
              repositories_url: faker.random.words(),
              parent: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                url: faker.random.words(),
                members_url: faker.random.words(),
                name: faker.random.words(),
                description: faker.random.words(),
                permission: faker.random.words(),
                privacy: faker.random.words(),
                html_url: faker.random.words(),
                repositories_url: faker.random.words(),
                slug: faker.random.words(),
                ldap_dn: faker.random.words(),
              },
            })),
            head: {
              label: faker.random.words(),
              ref: faker.random.words(),
              repo: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                license: {
                  key: faker.random.words(),
                  name: faker.random.words(),
                  url: faker.random.words(),
                  spdx_id: faker.random.words(),
                  node_id: faker.random.words(),
                  html_url: faker.random.words(),
                },
                organization: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                forks: faker.datatype.number(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                },
                owner: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                allow_rebase_merge: faker.datatype.boolean(),
                template_repository: {
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  name: faker.random.words(),
                  full_name: faker.random.words(),
                  owner: {
                    login: faker.random.words(),
                    id: faker.datatype.number(),
                    node_id: faker.random.words(),
                    avatar_url: faker.random.words(),
                    gravatar_id: faker.random.words(),
                    url: faker.random.words(),
                    html_url: faker.random.words(),
                    followers_url: faker.random.words(),
                    following_url: faker.random.words(),
                    gists_url: faker.random.words(),
                    starred_url: faker.random.words(),
                    subscriptions_url: faker.random.words(),
                    organizations_url: faker.random.words(),
                    repos_url: faker.random.words(),
                    events_url: faker.random.words(),
                    received_events_url: faker.random.words(),
                    type: faker.random.words(),
                    site_admin: faker.datatype.boolean(),
                  },
                  private: faker.datatype.boolean(),
                  html_url: faker.random.words(),
                  description: faker.random.words(),
                  fork: faker.datatype.boolean(),
                  url: faker.random.words(),
                  archive_url: faker.random.words(),
                  assignees_url: faker.random.words(),
                  blobs_url: faker.random.words(),
                  branches_url: faker.random.words(),
                  collaborators_url: faker.random.words(),
                  comments_url: faker.random.words(),
                  commits_url: faker.random.words(),
                  compare_url: faker.random.words(),
                  contents_url: faker.random.words(),
                  contributors_url: faker.random.words(),
                  deployments_url: faker.random.words(),
                  downloads_url: faker.random.words(),
                  events_url: faker.random.words(),
                  forks_url: faker.random.words(),
                  git_commits_url: faker.random.words(),
                  git_refs_url: faker.random.words(),
                  git_tags_url: faker.random.words(),
                  git_url: faker.random.words(),
                  issue_comment_url: faker.random.words(),
                  issue_events_url: faker.random.words(),
                  issues_url: faker.random.words(),
                  keys_url: faker.random.words(),
                  labels_url: faker.random.words(),
                  languages_url: faker.random.words(),
                  merges_url: faker.random.words(),
                  milestones_url: faker.random.words(),
                  notifications_url: faker.random.words(),
                  pulls_url: faker.random.words(),
                  releases_url: faker.random.words(),
                  ssh_url: faker.random.words(),
                  stargazers_url: faker.random.words(),
                  statuses_url: faker.random.words(),
                  subscribers_url: faker.random.words(),
                  subscription_url: faker.random.words(),
                  tags_url: faker.random.words(),
                  teams_url: faker.random.words(),
                  trees_url: faker.random.words(),
                  clone_url: faker.random.words(),
                  mirror_url: faker.random.words(),
                  hooks_url: faker.random.words(),
                  svn_url: faker.random.words(),
                  homepage: faker.random.words(),
                  language: faker.random.words(),
                  forks_count: faker.datatype.number(),
                  stargazers_count: faker.datatype.number(),
                  watchers_count: faker.datatype.number(),
                  size: faker.datatype.number(),
                  default_branch: faker.random.words(),
                  open_issues_count: faker.datatype.number(),
                  is_template: faker.datatype.boolean(),
                  topics: [
                    ...new Array(faker.datatype.number({ max: 100 })).keys(),
                  ].map(_ => faker.random.words()),
                  has_issues: faker.datatype.boolean(),
                  has_projects: faker.datatype.boolean(),
                  has_wiki: faker.datatype.boolean(),
                  has_pages: faker.datatype.boolean(),
                  has_downloads: faker.datatype.boolean(),
                  archived: faker.datatype.boolean(),
                  disabled: faker.datatype.boolean(),
                  visibility: faker.random.words(),
                  pushed_at: faker.random.words(),
                  created_at: faker.random.words(),
                  updated_at: faker.random.words(),
                  permissions: {
                    admin: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    pull: faker.datatype.boolean(),
                  },
                  allow_rebase_merge: faker.datatype.boolean(),
                  temp_clone_token: faker.random.words(),
                  allow_squash_merge: faker.datatype.boolean(),
                  allow_auto_merge: faker.datatype.boolean(),
                  delete_branch_on_merge: faker.datatype.boolean(),
                  allow_update_branch: faker.datatype.boolean(),
                  allow_merge_commit: faker.datatype.boolean(),
                  subscribers_count: faker.datatype.number(),
                  network_count: faker.datatype.number(),
                },
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                allow_forking: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
                open_issues: faker.datatype.number(),
                watchers: faker.datatype.number(),
                master_branch: faker.random.words(),
                starred_at: faker.random.words(),
              },
              sha: faker.random.words(),
              user: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
            },
            base: {
              label: faker.random.words(),
              ref: faker.random.words(),
              repo: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                license: {
                  key: faker.random.words(),
                  name: faker.random.words(),
                  url: faker.random.words(),
                  spdx_id: faker.random.words(),
                  node_id: faker.random.words(),
                  html_url: faker.random.words(),
                },
                organization: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                forks: faker.datatype.number(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                },
                owner: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                allow_rebase_merge: faker.datatype.boolean(),
                template_repository: {
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  name: faker.random.words(),
                  full_name: faker.random.words(),
                  owner: {
                    login: faker.random.words(),
                    id: faker.datatype.number(),
                    node_id: faker.random.words(),
                    avatar_url: faker.random.words(),
                    gravatar_id: faker.random.words(),
                    url: faker.random.words(),
                    html_url: faker.random.words(),
                    followers_url: faker.random.words(),
                    following_url: faker.random.words(),
                    gists_url: faker.random.words(),
                    starred_url: faker.random.words(),
                    subscriptions_url: faker.random.words(),
                    organizations_url: faker.random.words(),
                    repos_url: faker.random.words(),
                    events_url: faker.random.words(),
                    received_events_url: faker.random.words(),
                    type: faker.random.words(),
                    site_admin: faker.datatype.boolean(),
                  },
                  private: faker.datatype.boolean(),
                  html_url: faker.random.words(),
                  description: faker.random.words(),
                  fork: faker.datatype.boolean(),
                  url: faker.random.words(),
                  archive_url: faker.random.words(),
                  assignees_url: faker.random.words(),
                  blobs_url: faker.random.words(),
                  branches_url: faker.random.words(),
                  collaborators_url: faker.random.words(),
                  comments_url: faker.random.words(),
                  commits_url: faker.random.words(),
                  compare_url: faker.random.words(),
                  contents_url: faker.random.words(),
                  contributors_url: faker.random.words(),
                  deployments_url: faker.random.words(),
                  downloads_url: faker.random.words(),
                  events_url: faker.random.words(),
                  forks_url: faker.random.words(),
                  git_commits_url: faker.random.words(),
                  git_refs_url: faker.random.words(),
                  git_tags_url: faker.random.words(),
                  git_url: faker.random.words(),
                  issue_comment_url: faker.random.words(),
                  issue_events_url: faker.random.words(),
                  issues_url: faker.random.words(),
                  keys_url: faker.random.words(),
                  labels_url: faker.random.words(),
                  languages_url: faker.random.words(),
                  merges_url: faker.random.words(),
                  milestones_url: faker.random.words(),
                  notifications_url: faker.random.words(),
                  pulls_url: faker.random.words(),
                  releases_url: faker.random.words(),
                  ssh_url: faker.random.words(),
                  stargazers_url: faker.random.words(),
                  statuses_url: faker.random.words(),
                  subscribers_url: faker.random.words(),
                  subscription_url: faker.random.words(),
                  tags_url: faker.random.words(),
                  teams_url: faker.random.words(),
                  trees_url: faker.random.words(),
                  clone_url: faker.random.words(),
                  mirror_url: faker.random.words(),
                  hooks_url: faker.random.words(),
                  svn_url: faker.random.words(),
                  homepage: faker.random.words(),
                  language: faker.random.words(),
                  forks_count: faker.datatype.number(),
                  stargazers_count: faker.datatype.number(),
                  watchers_count: faker.datatype.number(),
                  size: faker.datatype.number(),
                  default_branch: faker.random.words(),
                  open_issues_count: faker.datatype.number(),
                  is_template: faker.datatype.boolean(),
                  topics: [
                    ...new Array(faker.datatype.number({ max: 100 })).keys(),
                  ].map(_ => faker.random.words()),
                  has_issues: faker.datatype.boolean(),
                  has_projects: faker.datatype.boolean(),
                  has_wiki: faker.datatype.boolean(),
                  has_pages: faker.datatype.boolean(),
                  has_downloads: faker.datatype.boolean(),
                  archived: faker.datatype.boolean(),
                  disabled: faker.datatype.boolean(),
                  visibility: faker.random.words(),
                  pushed_at: faker.random.words(),
                  created_at: faker.random.words(),
                  updated_at: faker.random.words(),
                  permissions: {
                    admin: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    pull: faker.datatype.boolean(),
                  },
                  allow_rebase_merge: faker.datatype.boolean(),
                  temp_clone_token: faker.random.words(),
                  allow_squash_merge: faker.datatype.boolean(),
                  allow_auto_merge: faker.datatype.boolean(),
                  delete_branch_on_merge: faker.datatype.boolean(),
                  allow_update_branch: faker.datatype.boolean(),
                  allow_merge_commit: faker.datatype.boolean(),
                  subscribers_count: faker.datatype.number(),
                  network_count: faker.datatype.number(),
                },
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                allow_forking: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
                open_issues: faker.datatype.number(),
                watchers: faker.datatype.number(),
                master_branch: faker.random.words(),
                starred_at: faker.random.words(),
              },
              sha: faker.random.words(),
              user: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
            },
            _links: {
              comments: {
                href: faker.random.words(),
              },
              commits: {
                href: faker.random.words(),
              },
              statuses: {
                href: faker.random.words(),
              },
              html: {
                href: faker.random.words(),
              },
              issue: {
                href: faker.random.words(),
              },
              review_comments: {
                href: faker.random.words(),
              },
              review_comment: {
                href: faker.random.words(),
              },
              self: {
                href: faker.random.words(),
              },
            },
            author_association: faker.random.arrayElement([
              'COLLABORATOR',
              'CONTRIBUTOR',
              'FIRST_TIMER',
              'FIRST_TIME_CONTRIBUTOR',
              'MANNEQUIN',
              'MEMBER',
              'NONE',
              'OWNER',
            ]),
            auto_merge: {
              enabled_by: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              merge_method: faker.random.arrayElement([
                'merge',
                'squash',
                'rebase',
              ]),
              commit_title: faker.random.words(),
              commit_message: faker.random.words(),
            },
            draft: faker.datatype.boolean(),
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/commits/:ref', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          url: faker.random.words(),
          sha: faker.random.words(),
          node_id: faker.random.words(),
          html_url: faker.random.words(),
          comments_url: faker.random.words(),
          commit: {
            url: faker.random.words(),
            author: {
              name: faker.random.words(),
              email: faker.random.words(),
              date: faker.random.words(),
            },
            committer: {
              name: faker.random.words(),
              email: faker.random.words(),
              date: faker.random.words(),
            },
            message: faker.random.words(),
            comment_count: faker.datatype.number(),
            tree: {
              sha: faker.random.words(),
              url: faker.random.words(),
            },
            verification: {
              verified: faker.datatype.boolean(),
              reason: faker.random.words(),
              payload: faker.random.words(),
              signature: faker.random.words(),
            },
          },
          author: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          committer: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          parents: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            sha: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
          })),
          stats: {
            additions: faker.datatype.number(),
            deletions: faker.datatype.number(),
            total: faker.datatype.number(),
          },
          files: [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
            _ => ({
              sha: faker.random.words(),
              filename: faker.random.words(),
              status: faker.random.arrayElement([
                'added',
                'removed',
                'modified',
                'renamed',
                'copied',
                'changed',
                'unchanged',
              ]),
              additions: faker.datatype.number(),
              deletions: faker.datatype.number(),
              changes: faker.datatype.number(),
              blob_url: faker.random.words(),
              raw_url: faker.random.words(),
              contents_url: faker.random.words(),
              patch: faker.random.words(),
              previous_filename: faker.random.words(),
            })
          ),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
      [
        ctx.status(500),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/commits/:ref/check-runs', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          total_count: faker.datatype.number(),
          check_runs: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            head_sha: faker.random.words(),
            node_id: faker.random.words(),
            external_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            details_url: faker.random.words(),
            status: faker.random.arrayElement([
              'queued',
              'in_progress',
              'completed',
            ]),
            conclusion: faker.random.arrayElement([
              'success',
              'failure',
              'neutral',
              'cancelled',
              'skipped',
              'timed_out',
              'action_required',
            ]),
            started_at: faker.random.words(),
            completed_at: faker.random.words(),
            output: {
              title: faker.random.words(),
              summary: faker.random.words(),
              text: faker.random.words(),
              annotations_count: faker.datatype.number(),
              annotations_url: faker.random.words(),
            },
            name: faker.random.words(),
            check_suite: {
              id: faker.datatype.number(),
            },
            app: {
              id: faker.datatype.number(),
              slug: faker.random.words(),
              node_id: faker.random.words(),
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              name: faker.random.words(),
              description: faker.random.words(),
              external_url: faker.random.words(),
              html_url: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                issues: faker.random.words(),
                checks: faker.random.words(),
                metadata: faker.random.words(),
                contents: faker.random.words(),
                deployments: faker.random.words(),
              },
              events: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              installations_count: faker.datatype.number(),
              client_id: faker.random.words(),
              client_secret: faker.random.words(),
              webhook_secret: faker.random.words(),
              pem: faker.random.words(),
            },
            pull_requests: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              number: faker.datatype.number(),
              url: faker.random.words(),
              head: {
                ref: faker.random.words(),
                sha: faker.random.words(),
                repo: {
                  id: faker.datatype.number(),
                  url: faker.random.words(),
                  name: faker.random.words(),
                },
              },
              base: {
                ref: faker.random.words(),
                sha: faker.random.words(),
                repo: {
                  id: faker.datatype.number(),
                  url: faker.random.words(),
                  name: faker.random.words(),
                },
              },
            })),
            deployment: {
              url: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              task: faker.random.words(),
              original_environment: faker.random.words(),
              environment: faker.random.words(),
              description: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              statuses_url: faker.random.words(),
              repository_url: faker.random.words(),
              transient_environment: faker.datatype.boolean(),
              production_environment: faker.datatype.boolean(),
              performed_via_github_app: {
                id: faker.datatype.number(),
                slug: faker.random.words(),
                node_id: faker.random.words(),
                owner: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                name: faker.random.words(),
                description: faker.random.words(),
                external_url: faker.random.words(),
                html_url: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                permissions: {
                  issues: faker.random.words(),
                  checks: faker.random.words(),
                  metadata: faker.random.words(),
                  contents: faker.random.words(),
                  deployments: faker.random.words(),
                },
                events: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                installations_count: faker.datatype.number(),
                client_id: faker.random.words(),
                client_secret: faker.random.words(),
                webhook_secret: faker.random.words(),
                pem: faker.random.words(),
              },
            },
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/commits/:ref/check-suites', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          total_count: faker.datatype.number(),
          check_suites: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            head_branch: faker.random.words(),
            head_sha: faker.random.words(),
            status: faker.random.arrayElement([
              'queued',
              'in_progress',
              'completed',
            ]),
            conclusion: faker.random.arrayElement([
              'success',
              'failure',
              'neutral',
              'cancelled',
              'skipped',
              'timed_out',
              'action_required',
            ]),
            url: faker.random.words(),
            before: faker.random.words(),
            after: faker.random.words(),
            pull_requests: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              number: faker.datatype.number(),
              url: faker.random.words(),
              head: {
                ref: faker.random.words(),
                sha: faker.random.words(),
                repo: {
                  id: faker.datatype.number(),
                  url: faker.random.words(),
                  name: faker.random.words(),
                },
              },
              base: {
                ref: faker.random.words(),
                sha: faker.random.words(),
                repo: {
                  id: faker.datatype.number(),
                  url: faker.random.words(),
                  name: faker.random.words(),
                },
              },
            })),
            app: {
              id: faker.datatype.number(),
              slug: faker.random.words(),
              node_id: faker.random.words(),
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              name: faker.random.words(),
              description: faker.random.words(),
              external_url: faker.random.words(),
              html_url: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                issues: faker.random.words(),
                checks: faker.random.words(),
                metadata: faker.random.words(),
                contents: faker.random.words(),
                deployments: faker.random.words(),
              },
              events: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              installations_count: faker.datatype.number(),
              client_id: faker.random.words(),
              client_secret: faker.random.words(),
              webhook_secret: faker.random.words(),
              pem: faker.random.words(),
            },
            repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                license: {
                  key: faker.random.words(),
                  name: faker.random.words(),
                  url: faker.random.words(),
                  spdx_id: faker.random.words(),
                  node_id: faker.random.words(),
                  html_url: faker.random.words(),
                },
                organization: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                forks: faker.datatype.number(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                },
                owner: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                allow_rebase_merge: faker.datatype.boolean(),
                template_repository: {
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  name: faker.random.words(),
                  full_name: faker.random.words(),
                  owner: {
                    login: faker.random.words(),
                    id: faker.datatype.number(),
                    node_id: faker.random.words(),
                    avatar_url: faker.random.words(),
                    gravatar_id: faker.random.words(),
                    url: faker.random.words(),
                    html_url: faker.random.words(),
                    followers_url: faker.random.words(),
                    following_url: faker.random.words(),
                    gists_url: faker.random.words(),
                    starred_url: faker.random.words(),
                    subscriptions_url: faker.random.words(),
                    organizations_url: faker.random.words(),
                    repos_url: faker.random.words(),
                    events_url: faker.random.words(),
                    received_events_url: faker.random.words(),
                    type: faker.random.words(),
                    site_admin: faker.datatype.boolean(),
                  },
                  private: faker.datatype.boolean(),
                  html_url: faker.random.words(),
                  description: faker.random.words(),
                  fork: faker.datatype.boolean(),
                  url: faker.random.words(),
                  archive_url: faker.random.words(),
                  assignees_url: faker.random.words(),
                  blobs_url: faker.random.words(),
                  branches_url: faker.random.words(),
                  collaborators_url: faker.random.words(),
                  comments_url: faker.random.words(),
                  commits_url: faker.random.words(),
                  compare_url: faker.random.words(),
                  contents_url: faker.random.words(),
                  contributors_url: faker.random.words(),
                  deployments_url: faker.random.words(),
                  downloads_url: faker.random.words(),
                  events_url: faker.random.words(),
                  forks_url: faker.random.words(),
                  git_commits_url: faker.random.words(),
                  git_refs_url: faker.random.words(),
                  git_tags_url: faker.random.words(),
                  git_url: faker.random.words(),
                  issue_comment_url: faker.random.words(),
                  issue_events_url: faker.random.words(),
                  issues_url: faker.random.words(),
                  keys_url: faker.random.words(),
                  labels_url: faker.random.words(),
                  languages_url: faker.random.words(),
                  merges_url: faker.random.words(),
                  milestones_url: faker.random.words(),
                  notifications_url: faker.random.words(),
                  pulls_url: faker.random.words(),
                  releases_url: faker.random.words(),
                  ssh_url: faker.random.words(),
                  stargazers_url: faker.random.words(),
                  statuses_url: faker.random.words(),
                  subscribers_url: faker.random.words(),
                  subscription_url: faker.random.words(),
                  tags_url: faker.random.words(),
                  teams_url: faker.random.words(),
                  trees_url: faker.random.words(),
                  clone_url: faker.random.words(),
                  mirror_url: faker.random.words(),
                  hooks_url: faker.random.words(),
                  svn_url: faker.random.words(),
                  homepage: faker.random.words(),
                  language: faker.random.words(),
                  forks_count: faker.datatype.number(),
                  stargazers_count: faker.datatype.number(),
                  watchers_count: faker.datatype.number(),
                  size: faker.datatype.number(),
                  default_branch: faker.random.words(),
                  open_issues_count: faker.datatype.number(),
                  is_template: faker.datatype.boolean(),
                  topics: [
                    ...new Array(faker.datatype.number({ max: 100 })).keys(),
                  ].map(_ => faker.random.words()),
                  has_issues: faker.datatype.boolean(),
                  has_projects: faker.datatype.boolean(),
                  has_wiki: faker.datatype.boolean(),
                  has_pages: faker.datatype.boolean(),
                  has_downloads: faker.datatype.boolean(),
                  archived: faker.datatype.boolean(),
                  disabled: faker.datatype.boolean(),
                  visibility: faker.random.words(),
                  pushed_at: faker.random.words(),
                  created_at: faker.random.words(),
                  updated_at: faker.random.words(),
                  permissions: {
                    admin: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    pull: faker.datatype.boolean(),
                  },
                  allow_rebase_merge: faker.datatype.boolean(),
                  temp_clone_token: faker.random.words(),
                  allow_squash_merge: faker.datatype.boolean(),
                  allow_auto_merge: faker.datatype.boolean(),
                  delete_branch_on_merge: faker.datatype.boolean(),
                  allow_update_branch: faker.datatype.boolean(),
                  allow_merge_commit: faker.datatype.boolean(),
                  subscribers_count: faker.datatype.number(),
                  network_count: faker.datatype.number(),
                },
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                allow_forking: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
                open_issues: faker.datatype.number(),
                watchers: faker.datatype.number(),
                master_branch: faker.random.words(),
                starred_at: faker.random.words(),
              },
              temp_clone_token: faker.random.words(),
              delete_branch_on_merge: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              code_of_conduct: {
                key: faker.random.words(),
                name: faker.random.words(),
                url: faker.random.words(),
                body: faker.random.words(),
                html_url: faker.random.words(),
              },
              license: {
                key: faker.random.words(),
                name: faker.random.words(),
                spdx_id: faker.random.words(),
                url: faker.random.words(),
                node_id: faker.random.words(),
              },
              forks: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              allow_forking: faker.datatype.boolean(),
            },
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            head_commit: {
              id: faker.random.words(),
              tree_id: faker.random.words(),
              message: faker.random.words(),
              timestamp: faker.random.words(),
              author: {
                name: faker.random.words(),
                email: faker.random.words(),
              },
              committer: {
                name: faker.random.words(),
                email: faker.random.words(),
              },
            },
            latest_check_runs_count: faker.datatype.number(),
            check_runs_url: faker.random.words(),
            rerequestable: faker.datatype.boolean(),
            runs_rerequestable: faker.datatype.boolean(),
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/commits/:ref/status', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          state: faker.random.words(),
          statuses: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            description: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            state: faker.random.words(),
            context: faker.random.words(),
            target_url: faker.random.words(),
            required: faker.datatype.boolean(),
            avatar_url: faker.random.words(),
            url: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
          })),
          sha: faker.random.words(),
          total_count: faker.datatype.number(),
          repository: {
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            full_name: faker.random.words(),
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.random.words(),
            description: faker.random.words(),
            fork: faker.datatype.boolean(),
            url: faker.random.words(),
            archive_url: faker.random.words(),
            assignees_url: faker.random.words(),
            blobs_url: faker.random.words(),
            branches_url: faker.random.words(),
            collaborators_url: faker.random.words(),
            comments_url: faker.random.words(),
            commits_url: faker.random.words(),
            compare_url: faker.random.words(),
            contents_url: faker.random.words(),
            contributors_url: faker.random.words(),
            deployments_url: faker.random.words(),
            downloads_url: faker.random.words(),
            events_url: faker.random.words(),
            forks_url: faker.random.words(),
            git_commits_url: faker.random.words(),
            git_refs_url: faker.random.words(),
            git_tags_url: faker.random.words(),
            git_url: faker.random.words(),
            issue_comment_url: faker.random.words(),
            issue_events_url: faker.random.words(),
            issues_url: faker.random.words(),
            keys_url: faker.random.words(),
            labels_url: faker.random.words(),
            languages_url: faker.random.words(),
            merges_url: faker.random.words(),
            milestones_url: faker.random.words(),
            notifications_url: faker.random.words(),
            pulls_url: faker.random.words(),
            releases_url: faker.random.words(),
            ssh_url: faker.random.words(),
            stargazers_url: faker.random.words(),
            statuses_url: faker.random.words(),
            subscribers_url: faker.random.words(),
            subscription_url: faker.random.words(),
            tags_url: faker.random.words(),
            teams_url: faker.random.words(),
            trees_url: faker.random.words(),
            clone_url: faker.random.words(),
            mirror_url: faker.random.words(),
            hooks_url: faker.random.words(),
            svn_url: faker.random.words(),
            homepage: faker.random.words(),
            language: faker.random.words(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.random.words(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.random.words(),
            pushed_at: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              license: {
                key: faker.random.words(),
                name: faker.random.words(),
                url: faker.random.words(),
                spdx_id: faker.random.words(),
                node_id: faker.random.words(),
                html_url: faker.random.words(),
              },
              organization: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              allow_rebase_merge: faker.datatype.boolean(),
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                owner: {
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.random.words(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.random.words(),
              starred_at: faker.random.words(),
            },
            temp_clone_token: faker.random.words(),
            delete_branch_on_merge: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            code_of_conduct: {
              key: faker.random.words(),
              name: faker.random.words(),
              url: faker.random.words(),
              body: faker.random.words(),
              html_url: faker.random.words(),
            },
            license: {
              key: faker.random.words(),
              name: faker.random.words(),
              spdx_id: faker.random.words(),
              url: faker.random.words(),
              node_id: faker.random.words(),
            },
            forks: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            allow_forking: faker.datatype.boolean(),
          },
          commit_url: faker.random.words(),
          url: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/commits/:ref/statuses', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            url: faker.random.words(),
            avatar_url: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            state: faker.random.words(),
            description: faker.random.words(),
            target_url: faker.random.words(),
            context: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            creator: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
          }))
        ),
      ],
      [
        ctx.status(301),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/compare/:basehead', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          url: faker.random.words(),
          html_url: faker.random.words(),
          permalink_url: faker.random.words(),
          diff_url: faker.random.words(),
          patch_url: faker.random.words(),
          base_commit: {
            url: faker.random.words(),
            sha: faker.random.words(),
            node_id: faker.random.words(),
            html_url: faker.random.words(),
            comments_url: faker.random.words(),
            commit: {
              url: faker.random.words(),
              author: {
                name: faker.random.words(),
                email: faker.random.words(),
                date: faker.random.words(),
              },
              committer: {
                name: faker.random.words(),
                email: faker.random.words(),
                date: faker.random.words(),
              },
              message: faker.random.words(),
              comment_count: faker.datatype.number(),
              tree: {
                sha: faker.random.words(),
                url: faker.random.words(),
              },
              verification: {
                verified: faker.datatype.boolean(),
                reason: faker.random.words(),
                payload: faker.random.words(),
                signature: faker.random.words(),
              },
            },
            author: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            committer: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            parents: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              sha: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
            })),
            stats: {
              additions: faker.datatype.number(),
              deletions: faker.datatype.number(),
              total: faker.datatype.number(),
            },
            files: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              sha: faker.random.words(),
              filename: faker.random.words(),
              status: faker.random.arrayElement([
                'added',
                'removed',
                'modified',
                'renamed',
                'copied',
                'changed',
                'unchanged',
              ]),
              additions: faker.datatype.number(),
              deletions: faker.datatype.number(),
              changes: faker.datatype.number(),
              blob_url: faker.random.words(),
              raw_url: faker.random.words(),
              contents_url: faker.random.words(),
              patch: faker.random.words(),
              previous_filename: faker.random.words(),
            })),
          },
          merge_base_commit: {
            url: faker.random.words(),
            sha: faker.random.words(),
            node_id: faker.random.words(),
            html_url: faker.random.words(),
            comments_url: faker.random.words(),
            commit: {
              url: faker.random.words(),
              author: {
                name: faker.random.words(),
                email: faker.random.words(),
                date: faker.random.words(),
              },
              committer: {
                name: faker.random.words(),
                email: faker.random.words(),
                date: faker.random.words(),
              },
              message: faker.random.words(),
              comment_count: faker.datatype.number(),
              tree: {
                sha: faker.random.words(),
                url: faker.random.words(),
              },
              verification: {
                verified: faker.datatype.boolean(),
                reason: faker.random.words(),
                payload: faker.random.words(),
                signature: faker.random.words(),
              },
            },
            author: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            committer: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            parents: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              sha: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
            })),
            stats: {
              additions: faker.datatype.number(),
              deletions: faker.datatype.number(),
              total: faker.datatype.number(),
            },
            files: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              sha: faker.random.words(),
              filename: faker.random.words(),
              status: faker.random.arrayElement([
                'added',
                'removed',
                'modified',
                'renamed',
                'copied',
                'changed',
                'unchanged',
              ]),
              additions: faker.datatype.number(),
              deletions: faker.datatype.number(),
              changes: faker.datatype.number(),
              blob_url: faker.random.words(),
              raw_url: faker.random.words(),
              contents_url: faker.random.words(),
              patch: faker.random.words(),
              previous_filename: faker.random.words(),
            })),
          },
          status: faker.random.arrayElement([
            'diverged',
            'ahead',
            'behind',
            'identical',
          ]),
          ahead_by: faker.datatype.number(),
          behind_by: faker.datatype.number(),
          total_commits: faker.datatype.number(),
          commits: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            url: faker.random.words(),
            sha: faker.random.words(),
            node_id: faker.random.words(),
            html_url: faker.random.words(),
            comments_url: faker.random.words(),
            commit: {
              url: faker.random.words(),
              author: {
                name: faker.random.words(),
                email: faker.random.words(),
                date: faker.random.words(),
              },
              committer: {
                name: faker.random.words(),
                email: faker.random.words(),
                date: faker.random.words(),
              },
              message: faker.random.words(),
              comment_count: faker.datatype.number(),
              tree: {
                sha: faker.random.words(),
                url: faker.random.words(),
              },
              verification: {
                verified: faker.datatype.boolean(),
                reason: faker.random.words(),
                payload: faker.random.words(),
                signature: faker.random.words(),
              },
            },
            author: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            committer: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            parents: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              sha: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
            })),
            stats: {
              additions: faker.datatype.number(),
              deletions: faker.datatype.number(),
              total: faker.datatype.number(),
            },
            files: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              sha: faker.random.words(),
              filename: faker.random.words(),
              status: faker.random.arrayElement([
                'added',
                'removed',
                'modified',
                'renamed',
                'copied',
                'changed',
                'unchanged',
              ]),
              additions: faker.datatype.number(),
              deletions: faker.datatype.number(),
              changes: faker.datatype.number(),
              blob_url: faker.random.words(),
              raw_url: faker.random.words(),
              contents_url: faker.random.words(),
              patch: faker.random.words(),
              previous_filename: faker.random.words(),
            })),
          })),
          files: [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
            _ => ({
              sha: faker.random.words(),
              filename: faker.random.words(),
              status: faker.random.arrayElement([
                'added',
                'removed',
                'modified',
                'renamed',
                'copied',
                'changed',
                'unchanged',
              ]),
              additions: faker.datatype.number(),
              deletions: faker.datatype.number(),
              changes: faker.datatype.number(),
              blob_url: faker.random.words(),
              raw_url: faker.random.words(),
              contents_url: faker.random.words(),
              patch: faker.random.words(),
              previous_filename: faker.random.words(),
            })
          ),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(500),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post(
    '/repos/:owner/:repo/content_references/:content_reference_id/attachments',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            title: faker.random.words(),
            body: faker.random.words(),
            node_id: faker.random.words(),
          }),
        ],
        [ctx.status(304), ctx.json({})],
        [
          ctx.status(403),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(410),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(415),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            errors: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              resource: faker.random.words(),
              field: faker.random.words(),
              message: faker.random.words(),
              code: faker.random.words(),
              index: faker.datatype.number(),
              value: {},
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get('/repos/:owner/:repo/contents/:path', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(200), ctx.json({})],
      [ctx.status(302), ctx.json({})],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.put('/repos/:owner/:repo/contents/:path', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          content: {
            name: faker.random.words(),
            path: faker.random.words(),
            sha: faker.random.words(),
            size: faker.datatype.number(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            git_url: faker.random.words(),
            download_url: faker.random.words(),
            type: faker.random.words(),
            _links: {
              self: faker.random.words(),
              git: faker.random.words(),
              html: faker.random.words(),
            },
          },
          commit: {
            sha: faker.random.words(),
            node_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            author: {
              date: faker.random.words(),
              name: faker.random.words(),
              email: faker.random.words(),
            },
            committer: {
              date: faker.random.words(),
              name: faker.random.words(),
              email: faker.random.words(),
            },
            message: faker.random.words(),
            tree: {
              url: faker.random.words(),
              sha: faker.random.words(),
            },
            parents: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              url: faker.random.words(),
              html_url: faker.random.words(),
              sha: faker.random.words(),
            })),
            verification: {
              verified: faker.datatype.boolean(),
              reason: faker.random.words(),
              signature: faker.random.words(),
              payload: faker.random.words(),
            },
          },
        }),
      ],
      [
        ctx.status(201),
        ctx.json({
          content: {
            name: faker.random.words(),
            path: faker.random.words(),
            sha: faker.random.words(),
            size: faker.datatype.number(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            git_url: faker.random.words(),
            download_url: faker.random.words(),
            type: faker.random.words(),
            _links: {
              self: faker.random.words(),
              git: faker.random.words(),
              html: faker.random.words(),
            },
          },
          commit: {
            sha: faker.random.words(),
            node_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            author: {
              date: faker.random.words(),
              name: faker.random.words(),
              email: faker.random.words(),
            },
            committer: {
              date: faker.random.words(),
              name: faker.random.words(),
              email: faker.random.words(),
            },
            message: faker.random.words(),
            tree: {
              url: faker.random.words(),
              sha: faker.random.words(),
            },
            parents: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              url: faker.random.words(),
              html_url: faker.random.words(),
              sha: faker.random.words(),
            })),
            verification: {
              verified: faker.datatype.boolean(),
              reason: faker.random.words(),
              signature: faker.random.words(),
              payload: faker.random.words(),
            },
          },
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(409),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/repos/:owner/:repo/contents/:path', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          content: {
            name: faker.random.words(),
            path: faker.random.words(),
            sha: faker.random.words(),
            size: faker.datatype.number(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            git_url: faker.random.words(),
            download_url: faker.random.words(),
            type: faker.random.words(),
            _links: {
              self: faker.random.words(),
              git: faker.random.words(),
              html: faker.random.words(),
            },
          },
          commit: {
            sha: faker.random.words(),
            node_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            author: {
              date: faker.random.words(),
              name: faker.random.words(),
              email: faker.random.words(),
            },
            committer: {
              date: faker.random.words(),
              name: faker.random.words(),
              email: faker.random.words(),
            },
            message: faker.random.words(),
            tree: {
              url: faker.random.words(),
              sha: faker.random.words(),
            },
            parents: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              url: faker.random.words(),
              html_url: faker.random.words(),
              sha: faker.random.words(),
            })),
            verification: {
              verified: faker.datatype.boolean(),
              reason: faker.random.words(),
              signature: faker.random.words(),
              payload: faker.random.words(),
            },
          },
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(409),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
      [
        ctx.status(503),
        ctx.json({
          code: faker.random.words(),
          message: faker.random.words(),
          documentation_url: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/contributors', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            contributions: faker.datatype.number(),
            email: faker.random.words(),
            name: faker.random.words(),
          }))
        ),
      ],
      [ctx.status(204), ctx.json({})],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/deployments', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            url: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            sha: faker.random.words(),
            ref: faker.random.words(),
            task: faker.random.words(),
            payload: {},
            original_environment: faker.random.words(),
            environment: faker.random.words(),
            description: faker.random.words(),
            creator: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            statuses_url: faker.random.words(),
            repository_url: faker.random.words(),
            transient_environment: faker.datatype.boolean(),
            production_environment: faker.datatype.boolean(),
            performed_via_github_app: {
              id: faker.datatype.number(),
              slug: faker.random.words(),
              node_id: faker.random.words(),
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              name: faker.random.words(),
              description: faker.random.words(),
              external_url: faker.random.words(),
              html_url: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                issues: faker.random.words(),
                checks: faker.random.words(),
                metadata: faker.random.words(),
                contents: faker.random.words(),
                deployments: faker.random.words(),
              },
              events: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              installations_count: faker.datatype.number(),
              client_id: faker.random.words(),
              client_secret: faker.random.words(),
              webhook_secret: faker.random.words(),
              pem: faker.random.words(),
            },
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/repos/:owner/:repo/deployments', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json({
          url: faker.random.words(),
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          sha: faker.random.words(),
          ref: faker.random.words(),
          task: faker.random.words(),
          payload: {},
          original_environment: faker.random.words(),
          environment: faker.random.words(),
          description: faker.random.words(),
          creator: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          statuses_url: faker.random.words(),
          repository_url: faker.random.words(),
          transient_environment: faker.datatype.boolean(),
          production_environment: faker.datatype.boolean(),
          performed_via_github_app: {
            id: faker.datatype.number(),
            slug: faker.random.words(),
            node_id: faker.random.words(),
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            name: faker.random.words(),
            description: faker.random.words(),
            external_url: faker.random.words(),
            html_url: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            permissions: {
              issues: faker.random.words(),
              checks: faker.random.words(),
              metadata: faker.random.words(),
              contents: faker.random.words(),
              deployments: faker.random.words(),
            },
            events: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            installations_count: faker.datatype.number(),
            client_id: faker.random.words(),
            client_secret: faker.random.words(),
            webhook_secret: faker.random.words(),
            pem: faker.random.words(),
          },
        }),
      ],
      [
        ctx.status(202),
        ctx.json({
          message: faker.random.words(),
        }),
      ],
      [ctx.status(409), ctx.json({})],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get(
    '/repos/:owner/:repo/deployments/:deployment_id',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            url: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            sha: faker.random.words(),
            ref: faker.random.words(),
            task: faker.random.words(),
            payload: {},
            original_environment: faker.random.words(),
            environment: faker.random.words(),
            description: faker.random.words(),
            creator: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            statuses_url: faker.random.words(),
            repository_url: faker.random.words(),
            transient_environment: faker.datatype.boolean(),
            production_environment: faker.datatype.boolean(),
            performed_via_github_app: {
              id: faker.datatype.number(),
              slug: faker.random.words(),
              node_id: faker.random.words(),
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              name: faker.random.words(),
              description: faker.random.words(),
              external_url: faker.random.words(),
              html_url: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                issues: faker.random.words(),
                checks: faker.random.words(),
                metadata: faker.random.words(),
                contents: faker.random.words(),
                deployments: faker.random.words(),
              },
              events: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              installations_count: faker.datatype.number(),
              client_id: faker.random.words(),
              client_secret: faker.random.words(),
              webhook_secret: faker.random.words(),
              pem: faker.random.words(),
            },
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/repos/:owner/:repo/deployments/:deployment_id',
    (req, res, ctx) => {
      const resultArrray = [
        [ctx.status(204), ctx.json({})],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            errors: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/repos/:owner/:repo/deployments/:deployment_id/statuses',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json(
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
              _ => ({
                url: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                state: faker.random.arrayElement([
                  'error',
                  'failure',
                  'inactive',
                  'pending',
                  'success',
                  'queued',
                  'in_progress',
                ]),
                creator: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                description: faker.random.words(),
                environment: faker.random.words(),
                target_url: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                deployment_url: faker.random.words(),
                repository_url: faker.random.words(),
                environment_url: faker.random.words(),
                log_url: faker.random.words(),
                performed_via_github_app: {
                  id: faker.datatype.number(),
                  slug: faker.random.words(),
                  node_id: faker.random.words(),
                  owner: {
                    name: faker.random.words(),
                    email: faker.random.words(),
                    login: faker.random.words(),
                    id: faker.datatype.number(),
                    node_id: faker.random.words(),
                    avatar_url: faker.random.words(),
                    gravatar_id: faker.random.words(),
                    url: faker.random.words(),
                    html_url: faker.random.words(),
                    followers_url: faker.random.words(),
                    following_url: faker.random.words(),
                    gists_url: faker.random.words(),
                    starred_url: faker.random.words(),
                    subscriptions_url: faker.random.words(),
                    organizations_url: faker.random.words(),
                    repos_url: faker.random.words(),
                    events_url: faker.random.words(),
                    received_events_url: faker.random.words(),
                    type: faker.random.words(),
                    site_admin: faker.datatype.boolean(),
                    starred_at: faker.random.words(),
                  },
                  name: faker.random.words(),
                  description: faker.random.words(),
                  external_url: faker.random.words(),
                  html_url: faker.random.words(),
                  created_at: faker.random.words(),
                  updated_at: faker.random.words(),
                  permissions: {
                    issues: faker.random.words(),
                    checks: faker.random.words(),
                    metadata: faker.random.words(),
                    contents: faker.random.words(),
                    deployments: faker.random.words(),
                  },
                  events: [
                    ...new Array(faker.datatype.number({ max: 100 })).keys(),
                  ].map(_ => faker.random.words()),
                  installations_count: faker.datatype.number(),
                  client_id: faker.random.words(),
                  client_secret: faker.random.words(),
                  webhook_secret: faker.random.words(),
                  pem: faker.random.words(),
                },
              })
            )
          ),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.post(
    '/repos/:owner/:repo/deployments/:deployment_id/statuses',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(201),
          ctx.json({
            url: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            state: faker.random.arrayElement([
              'error',
              'failure',
              'inactive',
              'pending',
              'success',
              'queued',
              'in_progress',
            ]),
            creator: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            description: faker.random.words(),
            environment: faker.random.words(),
            target_url: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            deployment_url: faker.random.words(),
            repository_url: faker.random.words(),
            environment_url: faker.random.words(),
            log_url: faker.random.words(),
            performed_via_github_app: {
              id: faker.datatype.number(),
              slug: faker.random.words(),
              node_id: faker.random.words(),
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              name: faker.random.words(),
              description: faker.random.words(),
              external_url: faker.random.words(),
              html_url: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                issues: faker.random.words(),
                checks: faker.random.words(),
                metadata: faker.random.words(),
                contents: faker.random.words(),
                deployments: faker.random.words(),
              },
              events: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              installations_count: faker.datatype.number(),
              client_id: faker.random.words(),
              client_secret: faker.random.words(),
              webhook_secret: faker.random.words(),
              pem: faker.random.words(),
            },
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            errors: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              resource: faker.random.words(),
              field: faker.random.words(),
              message: faker.random.words(),
              code: faker.random.words(),
              index: faker.datatype.number(),
              value: {},
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/repos/:owner/:repo/deployments/:deployment_id/statuses/:status_id',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            url: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            state: faker.random.arrayElement([
              'error',
              'failure',
              'inactive',
              'pending',
              'success',
              'queued',
              'in_progress',
            ]),
            creator: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            description: faker.random.words(),
            environment: faker.random.words(),
            target_url: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            deployment_url: faker.random.words(),
            repository_url: faker.random.words(),
            environment_url: faker.random.words(),
            log_url: faker.random.words(),
            performed_via_github_app: {
              id: faker.datatype.number(),
              slug: faker.random.words(),
              node_id: faker.random.words(),
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              name: faker.random.words(),
              description: faker.random.words(),
              external_url: faker.random.words(),
              html_url: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                issues: faker.random.words(),
                checks: faker.random.words(),
                metadata: faker.random.words(),
                contents: faker.random.words(),
                deployments: faker.random.words(),
              },
              events: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              installations_count: faker.datatype.number(),
              client_id: faker.random.words(),
              client_secret: faker.random.words(),
              webhook_secret: faker.random.words(),
              pem: faker.random.words(),
            },
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.post('/repos/:owner/:repo/dispatches', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/environments', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          total_count: faker.datatype.number(),
          environments: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            protection_rules: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({})),
            deployment_branch_policy: {
              protected_branches: faker.datatype.boolean(),
              custom_branch_policies: faker.datatype.boolean(),
            },
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get(
    '/repos/:owner/:repo/environments/:environment_name',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            protection_rules: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({})),
            deployment_branch_policy: {
              protected_branches: faker.datatype.boolean(),
              custom_branch_policies: faker.datatype.boolean(),
            },
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.put(
    '/repos/:owner/:repo/environments/:environment_name',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            protection_rules: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({})),
            deployment_branch_policy: {
              protected_branches: faker.datatype.boolean(),
              custom_branch_policies: faker.datatype.boolean(),
            },
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/repos/:owner/:repo/environments/:environment_name',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get('/repos/:owner/:repo/events', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.random.words(),
            type: faker.random.words(),
            actor: {},
            repo: {
              id: faker.datatype.number(),
              name: faker.random.words(),
              url: faker.random.words(),
            },
            org: {},
            payload: {
              action: faker.random.words(),
              issue: {},
              comment: {},
              pages: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => ({
                page_name: faker.random.words(),
                title: faker.random.words(),
                summary: faker.random.words(),
                action: faker.random.words(),
                sha: faker.random.words(),
                html_url: faker.random.words(),
              })),
            },
            public: faker.datatype.boolean(),
            created_at: faker.random.words(),
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/forks', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            full_name: faker.random.words(),
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.random.words(),
            description: faker.random.words(),
            fork: faker.datatype.boolean(),
            url: faker.random.words(),
            archive_url: faker.random.words(),
            assignees_url: faker.random.words(),
            blobs_url: faker.random.words(),
            branches_url: faker.random.words(),
            collaborators_url: faker.random.words(),
            comments_url: faker.random.words(),
            commits_url: faker.random.words(),
            compare_url: faker.random.words(),
            contents_url: faker.random.words(),
            contributors_url: faker.random.words(),
            deployments_url: faker.random.words(),
            downloads_url: faker.random.words(),
            events_url: faker.random.words(),
            forks_url: faker.random.words(),
            git_commits_url: faker.random.words(),
            git_refs_url: faker.random.words(),
            git_tags_url: faker.random.words(),
            git_url: faker.random.words(),
            issue_comment_url: faker.random.words(),
            issue_events_url: faker.random.words(),
            issues_url: faker.random.words(),
            keys_url: faker.random.words(),
            labels_url: faker.random.words(),
            languages_url: faker.random.words(),
            merges_url: faker.random.words(),
            milestones_url: faker.random.words(),
            notifications_url: faker.random.words(),
            pulls_url: faker.random.words(),
            releases_url: faker.random.words(),
            ssh_url: faker.random.words(),
            stargazers_url: faker.random.words(),
            statuses_url: faker.random.words(),
            subscribers_url: faker.random.words(),
            subscription_url: faker.random.words(),
            tags_url: faker.random.words(),
            teams_url: faker.random.words(),
            trees_url: faker.random.words(),
            clone_url: faker.random.words(),
            mirror_url: faker.random.words(),
            hooks_url: faker.random.words(),
            svn_url: faker.random.words(),
            homepage: faker.random.words(),
            language: faker.random.words(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.random.words(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.random.words(),
            pushed_at: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              license: {
                key: faker.random.words(),
                name: faker.random.words(),
                url: faker.random.words(),
                spdx_id: faker.random.words(),
                node_id: faker.random.words(),
                html_url: faker.random.words(),
              },
              organization: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              allow_rebase_merge: faker.datatype.boolean(),
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                owner: {
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.random.words(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.random.words(),
              starred_at: faker.random.words(),
            },
            temp_clone_token: faker.random.words(),
            delete_branch_on_merge: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            code_of_conduct: {
              key: faker.random.words(),
              name: faker.random.words(),
              url: faker.random.words(),
              body: faker.random.words(),
              html_url: faker.random.words(),
            },
            license: {
              key: faker.random.words(),
              name: faker.random.words(),
              spdx_id: faker.random.words(),
              url: faker.random.words(),
              node_id: faker.random.words(),
            },
            forks: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            allow_forking: faker.datatype.boolean(),
          }))
        ),
      ],
      [
        ctx.status(400),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/repos/:owner/:repo/forks', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(202),
        ctx.json({
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          name: faker.random.words(),
          full_name: faker.random.words(),
          owner: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.random.words(),
          description: faker.random.words(),
          fork: faker.datatype.boolean(),
          url: faker.random.words(),
          archive_url: faker.random.words(),
          assignees_url: faker.random.words(),
          blobs_url: faker.random.words(),
          branches_url: faker.random.words(),
          collaborators_url: faker.random.words(),
          comments_url: faker.random.words(),
          commits_url: faker.random.words(),
          compare_url: faker.random.words(),
          contents_url: faker.random.words(),
          contributors_url: faker.random.words(),
          deployments_url: faker.random.words(),
          downloads_url: faker.random.words(),
          events_url: faker.random.words(),
          forks_url: faker.random.words(),
          git_commits_url: faker.random.words(),
          git_refs_url: faker.random.words(),
          git_tags_url: faker.random.words(),
          git_url: faker.random.words(),
          issue_comment_url: faker.random.words(),
          issue_events_url: faker.random.words(),
          issues_url: faker.random.words(),
          keys_url: faker.random.words(),
          labels_url: faker.random.words(),
          languages_url: faker.random.words(),
          merges_url: faker.random.words(),
          milestones_url: faker.random.words(),
          notifications_url: faker.random.words(),
          pulls_url: faker.random.words(),
          releases_url: faker.random.words(),
          ssh_url: faker.random.words(),
          stargazers_url: faker.random.words(),
          statuses_url: faker.random.words(),
          subscribers_url: faker.random.words(),
          subscription_url: faker.random.words(),
          tags_url: faker.random.words(),
          teams_url: faker.random.words(),
          trees_url: faker.random.words(),
          clone_url: faker.random.words(),
          mirror_url: faker.random.words(),
          hooks_url: faker.random.words(),
          svn_url: faker.random.words(),
          homepage: faker.random.words(),
          language: faker.random.words(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.random.words(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.random.words(),
          pushed_at: faker.random.words(),
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          permissions: {
            admin: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
          },
          allow_rebase_merge: faker.datatype.boolean(),
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            full_name: faker.random.words(),
            license: {
              key: faker.random.words(),
              name: faker.random.words(),
              url: faker.random.words(),
              spdx_id: faker.random.words(),
              node_id: faker.random.words(),
              html_url: faker.random.words(),
            },
            organization: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.random.words(),
            description: faker.random.words(),
            fork: faker.datatype.boolean(),
            url: faker.random.words(),
            archive_url: faker.random.words(),
            assignees_url: faker.random.words(),
            blobs_url: faker.random.words(),
            branches_url: faker.random.words(),
            collaborators_url: faker.random.words(),
            comments_url: faker.random.words(),
            commits_url: faker.random.words(),
            compare_url: faker.random.words(),
            contents_url: faker.random.words(),
            contributors_url: faker.random.words(),
            deployments_url: faker.random.words(),
            downloads_url: faker.random.words(),
            events_url: faker.random.words(),
            forks_url: faker.random.words(),
            git_commits_url: faker.random.words(),
            git_refs_url: faker.random.words(),
            git_tags_url: faker.random.words(),
            git_url: faker.random.words(),
            issue_comment_url: faker.random.words(),
            issue_events_url: faker.random.words(),
            issues_url: faker.random.words(),
            keys_url: faker.random.words(),
            labels_url: faker.random.words(),
            languages_url: faker.random.words(),
            merges_url: faker.random.words(),
            milestones_url: faker.random.words(),
            notifications_url: faker.random.words(),
            pulls_url: faker.random.words(),
            releases_url: faker.random.words(),
            ssh_url: faker.random.words(),
            stargazers_url: faker.random.words(),
            statuses_url: faker.random.words(),
            subscribers_url: faker.random.words(),
            subscription_url: faker.random.words(),
            tags_url: faker.random.words(),
            teams_url: faker.random.words(),
            trees_url: faker.random.words(),
            clone_url: faker.random.words(),
            mirror_url: faker.random.words(),
            hooks_url: faker.random.words(),
            svn_url: faker.random.words(),
            homepage: faker.random.words(),
            language: faker.random.words(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.random.words(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.random.words(),
            pushed_at: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            allow_rebase_merge: faker.datatype.boolean(),
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              owner: {
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.random.words(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.random.words(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.random.words(),
            starred_at: faker.random.words(),
          },
          temp_clone_token: faker.random.words(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          license: {
            key: faker.random.words(),
            name: faker.random.words(),
            url: faker.random.words(),
            spdx_id: faker.random.words(),
            node_id: faker.random.words(),
            html_url: faker.random.words(),
          },
          organization: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          parent: {
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            full_name: faker.random.words(),
            license: {
              key: faker.random.words(),
              name: faker.random.words(),
              url: faker.random.words(),
              spdx_id: faker.random.words(),
              node_id: faker.random.words(),
              html_url: faker.random.words(),
            },
            organization: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.random.words(),
            description: faker.random.words(),
            fork: faker.datatype.boolean(),
            url: faker.random.words(),
            archive_url: faker.random.words(),
            assignees_url: faker.random.words(),
            blobs_url: faker.random.words(),
            branches_url: faker.random.words(),
            collaborators_url: faker.random.words(),
            comments_url: faker.random.words(),
            commits_url: faker.random.words(),
            compare_url: faker.random.words(),
            contents_url: faker.random.words(),
            contributors_url: faker.random.words(),
            deployments_url: faker.random.words(),
            downloads_url: faker.random.words(),
            events_url: faker.random.words(),
            forks_url: faker.random.words(),
            git_commits_url: faker.random.words(),
            git_refs_url: faker.random.words(),
            git_tags_url: faker.random.words(),
            git_url: faker.random.words(),
            issue_comment_url: faker.random.words(),
            issue_events_url: faker.random.words(),
            issues_url: faker.random.words(),
            keys_url: faker.random.words(),
            labels_url: faker.random.words(),
            languages_url: faker.random.words(),
            merges_url: faker.random.words(),
            milestones_url: faker.random.words(),
            notifications_url: faker.random.words(),
            pulls_url: faker.random.words(),
            releases_url: faker.random.words(),
            ssh_url: faker.random.words(),
            stargazers_url: faker.random.words(),
            statuses_url: faker.random.words(),
            subscribers_url: faker.random.words(),
            subscription_url: faker.random.words(),
            tags_url: faker.random.words(),
            teams_url: faker.random.words(),
            trees_url: faker.random.words(),
            clone_url: faker.random.words(),
            mirror_url: faker.random.words(),
            hooks_url: faker.random.words(),
            svn_url: faker.random.words(),
            homepage: faker.random.words(),
            language: faker.random.words(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.random.words(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.random.words(),
            pushed_at: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            allow_rebase_merge: faker.datatype.boolean(),
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              owner: {
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.random.words(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.random.words(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.random.words(),
            starred_at: faker.random.words(),
          },
          source: {
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            full_name: faker.random.words(),
            license: {
              key: faker.random.words(),
              name: faker.random.words(),
              url: faker.random.words(),
              spdx_id: faker.random.words(),
              node_id: faker.random.words(),
              html_url: faker.random.words(),
            },
            organization: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.random.words(),
            description: faker.random.words(),
            fork: faker.datatype.boolean(),
            url: faker.random.words(),
            archive_url: faker.random.words(),
            assignees_url: faker.random.words(),
            blobs_url: faker.random.words(),
            branches_url: faker.random.words(),
            collaborators_url: faker.random.words(),
            comments_url: faker.random.words(),
            commits_url: faker.random.words(),
            compare_url: faker.random.words(),
            contents_url: faker.random.words(),
            contributors_url: faker.random.words(),
            deployments_url: faker.random.words(),
            downloads_url: faker.random.words(),
            events_url: faker.random.words(),
            forks_url: faker.random.words(),
            git_commits_url: faker.random.words(),
            git_refs_url: faker.random.words(),
            git_tags_url: faker.random.words(),
            git_url: faker.random.words(),
            issue_comment_url: faker.random.words(),
            issue_events_url: faker.random.words(),
            issues_url: faker.random.words(),
            keys_url: faker.random.words(),
            labels_url: faker.random.words(),
            languages_url: faker.random.words(),
            merges_url: faker.random.words(),
            milestones_url: faker.random.words(),
            notifications_url: faker.random.words(),
            pulls_url: faker.random.words(),
            releases_url: faker.random.words(),
            ssh_url: faker.random.words(),
            stargazers_url: faker.random.words(),
            statuses_url: faker.random.words(),
            subscribers_url: faker.random.words(),
            subscription_url: faker.random.words(),
            tags_url: faker.random.words(),
            teams_url: faker.random.words(),
            trees_url: faker.random.words(),
            clone_url: faker.random.words(),
            mirror_url: faker.random.words(),
            hooks_url: faker.random.words(),
            svn_url: faker.random.words(),
            homepage: faker.random.words(),
            language: faker.random.words(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.random.words(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.random.words(),
            pushed_at: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            allow_rebase_merge: faker.datatype.boolean(),
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              owner: {
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.random.words(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.random.words(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.random.words(),
            starred_at: faker.random.words(),
          },
          forks: faker.datatype.number(),
          master_branch: faker.random.words(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          anonymous_access_enabled: faker.datatype.boolean(),
          code_of_conduct: {
            url: faker.random.words(),
            key: faker.random.words(),
            name: faker.random.words(),
            html_url: faker.random.words(),
          },
          security_and_analysis: {
            advanced_security: {
              status: faker.random.arrayElement(['enabled', 'disabled']),
            },
            secret_scanning: {
              status: faker.random.arrayElement(['enabled', 'disabled']),
            },
          },
        }),
      ],
      [
        ctx.status(400),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/repos/:owner/:repo/git/blobs', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json({
          url: faker.random.words(),
          sha: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(409),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/git/blobs/:file_sha', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          content: faker.random.words(),
          encoding: faker.random.words(),
          url: faker.random.words(),
          sha: faker.random.words(),
          size: faker.datatype.number(),
          node_id: faker.random.words(),
          highlighted_content: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/repos/:owner/:repo/git/commits', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json({
          sha: faker.random.words(),
          node_id: faker.random.words(),
          url: faker.random.words(),
          author: {
            date: faker.random.words(),
            email: faker.random.words(),
            name: faker.random.words(),
          },
          committer: {
            date: faker.random.words(),
            email: faker.random.words(),
            name: faker.random.words(),
          },
          message: faker.random.words(),
          tree: {
            sha: faker.random.words(),
            url: faker.random.words(),
          },
          parents: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            sha: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
          })),
          verification: {
            verified: faker.datatype.boolean(),
            reason: faker.random.words(),
            signature: faker.random.words(),
            payload: faker.random.words(),
          },
          html_url: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/git/commits/:commit_sha', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          sha: faker.random.words(),
          node_id: faker.random.words(),
          url: faker.random.words(),
          author: {
            date: faker.random.words(),
            email: faker.random.words(),
            name: faker.random.words(),
          },
          committer: {
            date: faker.random.words(),
            email: faker.random.words(),
            name: faker.random.words(),
          },
          message: faker.random.words(),
          tree: {
            sha: faker.random.words(),
            url: faker.random.words(),
          },
          parents: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            sha: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
          })),
          verification: {
            verified: faker.datatype.boolean(),
            reason: faker.random.words(),
            signature: faker.random.words(),
            payload: faker.random.words(),
          },
          html_url: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/git/matching-refs/:ref', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            ref: faker.random.words(),
            node_id: faker.random.words(),
            url: faker.random.words(),
            object: {
              type: faker.random.words(),
              sha: faker.random.words(),
              url: faker.random.words(),
            },
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/git/ref/:ref', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          ref: faker.random.words(),
          node_id: faker.random.words(),
          url: faker.random.words(),
          object: {
            type: faker.random.words(),
            sha: faker.random.words(),
            url: faker.random.words(),
          },
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/repos/:owner/:repo/git/refs', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json({
          ref: faker.random.words(),
          node_id: faker.random.words(),
          url: faker.random.words(),
          object: {
            type: faker.random.words(),
            sha: faker.random.words(),
            url: faker.random.words(),
          },
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.patch('/repos/:owner/:repo/git/refs/:ref', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          ref: faker.random.words(),
          node_id: faker.random.words(),
          url: faker.random.words(),
          object: {
            type: faker.random.words(),
            sha: faker.random.words(),
            url: faker.random.words(),
          },
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/repos/:owner/:repo/git/refs/:ref', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/repos/:owner/:repo/git/tags', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json({
          node_id: faker.random.words(),
          tag: faker.random.words(),
          sha: faker.random.words(),
          url: faker.random.words(),
          message: faker.random.words(),
          tagger: {
            date: faker.random.words(),
            email: faker.random.words(),
            name: faker.random.words(),
          },
          object: {
            sha: faker.random.words(),
            type: faker.random.words(),
            url: faker.random.words(),
          },
          verification: {
            verified: faker.datatype.boolean(),
            reason: faker.random.words(),
            payload: faker.random.words(),
            signature: faker.random.words(),
          },
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/git/tags/:tag_sha', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          node_id: faker.random.words(),
          tag: faker.random.words(),
          sha: faker.random.words(),
          url: faker.random.words(),
          message: faker.random.words(),
          tagger: {
            date: faker.random.words(),
            email: faker.random.words(),
            name: faker.random.words(),
          },
          object: {
            sha: faker.random.words(),
            type: faker.random.words(),
            url: faker.random.words(),
          },
          verification: {
            verified: faker.datatype.boolean(),
            reason: faker.random.words(),
            payload: faker.random.words(),
            signature: faker.random.words(),
          },
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/repos/:owner/:repo/git/trees', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json({
          sha: faker.random.words(),
          url: faker.random.words(),
          truncated: faker.datatype.boolean(),
          tree: [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
            _ => ({
              path: faker.random.words(),
              mode: faker.random.words(),
              type: faker.random.words(),
              sha: faker.random.words(),
              size: faker.datatype.number(),
              url: faker.random.words(),
            })
          ),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/git/trees/:tree_sha', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          sha: faker.random.words(),
          url: faker.random.words(),
          truncated: faker.datatype.boolean(),
          tree: [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
            _ => ({
              path: faker.random.words(),
              mode: faker.random.words(),
              type: faker.random.words(),
              sha: faker.random.words(),
              size: faker.datatype.number(),
              url: faker.random.words(),
            })
          ),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/hooks', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            type: faker.random.words(),
            id: faker.datatype.number(),
            name: faker.random.words(),
            active: faker.datatype.boolean(),
            events: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            config: {
              email: faker.random.words(),
              password: faker.random.words(),
              room: faker.random.words(),
              subdomain: faker.random.words(),
              url: faker.random.words(),
              insecure_ssl: {},
              content_type: faker.random.words(),
              digest: faker.random.words(),
              secret: faker.random.words(),
              token: faker.random.words(),
            },
            updated_at: faker.random.words(),
            created_at: faker.random.words(),
            url: faker.random.words(),
            test_url: faker.random.words(),
            ping_url: faker.random.words(),
            deliveries_url: faker.random.words(),
            last_response: {
              code: faker.datatype.number(),
              status: faker.random.words(),
              message: faker.random.words(),
            },
          }))
        ),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/repos/:owner/:repo/hooks', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json({
          type: faker.random.words(),
          id: faker.datatype.number(),
          name: faker.random.words(),
          active: faker.datatype.boolean(),
          events: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
          config: {
            email: faker.random.words(),
            password: faker.random.words(),
            room: faker.random.words(),
            subdomain: faker.random.words(),
            url: faker.random.words(),
            insecure_ssl: {},
            content_type: faker.random.words(),
            digest: faker.random.words(),
            secret: faker.random.words(),
            token: faker.random.words(),
          },
          updated_at: faker.random.words(),
          created_at: faker.random.words(),
          url: faker.random.words(),
          test_url: faker.random.words(),
          ping_url: faker.random.words(),
          deliveries_url: faker.random.words(),
          last_response: {
            code: faker.datatype.number(),
            status: faker.random.words(),
            message: faker.random.words(),
          },
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/hooks/:hook_id', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          type: faker.random.words(),
          id: faker.datatype.number(),
          name: faker.random.words(),
          active: faker.datatype.boolean(),
          events: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
          config: {
            email: faker.random.words(),
            password: faker.random.words(),
            room: faker.random.words(),
            subdomain: faker.random.words(),
            url: faker.random.words(),
            insecure_ssl: {},
            content_type: faker.random.words(),
            digest: faker.random.words(),
            secret: faker.random.words(),
            token: faker.random.words(),
          },
          updated_at: faker.random.words(),
          created_at: faker.random.words(),
          url: faker.random.words(),
          test_url: faker.random.words(),
          ping_url: faker.random.words(),
          deliveries_url: faker.random.words(),
          last_response: {
            code: faker.datatype.number(),
            status: faker.random.words(),
            message: faker.random.words(),
          },
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.patch('/repos/:owner/:repo/hooks/:hook_id', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          type: faker.random.words(),
          id: faker.datatype.number(),
          name: faker.random.words(),
          active: faker.datatype.boolean(),
          events: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
          config: {
            email: faker.random.words(),
            password: faker.random.words(),
            room: faker.random.words(),
            subdomain: faker.random.words(),
            url: faker.random.words(),
            insecure_ssl: {},
            content_type: faker.random.words(),
            digest: faker.random.words(),
            secret: faker.random.words(),
            token: faker.random.words(),
          },
          updated_at: faker.random.words(),
          created_at: faker.random.words(),
          url: faker.random.words(),
          test_url: faker.random.words(),
          ping_url: faker.random.words(),
          deliveries_url: faker.random.words(),
          last_response: {
            code: faker.datatype.number(),
            status: faker.random.words(),
            message: faker.random.words(),
          },
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/repos/:owner/:repo/hooks/:hook_id', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/hooks/:hook_id/config', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          url: faker.random.words(),
          content_type: faker.random.words(),
          secret: faker.random.words(),
          insecure_ssl: {},
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.patch('/repos/:owner/:repo/hooks/:hook_id/config', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          url: faker.random.words(),
          content_type: faker.random.words(),
          secret: faker.random.words(),
          insecure_ssl: {},
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/hooks/:hook_id/deliveries', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.datatype.number(),
            guid: faker.random.words(),
            delivered_at: faker.random.words(),
            redelivery: faker.datatype.boolean(),
            duration: faker.datatype.number(),
            status: faker.random.words(),
            status_code: faker.datatype.number(),
            event: faker.random.words(),
            action: faker.random.words(),
            installation_id: faker.datatype.number(),
            repository_id: faker.datatype.number(),
          }))
        ),
      ],
      [
        ctx.status(400),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get(
    '/repos/:owner/:repo/hooks/:hook_id/deliveries/:delivery_id',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            guid: faker.random.words(),
            delivered_at: faker.random.words(),
            redelivery: faker.datatype.boolean(),
            duration: faker.datatype.number(),
            status: faker.random.words(),
            status_code: faker.datatype.number(),
            event: faker.random.words(),
            action: faker.random.words(),
            installation_id: faker.datatype.number(),
            repository_id: faker.datatype.number(),
            url: faker.random.words(),
            request: {
              headers: {},
              payload: {},
            },
            response: {
              headers: {},
              payload: faker.random.words(),
            },
          }),
        ],
        [
          ctx.status(400),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            errors: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              resource: faker.random.words(),
              field: faker.random.words(),
              message: faker.random.words(),
              code: faker.random.words(),
              index: faker.datatype.number(),
              value: {},
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.post(
    '/repos/:owner/:repo/hooks/:hook_id/deliveries/:delivery_id/attempts',
    (req, res, ctx) => {
      const resultArrray = [
        [ctx.status(202), ctx.json({})],
        [
          ctx.status(400),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            errors: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              resource: faker.random.words(),
              field: faker.random.words(),
              message: faker.random.words(),
              code: faker.random.words(),
              index: faker.datatype.number(),
              value: {},
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.post('/repos/:owner/:repo/hooks/:hook_id/pings', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/repos/:owner/:repo/hooks/:hook_id/tests', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/installation', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.datatype.number(),
          account: {},
          repository_selection: faker.random.arrayElement(['all', 'selected']),
          access_tokens_url: faker.random.words(),
          repositories_url: faker.random.words(),
          html_url: faker.random.words(),
          app_id: faker.datatype.number(),
          target_id: faker.datatype.number(),
          target_type: faker.random.words(),
          permissions: {
            actions: faker.random.arrayElement(['read', 'write']),
            administration: faker.random.arrayElement(['read', 'write']),
            checks: faker.random.arrayElement(['read', 'write']),
            contents: faker.random.arrayElement(['read', 'write']),
            deployments: faker.random.arrayElement(['read', 'write']),
            environments: faker.random.arrayElement(['read', 'write']),
            issues: faker.random.arrayElement(['read', 'write']),
            metadata: faker.random.arrayElement(['read', 'write']),
            packages: faker.random.arrayElement(['read', 'write']),
            pages: faker.random.arrayElement(['read', 'write']),
            pull_requests: faker.random.arrayElement(['read', 'write']),
            repository_hooks: faker.random.arrayElement(['read', 'write']),
            repository_projects: faker.random.arrayElement([
              'read',
              'write',
              'admin',
            ]),
            secret_scanning_alerts: faker.random.arrayElement([
              'read',
              'write',
            ]),
            secrets: faker.random.arrayElement(['read', 'write']),
            security_events: faker.random.arrayElement(['read', 'write']),
            single_file: faker.random.arrayElement(['read', 'write']),
            statuses: faker.random.arrayElement(['read', 'write']),
            vulnerability_alerts: faker.random.arrayElement(['read', 'write']),
            workflows: faker.random.arrayElement(['write']),
            members: faker.random.arrayElement(['read', 'write']),
            organization_administration: faker.random.arrayElement([
              'read',
              'write',
            ]),
            organization_hooks: faker.random.arrayElement(['read', 'write']),
            organization_plan: faker.random.arrayElement(['read']),
            organization_projects: faker.random.arrayElement([
              'read',
              'write',
              'admin',
            ]),
            organization_packages: faker.random.arrayElement(['read', 'write']),
            organization_secrets: faker.random.arrayElement(['read', 'write']),
            organization_self_hosted_runners: faker.random.arrayElement([
              'read',
              'write',
            ]),
            organization_user_blocking: faker.random.arrayElement([
              'read',
              'write',
            ]),
            team_discussions: faker.random.arrayElement(['read', 'write']),
            content_references: faker.random.arrayElement(['read', 'write']),
          },
          events: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          single_file_name: faker.random.words(),
          has_multiple_single_files: faker.datatype.boolean(),
          single_file_paths: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
          app_slug: faker.random.words(),
          suspended_by: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          suspended_at: faker.random.words(),
          contact_email: faker.random.words(),
        }),
      ],
      [
        ctx.status(301),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/invitations', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.datatype.number(),
            repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                license: {
                  key: faker.random.words(),
                  name: faker.random.words(),
                  url: faker.random.words(),
                  spdx_id: faker.random.words(),
                  node_id: faker.random.words(),
                  html_url: faker.random.words(),
                },
                organization: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                forks: faker.datatype.number(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                },
                owner: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                allow_rebase_merge: faker.datatype.boolean(),
                template_repository: {
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  name: faker.random.words(),
                  full_name: faker.random.words(),
                  owner: {
                    login: faker.random.words(),
                    id: faker.datatype.number(),
                    node_id: faker.random.words(),
                    avatar_url: faker.random.words(),
                    gravatar_id: faker.random.words(),
                    url: faker.random.words(),
                    html_url: faker.random.words(),
                    followers_url: faker.random.words(),
                    following_url: faker.random.words(),
                    gists_url: faker.random.words(),
                    starred_url: faker.random.words(),
                    subscriptions_url: faker.random.words(),
                    organizations_url: faker.random.words(),
                    repos_url: faker.random.words(),
                    events_url: faker.random.words(),
                    received_events_url: faker.random.words(),
                    type: faker.random.words(),
                    site_admin: faker.datatype.boolean(),
                  },
                  private: faker.datatype.boolean(),
                  html_url: faker.random.words(),
                  description: faker.random.words(),
                  fork: faker.datatype.boolean(),
                  url: faker.random.words(),
                  archive_url: faker.random.words(),
                  assignees_url: faker.random.words(),
                  blobs_url: faker.random.words(),
                  branches_url: faker.random.words(),
                  collaborators_url: faker.random.words(),
                  comments_url: faker.random.words(),
                  commits_url: faker.random.words(),
                  compare_url: faker.random.words(),
                  contents_url: faker.random.words(),
                  contributors_url: faker.random.words(),
                  deployments_url: faker.random.words(),
                  downloads_url: faker.random.words(),
                  events_url: faker.random.words(),
                  forks_url: faker.random.words(),
                  git_commits_url: faker.random.words(),
                  git_refs_url: faker.random.words(),
                  git_tags_url: faker.random.words(),
                  git_url: faker.random.words(),
                  issue_comment_url: faker.random.words(),
                  issue_events_url: faker.random.words(),
                  issues_url: faker.random.words(),
                  keys_url: faker.random.words(),
                  labels_url: faker.random.words(),
                  languages_url: faker.random.words(),
                  merges_url: faker.random.words(),
                  milestones_url: faker.random.words(),
                  notifications_url: faker.random.words(),
                  pulls_url: faker.random.words(),
                  releases_url: faker.random.words(),
                  ssh_url: faker.random.words(),
                  stargazers_url: faker.random.words(),
                  statuses_url: faker.random.words(),
                  subscribers_url: faker.random.words(),
                  subscription_url: faker.random.words(),
                  tags_url: faker.random.words(),
                  teams_url: faker.random.words(),
                  trees_url: faker.random.words(),
                  clone_url: faker.random.words(),
                  mirror_url: faker.random.words(),
                  hooks_url: faker.random.words(),
                  svn_url: faker.random.words(),
                  homepage: faker.random.words(),
                  language: faker.random.words(),
                  forks_count: faker.datatype.number(),
                  stargazers_count: faker.datatype.number(),
                  watchers_count: faker.datatype.number(),
                  size: faker.datatype.number(),
                  default_branch: faker.random.words(),
                  open_issues_count: faker.datatype.number(),
                  is_template: faker.datatype.boolean(),
                  topics: [
                    ...new Array(faker.datatype.number({ max: 100 })).keys(),
                  ].map(_ => faker.random.words()),
                  has_issues: faker.datatype.boolean(),
                  has_projects: faker.datatype.boolean(),
                  has_wiki: faker.datatype.boolean(),
                  has_pages: faker.datatype.boolean(),
                  has_downloads: faker.datatype.boolean(),
                  archived: faker.datatype.boolean(),
                  disabled: faker.datatype.boolean(),
                  visibility: faker.random.words(),
                  pushed_at: faker.random.words(),
                  created_at: faker.random.words(),
                  updated_at: faker.random.words(),
                  permissions: {
                    admin: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    pull: faker.datatype.boolean(),
                  },
                  allow_rebase_merge: faker.datatype.boolean(),
                  temp_clone_token: faker.random.words(),
                  allow_squash_merge: faker.datatype.boolean(),
                  allow_auto_merge: faker.datatype.boolean(),
                  delete_branch_on_merge: faker.datatype.boolean(),
                  allow_update_branch: faker.datatype.boolean(),
                  allow_merge_commit: faker.datatype.boolean(),
                  subscribers_count: faker.datatype.number(),
                  network_count: faker.datatype.number(),
                },
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                allow_forking: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
                open_issues: faker.datatype.number(),
                watchers: faker.datatype.number(),
                master_branch: faker.random.words(),
                starred_at: faker.random.words(),
              },
              temp_clone_token: faker.random.words(),
              delete_branch_on_merge: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              code_of_conduct: {
                key: faker.random.words(),
                name: faker.random.words(),
                url: faker.random.words(),
                body: faker.random.words(),
                html_url: faker.random.words(),
              },
              license: {
                key: faker.random.words(),
                name: faker.random.words(),
                spdx_id: faker.random.words(),
                url: faker.random.words(),
                node_id: faker.random.words(),
              },
              forks: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              allow_forking: faker.datatype.boolean(),
            },
            invitee: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            inviter: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            permissions: faker.random.arrayElement([
              'read',
              'write',
              'admin',
              'triage',
              'maintain',
            ]),
            created_at: faker.random.words(),
            expired: faker.datatype.boolean(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            node_id: faker.random.words(),
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.patch(
    '/repos/:owner/:repo/invitations/:invitation_id',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                license: {
                  key: faker.random.words(),
                  name: faker.random.words(),
                  url: faker.random.words(),
                  spdx_id: faker.random.words(),
                  node_id: faker.random.words(),
                  html_url: faker.random.words(),
                },
                organization: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                forks: faker.datatype.number(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                },
                owner: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                allow_rebase_merge: faker.datatype.boolean(),
                template_repository: {
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  name: faker.random.words(),
                  full_name: faker.random.words(),
                  owner: {
                    login: faker.random.words(),
                    id: faker.datatype.number(),
                    node_id: faker.random.words(),
                    avatar_url: faker.random.words(),
                    gravatar_id: faker.random.words(),
                    url: faker.random.words(),
                    html_url: faker.random.words(),
                    followers_url: faker.random.words(),
                    following_url: faker.random.words(),
                    gists_url: faker.random.words(),
                    starred_url: faker.random.words(),
                    subscriptions_url: faker.random.words(),
                    organizations_url: faker.random.words(),
                    repos_url: faker.random.words(),
                    events_url: faker.random.words(),
                    received_events_url: faker.random.words(),
                    type: faker.random.words(),
                    site_admin: faker.datatype.boolean(),
                  },
                  private: faker.datatype.boolean(),
                  html_url: faker.random.words(),
                  description: faker.random.words(),
                  fork: faker.datatype.boolean(),
                  url: faker.random.words(),
                  archive_url: faker.random.words(),
                  assignees_url: faker.random.words(),
                  blobs_url: faker.random.words(),
                  branches_url: faker.random.words(),
                  collaborators_url: faker.random.words(),
                  comments_url: faker.random.words(),
                  commits_url: faker.random.words(),
                  compare_url: faker.random.words(),
                  contents_url: faker.random.words(),
                  contributors_url: faker.random.words(),
                  deployments_url: faker.random.words(),
                  downloads_url: faker.random.words(),
                  events_url: faker.random.words(),
                  forks_url: faker.random.words(),
                  git_commits_url: faker.random.words(),
                  git_refs_url: faker.random.words(),
                  git_tags_url: faker.random.words(),
                  git_url: faker.random.words(),
                  issue_comment_url: faker.random.words(),
                  issue_events_url: faker.random.words(),
                  issues_url: faker.random.words(),
                  keys_url: faker.random.words(),
                  labels_url: faker.random.words(),
                  languages_url: faker.random.words(),
                  merges_url: faker.random.words(),
                  milestones_url: faker.random.words(),
                  notifications_url: faker.random.words(),
                  pulls_url: faker.random.words(),
                  releases_url: faker.random.words(),
                  ssh_url: faker.random.words(),
                  stargazers_url: faker.random.words(),
                  statuses_url: faker.random.words(),
                  subscribers_url: faker.random.words(),
                  subscription_url: faker.random.words(),
                  tags_url: faker.random.words(),
                  teams_url: faker.random.words(),
                  trees_url: faker.random.words(),
                  clone_url: faker.random.words(),
                  mirror_url: faker.random.words(),
                  hooks_url: faker.random.words(),
                  svn_url: faker.random.words(),
                  homepage: faker.random.words(),
                  language: faker.random.words(),
                  forks_count: faker.datatype.number(),
                  stargazers_count: faker.datatype.number(),
                  watchers_count: faker.datatype.number(),
                  size: faker.datatype.number(),
                  default_branch: faker.random.words(),
                  open_issues_count: faker.datatype.number(),
                  is_template: faker.datatype.boolean(),
                  topics: [
                    ...new Array(faker.datatype.number({ max: 100 })).keys(),
                  ].map(_ => faker.random.words()),
                  has_issues: faker.datatype.boolean(),
                  has_projects: faker.datatype.boolean(),
                  has_wiki: faker.datatype.boolean(),
                  has_pages: faker.datatype.boolean(),
                  has_downloads: faker.datatype.boolean(),
                  archived: faker.datatype.boolean(),
                  disabled: faker.datatype.boolean(),
                  visibility: faker.random.words(),
                  pushed_at: faker.random.words(),
                  created_at: faker.random.words(),
                  updated_at: faker.random.words(),
                  permissions: {
                    admin: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    pull: faker.datatype.boolean(),
                  },
                  allow_rebase_merge: faker.datatype.boolean(),
                  temp_clone_token: faker.random.words(),
                  allow_squash_merge: faker.datatype.boolean(),
                  allow_auto_merge: faker.datatype.boolean(),
                  delete_branch_on_merge: faker.datatype.boolean(),
                  allow_update_branch: faker.datatype.boolean(),
                  allow_merge_commit: faker.datatype.boolean(),
                  subscribers_count: faker.datatype.number(),
                  network_count: faker.datatype.number(),
                },
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                allow_forking: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
                open_issues: faker.datatype.number(),
                watchers: faker.datatype.number(),
                master_branch: faker.random.words(),
                starred_at: faker.random.words(),
              },
              temp_clone_token: faker.random.words(),
              delete_branch_on_merge: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              code_of_conduct: {
                key: faker.random.words(),
                name: faker.random.words(),
                url: faker.random.words(),
                body: faker.random.words(),
                html_url: faker.random.words(),
              },
              license: {
                key: faker.random.words(),
                name: faker.random.words(),
                spdx_id: faker.random.words(),
                url: faker.random.words(),
                node_id: faker.random.words(),
              },
              forks: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              allow_forking: faker.datatype.boolean(),
            },
            invitee: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            inviter: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            permissions: faker.random.arrayElement([
              'read',
              'write',
              'admin',
              'triage',
              'maintain',
            ]),
            created_at: faker.random.words(),
            expired: faker.datatype.boolean(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            node_id: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/repos/:owner/:repo/invitations/:invitation_id',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get('/repos/:owner/:repo/issues', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            url: faker.random.words(),
            repository_url: faker.random.words(),
            labels_url: faker.random.words(),
            comments_url: faker.random.words(),
            events_url: faker.random.words(),
            html_url: faker.random.words(),
            number: faker.datatype.number(),
            state: faker.random.words(),
            title: faker.random.words(),
            body: faker.random.words(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            labels: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({})),
            assignee: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            assignees: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            })),
            milestone: {
              url: faker.random.words(),
              html_url: faker.random.words(),
              labels_url: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              number: faker.datatype.number(),
              state: faker.random.arrayElement(['open', 'closed']),
              title: faker.random.words(),
              description: faker.random.words(),
              creator: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              open_issues: faker.datatype.number(),
              closed_issues: faker.datatype.number(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              closed_at: faker.random.words(),
              due_on: faker.random.words(),
            },
            locked: faker.datatype.boolean(),
            active_lock_reason: faker.random.words(),
            comments: faker.datatype.number(),
            pull_request: {
              merged_at: faker.random.words(),
              diff_url: faker.random.words(),
              html_url: faker.random.words(),
              patch_url: faker.random.words(),
              url: faker.random.words(),
            },
            closed_at: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            draft: faker.datatype.boolean(),
            closed_by: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            body_html: faker.random.words(),
            body_text: faker.random.words(),
            timeline_url: faker.random.words(),
            repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              license: {
                key: faker.random.words(),
                name: faker.random.words(),
                url: faker.random.words(),
                spdx_id: faker.random.words(),
                node_id: faker.random.words(),
                html_url: faker.random.words(),
              },
              organization: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              allow_rebase_merge: faker.datatype.boolean(),
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                owner: {
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.random.words(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.random.words(),
              starred_at: faker.random.words(),
            },
            performed_via_github_app: {
              id: faker.datatype.number(),
              slug: faker.random.words(),
              node_id: faker.random.words(),
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              name: faker.random.words(),
              description: faker.random.words(),
              external_url: faker.random.words(),
              html_url: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                issues: faker.random.words(),
                checks: faker.random.words(),
                metadata: faker.random.words(),
                contents: faker.random.words(),
                deployments: faker.random.words(),
              },
              events: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              installations_count: faker.datatype.number(),
              client_id: faker.random.words(),
              client_secret: faker.random.words(),
              webhook_secret: faker.random.words(),
              pem: faker.random.words(),
            },
            author_association: faker.random.arrayElement([
              'COLLABORATOR',
              'CONTRIBUTOR',
              'FIRST_TIMER',
              'FIRST_TIME_CONTRIBUTOR',
              'MANNEQUIN',
              'MEMBER',
              'NONE',
              'OWNER',
            ]),
            reactions: {
              url: faker.random.words(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }))
        ),
      ],
      [
        ctx.status(301),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/repos/:owner/:repo/issues', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json({
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          url: faker.random.words(),
          repository_url: faker.random.words(),
          labels_url: faker.random.words(),
          comments_url: faker.random.words(),
          events_url: faker.random.words(),
          html_url: faker.random.words(),
          number: faker.datatype.number(),
          state: faker.random.words(),
          title: faker.random.words(),
          body: faker.random.words(),
          user: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          labels: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({})),
          assignee: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          assignees: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          })),
          milestone: {
            url: faker.random.words(),
            html_url: faker.random.words(),
            labels_url: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            number: faker.datatype.number(),
            state: faker.random.arrayElement(['open', 'closed']),
            title: faker.random.words(),
            description: faker.random.words(),
            creator: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            open_issues: faker.datatype.number(),
            closed_issues: faker.datatype.number(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            closed_at: faker.random.words(),
            due_on: faker.random.words(),
          },
          locked: faker.datatype.boolean(),
          active_lock_reason: faker.random.words(),
          comments: faker.datatype.number(),
          pull_request: {
            merged_at: faker.random.words(),
            diff_url: faker.random.words(),
            html_url: faker.random.words(),
            patch_url: faker.random.words(),
            url: faker.random.words(),
          },
          closed_at: faker.random.words(),
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          draft: faker.datatype.boolean(),
          closed_by: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          body_html: faker.random.words(),
          body_text: faker.random.words(),
          timeline_url: faker.random.words(),
          repository: {
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            full_name: faker.random.words(),
            license: {
              key: faker.random.words(),
              name: faker.random.words(),
              url: faker.random.words(),
              spdx_id: faker.random.words(),
              node_id: faker.random.words(),
              html_url: faker.random.words(),
            },
            organization: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.random.words(),
            description: faker.random.words(),
            fork: faker.datatype.boolean(),
            url: faker.random.words(),
            archive_url: faker.random.words(),
            assignees_url: faker.random.words(),
            blobs_url: faker.random.words(),
            branches_url: faker.random.words(),
            collaborators_url: faker.random.words(),
            comments_url: faker.random.words(),
            commits_url: faker.random.words(),
            compare_url: faker.random.words(),
            contents_url: faker.random.words(),
            contributors_url: faker.random.words(),
            deployments_url: faker.random.words(),
            downloads_url: faker.random.words(),
            events_url: faker.random.words(),
            forks_url: faker.random.words(),
            git_commits_url: faker.random.words(),
            git_refs_url: faker.random.words(),
            git_tags_url: faker.random.words(),
            git_url: faker.random.words(),
            issue_comment_url: faker.random.words(),
            issue_events_url: faker.random.words(),
            issues_url: faker.random.words(),
            keys_url: faker.random.words(),
            labels_url: faker.random.words(),
            languages_url: faker.random.words(),
            merges_url: faker.random.words(),
            milestones_url: faker.random.words(),
            notifications_url: faker.random.words(),
            pulls_url: faker.random.words(),
            releases_url: faker.random.words(),
            ssh_url: faker.random.words(),
            stargazers_url: faker.random.words(),
            statuses_url: faker.random.words(),
            subscribers_url: faker.random.words(),
            subscription_url: faker.random.words(),
            tags_url: faker.random.words(),
            teams_url: faker.random.words(),
            trees_url: faker.random.words(),
            clone_url: faker.random.words(),
            mirror_url: faker.random.words(),
            hooks_url: faker.random.words(),
            svn_url: faker.random.words(),
            homepage: faker.random.words(),
            language: faker.random.words(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.random.words(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.random.words(),
            pushed_at: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            allow_rebase_merge: faker.datatype.boolean(),
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              owner: {
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.random.words(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.random.words(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.random.words(),
            starred_at: faker.random.words(),
          },
          performed_via_github_app: {
            id: faker.datatype.number(),
            slug: faker.random.words(),
            node_id: faker.random.words(),
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            name: faker.random.words(),
            description: faker.random.words(),
            external_url: faker.random.words(),
            html_url: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            permissions: {
              issues: faker.random.words(),
              checks: faker.random.words(),
              metadata: faker.random.words(),
              contents: faker.random.words(),
              deployments: faker.random.words(),
            },
            events: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            installations_count: faker.datatype.number(),
            client_id: faker.random.words(),
            client_secret: faker.random.words(),
            webhook_secret: faker.random.words(),
            pem: faker.random.words(),
          },
          author_association: faker.random.arrayElement([
            'COLLABORATOR',
            'CONTRIBUTOR',
            'FIRST_TIMER',
            'FIRST_TIME_CONTRIBUTOR',
            'MANNEQUIN',
            'MEMBER',
            'NONE',
            'OWNER',
          ]),
          reactions: {
            url: faker.random.words(),
            total_count: faker.datatype.number(),
            '+1': faker.datatype.number(),
            '-1': faker.datatype.number(),
            laugh: faker.datatype.number(),
            confused: faker.datatype.number(),
            heart: faker.datatype.number(),
            hooray: faker.datatype.number(),
            eyes: faker.datatype.number(),
            rocket: faker.datatype.number(),
          },
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(410),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
      [
        ctx.status(503),
        ctx.json({
          code: faker.random.words(),
          message: faker.random.words(),
          documentation_url: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/issues/comments', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            url: faker.random.words(),
            body: faker.random.words(),
            body_text: faker.random.words(),
            body_html: faker.random.words(),
            html_url: faker.random.words(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            issue_url: faker.random.words(),
            author_association: faker.random.arrayElement([
              'COLLABORATOR',
              'CONTRIBUTOR',
              'FIRST_TIMER',
              'FIRST_TIME_CONTRIBUTOR',
              'MANNEQUIN',
              'MEMBER',
              'NONE',
              'OWNER',
            ]),
            performed_via_github_app: {
              id: faker.datatype.number(),
              slug: faker.random.words(),
              node_id: faker.random.words(),
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              name: faker.random.words(),
              description: faker.random.words(),
              external_url: faker.random.words(),
              html_url: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                issues: faker.random.words(),
                checks: faker.random.words(),
                metadata: faker.random.words(),
                contents: faker.random.words(),
                deployments: faker.random.words(),
              },
              events: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              installations_count: faker.datatype.number(),
              client_id: faker.random.words(),
              client_secret: faker.random.words(),
              webhook_secret: faker.random.words(),
              pem: faker.random.words(),
            },
            reactions: {
              url: faker.random.words(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }))
        ),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get(
    '/repos/:owner/:repo/issues/comments/:comment_id',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            url: faker.random.words(),
            body: faker.random.words(),
            body_text: faker.random.words(),
            body_html: faker.random.words(),
            html_url: faker.random.words(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            issue_url: faker.random.words(),
            author_association: faker.random.arrayElement([
              'COLLABORATOR',
              'CONTRIBUTOR',
              'FIRST_TIMER',
              'FIRST_TIME_CONTRIBUTOR',
              'MANNEQUIN',
              'MEMBER',
              'NONE',
              'OWNER',
            ]),
            performed_via_github_app: {
              id: faker.datatype.number(),
              slug: faker.random.words(),
              node_id: faker.random.words(),
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              name: faker.random.words(),
              description: faker.random.words(),
              external_url: faker.random.words(),
              html_url: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                issues: faker.random.words(),
                checks: faker.random.words(),
                metadata: faker.random.words(),
                contents: faker.random.words(),
                deployments: faker.random.words(),
              },
              events: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              installations_count: faker.datatype.number(),
              client_id: faker.random.words(),
              client_secret: faker.random.words(),
              webhook_secret: faker.random.words(),
              pem: faker.random.words(),
            },
            reactions: {
              url: faker.random.words(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.patch(
    '/repos/:owner/:repo/issues/comments/:comment_id',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            url: faker.random.words(),
            body: faker.random.words(),
            body_text: faker.random.words(),
            body_html: faker.random.words(),
            html_url: faker.random.words(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            issue_url: faker.random.words(),
            author_association: faker.random.arrayElement([
              'COLLABORATOR',
              'CONTRIBUTOR',
              'FIRST_TIMER',
              'FIRST_TIME_CONTRIBUTOR',
              'MANNEQUIN',
              'MEMBER',
              'NONE',
              'OWNER',
            ]),
            performed_via_github_app: {
              id: faker.datatype.number(),
              slug: faker.random.words(),
              node_id: faker.random.words(),
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              name: faker.random.words(),
              description: faker.random.words(),
              external_url: faker.random.words(),
              html_url: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                issues: faker.random.words(),
                checks: faker.random.words(),
                metadata: faker.random.words(),
                contents: faker.random.words(),
                deployments: faker.random.words(),
              },
              events: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              installations_count: faker.datatype.number(),
              client_id: faker.random.words(),
              client_secret: faker.random.words(),
              webhook_secret: faker.random.words(),
              pem: faker.random.words(),
            },
            reactions: {
              url: faker.random.words(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            errors: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              resource: faker.random.words(),
              field: faker.random.words(),
              message: faker.random.words(),
              code: faker.random.words(),
              index: faker.datatype.number(),
              value: {},
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/repos/:owner/:repo/issues/comments/:comment_id',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/repos/:owner/:repo/issues/comments/:comment_id/reactions',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json(
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
              _ => ({
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                user: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                content: faker.random.arrayElement([
                  '+1',
                  '-1',
                  'laugh',
                  'confused',
                  'heart',
                  'hooray',
                  'rocket',
                  'eyes',
                ]),
                created_at: faker.random.words(),
              })
            )
          ),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.post(
    '/repos/:owner/:repo/issues/comments/:comment_id/reactions',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            content: faker.random.arrayElement([
              '+1',
              '-1',
              'laugh',
              'confused',
              'heart',
              'hooray',
              'rocket',
              'eyes',
            ]),
            created_at: faker.random.words(),
          }),
        ],
        [
          ctx.status(201),
          ctx.json({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            content: faker.random.arrayElement([
              '+1',
              '-1',
              'laugh',
              'confused',
              'heart',
              'hooray',
              'rocket',
              'eyes',
            ]),
            created_at: faker.random.words(),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            errors: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              resource: faker.random.words(),
              field: faker.random.words(),
              message: faker.random.words(),
              code: faker.random.words(),
              index: faker.datatype.number(),
              value: {},
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/repos/:owner/:repo/issues/comments/:comment_id/reactions/:reaction_id',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get('/repos/:owner/:repo/issues/events', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            url: faker.random.words(),
            actor: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            event: faker.random.words(),
            commit_id: faker.random.words(),
            commit_url: faker.random.words(),
            created_at: faker.random.words(),
            issue: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              url: faker.random.words(),
              repository_url: faker.random.words(),
              labels_url: faker.random.words(),
              comments_url: faker.random.words(),
              events_url: faker.random.words(),
              html_url: faker.random.words(),
              number: faker.datatype.number(),
              state: faker.random.words(),
              title: faker.random.words(),
              body: faker.random.words(),
              user: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              labels: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => ({})),
              assignee: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              assignees: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => ({
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              })),
              milestone: {
                url: faker.random.words(),
                html_url: faker.random.words(),
                labels_url: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                number: faker.datatype.number(),
                state: faker.random.arrayElement(['open', 'closed']),
                title: faker.random.words(),
                description: faker.random.words(),
                creator: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                open_issues: faker.datatype.number(),
                closed_issues: faker.datatype.number(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                closed_at: faker.random.words(),
                due_on: faker.random.words(),
              },
              locked: faker.datatype.boolean(),
              active_lock_reason: faker.random.words(),
              comments: faker.datatype.number(),
              pull_request: {
                merged_at: faker.random.words(),
                diff_url: faker.random.words(),
                html_url: faker.random.words(),
                patch_url: faker.random.words(),
                url: faker.random.words(),
              },
              closed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              draft: faker.datatype.boolean(),
              closed_by: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              body_html: faker.random.words(),
              body_text: faker.random.words(),
              timeline_url: faker.random.words(),
              repository: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                license: {
                  key: faker.random.words(),
                  name: faker.random.words(),
                  url: faker.random.words(),
                  spdx_id: faker.random.words(),
                  node_id: faker.random.words(),
                  html_url: faker.random.words(),
                },
                organization: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                forks: faker.datatype.number(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                },
                owner: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                allow_rebase_merge: faker.datatype.boolean(),
                template_repository: {
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  name: faker.random.words(),
                  full_name: faker.random.words(),
                  owner: {
                    login: faker.random.words(),
                    id: faker.datatype.number(),
                    node_id: faker.random.words(),
                    avatar_url: faker.random.words(),
                    gravatar_id: faker.random.words(),
                    url: faker.random.words(),
                    html_url: faker.random.words(),
                    followers_url: faker.random.words(),
                    following_url: faker.random.words(),
                    gists_url: faker.random.words(),
                    starred_url: faker.random.words(),
                    subscriptions_url: faker.random.words(),
                    organizations_url: faker.random.words(),
                    repos_url: faker.random.words(),
                    events_url: faker.random.words(),
                    received_events_url: faker.random.words(),
                    type: faker.random.words(),
                    site_admin: faker.datatype.boolean(),
                  },
                  private: faker.datatype.boolean(),
                  html_url: faker.random.words(),
                  description: faker.random.words(),
                  fork: faker.datatype.boolean(),
                  url: faker.random.words(),
                  archive_url: faker.random.words(),
                  assignees_url: faker.random.words(),
                  blobs_url: faker.random.words(),
                  branches_url: faker.random.words(),
                  collaborators_url: faker.random.words(),
                  comments_url: faker.random.words(),
                  commits_url: faker.random.words(),
                  compare_url: faker.random.words(),
                  contents_url: faker.random.words(),
                  contributors_url: faker.random.words(),
                  deployments_url: faker.random.words(),
                  downloads_url: faker.random.words(),
                  events_url: faker.random.words(),
                  forks_url: faker.random.words(),
                  git_commits_url: faker.random.words(),
                  git_refs_url: faker.random.words(),
                  git_tags_url: faker.random.words(),
                  git_url: faker.random.words(),
                  issue_comment_url: faker.random.words(),
                  issue_events_url: faker.random.words(),
                  issues_url: faker.random.words(),
                  keys_url: faker.random.words(),
                  labels_url: faker.random.words(),
                  languages_url: faker.random.words(),
                  merges_url: faker.random.words(),
                  milestones_url: faker.random.words(),
                  notifications_url: faker.random.words(),
                  pulls_url: faker.random.words(),
                  releases_url: faker.random.words(),
                  ssh_url: faker.random.words(),
                  stargazers_url: faker.random.words(),
                  statuses_url: faker.random.words(),
                  subscribers_url: faker.random.words(),
                  subscription_url: faker.random.words(),
                  tags_url: faker.random.words(),
                  teams_url: faker.random.words(),
                  trees_url: faker.random.words(),
                  clone_url: faker.random.words(),
                  mirror_url: faker.random.words(),
                  hooks_url: faker.random.words(),
                  svn_url: faker.random.words(),
                  homepage: faker.random.words(),
                  language: faker.random.words(),
                  forks_count: faker.datatype.number(),
                  stargazers_count: faker.datatype.number(),
                  watchers_count: faker.datatype.number(),
                  size: faker.datatype.number(),
                  default_branch: faker.random.words(),
                  open_issues_count: faker.datatype.number(),
                  is_template: faker.datatype.boolean(),
                  topics: [
                    ...new Array(faker.datatype.number({ max: 100 })).keys(),
                  ].map(_ => faker.random.words()),
                  has_issues: faker.datatype.boolean(),
                  has_projects: faker.datatype.boolean(),
                  has_wiki: faker.datatype.boolean(),
                  has_pages: faker.datatype.boolean(),
                  has_downloads: faker.datatype.boolean(),
                  archived: faker.datatype.boolean(),
                  disabled: faker.datatype.boolean(),
                  visibility: faker.random.words(),
                  pushed_at: faker.random.words(),
                  created_at: faker.random.words(),
                  updated_at: faker.random.words(),
                  permissions: {
                    admin: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    pull: faker.datatype.boolean(),
                  },
                  allow_rebase_merge: faker.datatype.boolean(),
                  temp_clone_token: faker.random.words(),
                  allow_squash_merge: faker.datatype.boolean(),
                  allow_auto_merge: faker.datatype.boolean(),
                  delete_branch_on_merge: faker.datatype.boolean(),
                  allow_update_branch: faker.datatype.boolean(),
                  allow_merge_commit: faker.datatype.boolean(),
                  subscribers_count: faker.datatype.number(),
                  network_count: faker.datatype.number(),
                },
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                allow_forking: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
                open_issues: faker.datatype.number(),
                watchers: faker.datatype.number(),
                master_branch: faker.random.words(),
                starred_at: faker.random.words(),
              },
              performed_via_github_app: {
                id: faker.datatype.number(),
                slug: faker.random.words(),
                node_id: faker.random.words(),
                owner: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                name: faker.random.words(),
                description: faker.random.words(),
                external_url: faker.random.words(),
                html_url: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                permissions: {
                  issues: faker.random.words(),
                  checks: faker.random.words(),
                  metadata: faker.random.words(),
                  contents: faker.random.words(),
                  deployments: faker.random.words(),
                },
                events: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                installations_count: faker.datatype.number(),
                client_id: faker.random.words(),
                client_secret: faker.random.words(),
                webhook_secret: faker.random.words(),
                pem: faker.random.words(),
              },
              author_association: faker.random.arrayElement([
                'COLLABORATOR',
                'CONTRIBUTOR',
                'FIRST_TIMER',
                'FIRST_TIME_CONTRIBUTOR',
                'MANNEQUIN',
                'MEMBER',
                'NONE',
                'OWNER',
              ]),
              reactions: {
                url: faker.random.words(),
                total_count: faker.datatype.number(),
                '+1': faker.datatype.number(),
                '-1': faker.datatype.number(),
                laugh: faker.datatype.number(),
                confused: faker.datatype.number(),
                heart: faker.datatype.number(),
                hooray: faker.datatype.number(),
                eyes: faker.datatype.number(),
                rocket: faker.datatype.number(),
              },
            },
            label: {
              name: faker.random.words(),
              color: faker.random.words(),
            },
            assignee: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            assigner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            review_requester: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            requested_reviewer: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            requested_team: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              slug: faker.random.words(),
              description: faker.random.words(),
              privacy: faker.random.words(),
              permission: faker.random.words(),
              permissions: {
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                admin: faker.datatype.boolean(),
              },
              url: faker.random.words(),
              html_url: faker.random.words(),
              members_url: faker.random.words(),
              repositories_url: faker.random.words(),
              parent: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                url: faker.random.words(),
                members_url: faker.random.words(),
                name: faker.random.words(),
                description: faker.random.words(),
                permission: faker.random.words(),
                privacy: faker.random.words(),
                html_url: faker.random.words(),
                repositories_url: faker.random.words(),
                slug: faker.random.words(),
                ldap_dn: faker.random.words(),
              },
            },
            dismissed_review: {
              state: faker.random.words(),
              review_id: faker.datatype.number(),
              dismissal_message: faker.random.words(),
              dismissal_commit_id: faker.random.words(),
            },
            milestone: {
              title: faker.random.words(),
            },
            project_card: {
              url: faker.random.words(),
              id: faker.datatype.number(),
              project_url: faker.random.words(),
              project_id: faker.datatype.number(),
              column_name: faker.random.words(),
              previous_column_name: faker.random.words(),
            },
            rename: {
              from: faker.random.words(),
              to: faker.random.words(),
            },
            author_association: faker.random.arrayElement([
              'COLLABORATOR',
              'CONTRIBUTOR',
              'FIRST_TIMER',
              'FIRST_TIME_CONTRIBUTOR',
              'MANNEQUIN',
              'MEMBER',
              'NONE',
              'OWNER',
            ]),
            lock_reason: faker.random.words(),
            performed_via_github_app: {
              id: faker.datatype.number(),
              slug: faker.random.words(),
              node_id: faker.random.words(),
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              name: faker.random.words(),
              description: faker.random.words(),
              external_url: faker.random.words(),
              html_url: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                issues: faker.random.words(),
                checks: faker.random.words(),
                metadata: faker.random.words(),
                contents: faker.random.words(),
                deployments: faker.random.words(),
              },
              events: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              installations_count: faker.datatype.number(),
              client_id: faker.random.words(),
              client_secret: faker.random.words(),
              webhook_secret: faker.random.words(),
              pem: faker.random.words(),
            },
          }))
        ),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/issues/events/:event_id', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          url: faker.random.words(),
          actor: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          event: faker.random.words(),
          commit_id: faker.random.words(),
          commit_url: faker.random.words(),
          created_at: faker.random.words(),
          issue: {
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            url: faker.random.words(),
            repository_url: faker.random.words(),
            labels_url: faker.random.words(),
            comments_url: faker.random.words(),
            events_url: faker.random.words(),
            html_url: faker.random.words(),
            number: faker.datatype.number(),
            state: faker.random.words(),
            title: faker.random.words(),
            body: faker.random.words(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            labels: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({})),
            assignee: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            assignees: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            })),
            milestone: {
              url: faker.random.words(),
              html_url: faker.random.words(),
              labels_url: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              number: faker.datatype.number(),
              state: faker.random.arrayElement(['open', 'closed']),
              title: faker.random.words(),
              description: faker.random.words(),
              creator: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              open_issues: faker.datatype.number(),
              closed_issues: faker.datatype.number(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              closed_at: faker.random.words(),
              due_on: faker.random.words(),
            },
            locked: faker.datatype.boolean(),
            active_lock_reason: faker.random.words(),
            comments: faker.datatype.number(),
            pull_request: {
              merged_at: faker.random.words(),
              diff_url: faker.random.words(),
              html_url: faker.random.words(),
              patch_url: faker.random.words(),
              url: faker.random.words(),
            },
            closed_at: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            draft: faker.datatype.boolean(),
            closed_by: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            body_html: faker.random.words(),
            body_text: faker.random.words(),
            timeline_url: faker.random.words(),
            repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              license: {
                key: faker.random.words(),
                name: faker.random.words(),
                url: faker.random.words(),
                spdx_id: faker.random.words(),
                node_id: faker.random.words(),
                html_url: faker.random.words(),
              },
              organization: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              allow_rebase_merge: faker.datatype.boolean(),
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                owner: {
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.random.words(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.random.words(),
              starred_at: faker.random.words(),
            },
            performed_via_github_app: {
              id: faker.datatype.number(),
              slug: faker.random.words(),
              node_id: faker.random.words(),
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              name: faker.random.words(),
              description: faker.random.words(),
              external_url: faker.random.words(),
              html_url: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                issues: faker.random.words(),
                checks: faker.random.words(),
                metadata: faker.random.words(),
                contents: faker.random.words(),
                deployments: faker.random.words(),
              },
              events: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              installations_count: faker.datatype.number(),
              client_id: faker.random.words(),
              client_secret: faker.random.words(),
              webhook_secret: faker.random.words(),
              pem: faker.random.words(),
            },
            author_association: faker.random.arrayElement([
              'COLLABORATOR',
              'CONTRIBUTOR',
              'FIRST_TIMER',
              'FIRST_TIME_CONTRIBUTOR',
              'MANNEQUIN',
              'MEMBER',
              'NONE',
              'OWNER',
            ]),
            reactions: {
              url: faker.random.words(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          },
          label: {
            name: faker.random.words(),
            color: faker.random.words(),
          },
          assignee: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          assigner: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          review_requester: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          requested_reviewer: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          requested_team: {
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            slug: faker.random.words(),
            description: faker.random.words(),
            privacy: faker.random.words(),
            permission: faker.random.words(),
            permissions: {
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              admin: faker.datatype.boolean(),
            },
            url: faker.random.words(),
            html_url: faker.random.words(),
            members_url: faker.random.words(),
            repositories_url: faker.random.words(),
            parent: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              url: faker.random.words(),
              members_url: faker.random.words(),
              name: faker.random.words(),
              description: faker.random.words(),
              permission: faker.random.words(),
              privacy: faker.random.words(),
              html_url: faker.random.words(),
              repositories_url: faker.random.words(),
              slug: faker.random.words(),
              ldap_dn: faker.random.words(),
            },
          },
          dismissed_review: {
            state: faker.random.words(),
            review_id: faker.datatype.number(),
            dismissal_message: faker.random.words(),
            dismissal_commit_id: faker.random.words(),
          },
          milestone: {
            title: faker.random.words(),
          },
          project_card: {
            url: faker.random.words(),
            id: faker.datatype.number(),
            project_url: faker.random.words(),
            project_id: faker.datatype.number(),
            column_name: faker.random.words(),
            previous_column_name: faker.random.words(),
          },
          rename: {
            from: faker.random.words(),
            to: faker.random.words(),
          },
          author_association: faker.random.arrayElement([
            'COLLABORATOR',
            'CONTRIBUTOR',
            'FIRST_TIMER',
            'FIRST_TIME_CONTRIBUTOR',
            'MANNEQUIN',
            'MEMBER',
            'NONE',
            'OWNER',
          ]),
          lock_reason: faker.random.words(),
          performed_via_github_app: {
            id: faker.datatype.number(),
            slug: faker.random.words(),
            node_id: faker.random.words(),
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            name: faker.random.words(),
            description: faker.random.words(),
            external_url: faker.random.words(),
            html_url: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            permissions: {
              issues: faker.random.words(),
              checks: faker.random.words(),
              metadata: faker.random.words(),
              contents: faker.random.words(),
              deployments: faker.random.words(),
            },
            events: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            installations_count: faker.datatype.number(),
            client_id: faker.random.words(),
            client_secret: faker.random.words(),
            webhook_secret: faker.random.words(),
            pem: faker.random.words(),
          },
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(410),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/issues/:issue_number', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          url: faker.random.words(),
          repository_url: faker.random.words(),
          labels_url: faker.random.words(),
          comments_url: faker.random.words(),
          events_url: faker.random.words(),
          html_url: faker.random.words(),
          number: faker.datatype.number(),
          state: faker.random.words(),
          title: faker.random.words(),
          body: faker.random.words(),
          user: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          labels: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({})),
          assignee: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          assignees: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          })),
          milestone: {
            url: faker.random.words(),
            html_url: faker.random.words(),
            labels_url: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            number: faker.datatype.number(),
            state: faker.random.arrayElement(['open', 'closed']),
            title: faker.random.words(),
            description: faker.random.words(),
            creator: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            open_issues: faker.datatype.number(),
            closed_issues: faker.datatype.number(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            closed_at: faker.random.words(),
            due_on: faker.random.words(),
          },
          locked: faker.datatype.boolean(),
          active_lock_reason: faker.random.words(),
          comments: faker.datatype.number(),
          pull_request: {
            merged_at: faker.random.words(),
            diff_url: faker.random.words(),
            html_url: faker.random.words(),
            patch_url: faker.random.words(),
            url: faker.random.words(),
          },
          closed_at: faker.random.words(),
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          draft: faker.datatype.boolean(),
          closed_by: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          body_html: faker.random.words(),
          body_text: faker.random.words(),
          timeline_url: faker.random.words(),
          repository: {
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            full_name: faker.random.words(),
            license: {
              key: faker.random.words(),
              name: faker.random.words(),
              url: faker.random.words(),
              spdx_id: faker.random.words(),
              node_id: faker.random.words(),
              html_url: faker.random.words(),
            },
            organization: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.random.words(),
            description: faker.random.words(),
            fork: faker.datatype.boolean(),
            url: faker.random.words(),
            archive_url: faker.random.words(),
            assignees_url: faker.random.words(),
            blobs_url: faker.random.words(),
            branches_url: faker.random.words(),
            collaborators_url: faker.random.words(),
            comments_url: faker.random.words(),
            commits_url: faker.random.words(),
            compare_url: faker.random.words(),
            contents_url: faker.random.words(),
            contributors_url: faker.random.words(),
            deployments_url: faker.random.words(),
            downloads_url: faker.random.words(),
            events_url: faker.random.words(),
            forks_url: faker.random.words(),
            git_commits_url: faker.random.words(),
            git_refs_url: faker.random.words(),
            git_tags_url: faker.random.words(),
            git_url: faker.random.words(),
            issue_comment_url: faker.random.words(),
            issue_events_url: faker.random.words(),
            issues_url: faker.random.words(),
            keys_url: faker.random.words(),
            labels_url: faker.random.words(),
            languages_url: faker.random.words(),
            merges_url: faker.random.words(),
            milestones_url: faker.random.words(),
            notifications_url: faker.random.words(),
            pulls_url: faker.random.words(),
            releases_url: faker.random.words(),
            ssh_url: faker.random.words(),
            stargazers_url: faker.random.words(),
            statuses_url: faker.random.words(),
            subscribers_url: faker.random.words(),
            subscription_url: faker.random.words(),
            tags_url: faker.random.words(),
            teams_url: faker.random.words(),
            trees_url: faker.random.words(),
            clone_url: faker.random.words(),
            mirror_url: faker.random.words(),
            hooks_url: faker.random.words(),
            svn_url: faker.random.words(),
            homepage: faker.random.words(),
            language: faker.random.words(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.random.words(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.random.words(),
            pushed_at: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            allow_rebase_merge: faker.datatype.boolean(),
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              owner: {
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.random.words(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.random.words(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.random.words(),
            starred_at: faker.random.words(),
          },
          performed_via_github_app: {
            id: faker.datatype.number(),
            slug: faker.random.words(),
            node_id: faker.random.words(),
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            name: faker.random.words(),
            description: faker.random.words(),
            external_url: faker.random.words(),
            html_url: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            permissions: {
              issues: faker.random.words(),
              checks: faker.random.words(),
              metadata: faker.random.words(),
              contents: faker.random.words(),
              deployments: faker.random.words(),
            },
            events: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            installations_count: faker.datatype.number(),
            client_id: faker.random.words(),
            client_secret: faker.random.words(),
            webhook_secret: faker.random.words(),
            pem: faker.random.words(),
          },
          author_association: faker.random.arrayElement([
            'COLLABORATOR',
            'CONTRIBUTOR',
            'FIRST_TIMER',
            'FIRST_TIME_CONTRIBUTOR',
            'MANNEQUIN',
            'MEMBER',
            'NONE',
            'OWNER',
          ]),
          reactions: {
            url: faker.random.words(),
            total_count: faker.datatype.number(),
            '+1': faker.datatype.number(),
            '-1': faker.datatype.number(),
            laugh: faker.datatype.number(),
            confused: faker.datatype.number(),
            heart: faker.datatype.number(),
            hooray: faker.datatype.number(),
            eyes: faker.datatype.number(),
            rocket: faker.datatype.number(),
          },
        }),
      ],
      [
        ctx.status(301),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(410),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.patch('/repos/:owner/:repo/issues/:issue_number', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          url: faker.random.words(),
          repository_url: faker.random.words(),
          labels_url: faker.random.words(),
          comments_url: faker.random.words(),
          events_url: faker.random.words(),
          html_url: faker.random.words(),
          number: faker.datatype.number(),
          state: faker.random.words(),
          title: faker.random.words(),
          body: faker.random.words(),
          user: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          labels: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({})),
          assignee: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          assignees: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          })),
          milestone: {
            url: faker.random.words(),
            html_url: faker.random.words(),
            labels_url: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            number: faker.datatype.number(),
            state: faker.random.arrayElement(['open', 'closed']),
            title: faker.random.words(),
            description: faker.random.words(),
            creator: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            open_issues: faker.datatype.number(),
            closed_issues: faker.datatype.number(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            closed_at: faker.random.words(),
            due_on: faker.random.words(),
          },
          locked: faker.datatype.boolean(),
          active_lock_reason: faker.random.words(),
          comments: faker.datatype.number(),
          pull_request: {
            merged_at: faker.random.words(),
            diff_url: faker.random.words(),
            html_url: faker.random.words(),
            patch_url: faker.random.words(),
            url: faker.random.words(),
          },
          closed_at: faker.random.words(),
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          draft: faker.datatype.boolean(),
          closed_by: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          body_html: faker.random.words(),
          body_text: faker.random.words(),
          timeline_url: faker.random.words(),
          repository: {
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            full_name: faker.random.words(),
            license: {
              key: faker.random.words(),
              name: faker.random.words(),
              url: faker.random.words(),
              spdx_id: faker.random.words(),
              node_id: faker.random.words(),
              html_url: faker.random.words(),
            },
            organization: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.random.words(),
            description: faker.random.words(),
            fork: faker.datatype.boolean(),
            url: faker.random.words(),
            archive_url: faker.random.words(),
            assignees_url: faker.random.words(),
            blobs_url: faker.random.words(),
            branches_url: faker.random.words(),
            collaborators_url: faker.random.words(),
            comments_url: faker.random.words(),
            commits_url: faker.random.words(),
            compare_url: faker.random.words(),
            contents_url: faker.random.words(),
            contributors_url: faker.random.words(),
            deployments_url: faker.random.words(),
            downloads_url: faker.random.words(),
            events_url: faker.random.words(),
            forks_url: faker.random.words(),
            git_commits_url: faker.random.words(),
            git_refs_url: faker.random.words(),
            git_tags_url: faker.random.words(),
            git_url: faker.random.words(),
            issue_comment_url: faker.random.words(),
            issue_events_url: faker.random.words(),
            issues_url: faker.random.words(),
            keys_url: faker.random.words(),
            labels_url: faker.random.words(),
            languages_url: faker.random.words(),
            merges_url: faker.random.words(),
            milestones_url: faker.random.words(),
            notifications_url: faker.random.words(),
            pulls_url: faker.random.words(),
            releases_url: faker.random.words(),
            ssh_url: faker.random.words(),
            stargazers_url: faker.random.words(),
            statuses_url: faker.random.words(),
            subscribers_url: faker.random.words(),
            subscription_url: faker.random.words(),
            tags_url: faker.random.words(),
            teams_url: faker.random.words(),
            trees_url: faker.random.words(),
            clone_url: faker.random.words(),
            mirror_url: faker.random.words(),
            hooks_url: faker.random.words(),
            svn_url: faker.random.words(),
            homepage: faker.random.words(),
            language: faker.random.words(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.random.words(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.random.words(),
            pushed_at: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            allow_rebase_merge: faker.datatype.boolean(),
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              owner: {
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.random.words(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.random.words(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.random.words(),
            starred_at: faker.random.words(),
          },
          performed_via_github_app: {
            id: faker.datatype.number(),
            slug: faker.random.words(),
            node_id: faker.random.words(),
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            name: faker.random.words(),
            description: faker.random.words(),
            external_url: faker.random.words(),
            html_url: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            permissions: {
              issues: faker.random.words(),
              checks: faker.random.words(),
              metadata: faker.random.words(),
              contents: faker.random.words(),
              deployments: faker.random.words(),
            },
            events: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            installations_count: faker.datatype.number(),
            client_id: faker.random.words(),
            client_secret: faker.random.words(),
            webhook_secret: faker.random.words(),
            pem: faker.random.words(),
          },
          author_association: faker.random.arrayElement([
            'COLLABORATOR',
            'CONTRIBUTOR',
            'FIRST_TIMER',
            'FIRST_TIME_CONTRIBUTOR',
            'MANNEQUIN',
            'MEMBER',
            'NONE',
            'OWNER',
          ]),
          reactions: {
            url: faker.random.words(),
            total_count: faker.datatype.number(),
            '+1': faker.datatype.number(),
            '-1': faker.datatype.number(),
            laugh: faker.datatype.number(),
            confused: faker.datatype.number(),
            heart: faker.datatype.number(),
            hooray: faker.datatype.number(),
            eyes: faker.datatype.number(),
            rocket: faker.datatype.number(),
          },
        }),
      ],
      [
        ctx.status(301),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(410),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
      [
        ctx.status(503),
        ctx.json({
          code: faker.random.words(),
          message: faker.random.words(),
          documentation_url: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post(
    '/repos/:owner/:repo/issues/:issue_number/assignees',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(201),
          ctx.json({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            url: faker.random.words(),
            repository_url: faker.random.words(),
            labels_url: faker.random.words(),
            comments_url: faker.random.words(),
            events_url: faker.random.words(),
            html_url: faker.random.words(),
            number: faker.datatype.number(),
            state: faker.random.words(),
            title: faker.random.words(),
            body: faker.random.words(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            labels: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({})),
            assignee: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            assignees: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            })),
            milestone: {
              url: faker.random.words(),
              html_url: faker.random.words(),
              labels_url: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              number: faker.datatype.number(),
              state: faker.random.arrayElement(['open', 'closed']),
              title: faker.random.words(),
              description: faker.random.words(),
              creator: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              open_issues: faker.datatype.number(),
              closed_issues: faker.datatype.number(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              closed_at: faker.random.words(),
              due_on: faker.random.words(),
            },
            locked: faker.datatype.boolean(),
            active_lock_reason: faker.random.words(),
            comments: faker.datatype.number(),
            pull_request: {
              merged_at: faker.random.words(),
              diff_url: faker.random.words(),
              html_url: faker.random.words(),
              patch_url: faker.random.words(),
              url: faker.random.words(),
            },
            closed_at: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            draft: faker.datatype.boolean(),
            closed_by: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            body_html: faker.random.words(),
            body_text: faker.random.words(),
            timeline_url: faker.random.words(),
            repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              license: {
                key: faker.random.words(),
                name: faker.random.words(),
                url: faker.random.words(),
                spdx_id: faker.random.words(),
                node_id: faker.random.words(),
                html_url: faker.random.words(),
              },
              organization: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              allow_rebase_merge: faker.datatype.boolean(),
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                owner: {
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.random.words(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.random.words(),
              starred_at: faker.random.words(),
            },
            performed_via_github_app: {
              id: faker.datatype.number(),
              slug: faker.random.words(),
              node_id: faker.random.words(),
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              name: faker.random.words(),
              description: faker.random.words(),
              external_url: faker.random.words(),
              html_url: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                issues: faker.random.words(),
                checks: faker.random.words(),
                metadata: faker.random.words(),
                contents: faker.random.words(),
                deployments: faker.random.words(),
              },
              events: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              installations_count: faker.datatype.number(),
              client_id: faker.random.words(),
              client_secret: faker.random.words(),
              webhook_secret: faker.random.words(),
              pem: faker.random.words(),
            },
            author_association: faker.random.arrayElement([
              'COLLABORATOR',
              'CONTRIBUTOR',
              'FIRST_TIMER',
              'FIRST_TIME_CONTRIBUTOR',
              'MANNEQUIN',
              'MEMBER',
              'NONE',
              'OWNER',
            ]),
            reactions: {
              url: faker.random.words(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/repos/:owner/:repo/issues/:issue_number/assignees',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            url: faker.random.words(),
            repository_url: faker.random.words(),
            labels_url: faker.random.words(),
            comments_url: faker.random.words(),
            events_url: faker.random.words(),
            html_url: faker.random.words(),
            number: faker.datatype.number(),
            state: faker.random.words(),
            title: faker.random.words(),
            body: faker.random.words(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            labels: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({})),
            assignee: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            assignees: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            })),
            milestone: {
              url: faker.random.words(),
              html_url: faker.random.words(),
              labels_url: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              number: faker.datatype.number(),
              state: faker.random.arrayElement(['open', 'closed']),
              title: faker.random.words(),
              description: faker.random.words(),
              creator: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              open_issues: faker.datatype.number(),
              closed_issues: faker.datatype.number(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              closed_at: faker.random.words(),
              due_on: faker.random.words(),
            },
            locked: faker.datatype.boolean(),
            active_lock_reason: faker.random.words(),
            comments: faker.datatype.number(),
            pull_request: {
              merged_at: faker.random.words(),
              diff_url: faker.random.words(),
              html_url: faker.random.words(),
              patch_url: faker.random.words(),
              url: faker.random.words(),
            },
            closed_at: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            draft: faker.datatype.boolean(),
            closed_by: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            body_html: faker.random.words(),
            body_text: faker.random.words(),
            timeline_url: faker.random.words(),
            repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              license: {
                key: faker.random.words(),
                name: faker.random.words(),
                url: faker.random.words(),
                spdx_id: faker.random.words(),
                node_id: faker.random.words(),
                html_url: faker.random.words(),
              },
              organization: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              allow_rebase_merge: faker.datatype.boolean(),
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                owner: {
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.random.words(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.random.words(),
              starred_at: faker.random.words(),
            },
            performed_via_github_app: {
              id: faker.datatype.number(),
              slug: faker.random.words(),
              node_id: faker.random.words(),
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              name: faker.random.words(),
              description: faker.random.words(),
              external_url: faker.random.words(),
              html_url: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                issues: faker.random.words(),
                checks: faker.random.words(),
                metadata: faker.random.words(),
                contents: faker.random.words(),
                deployments: faker.random.words(),
              },
              events: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              installations_count: faker.datatype.number(),
              client_id: faker.random.words(),
              client_secret: faker.random.words(),
              webhook_secret: faker.random.words(),
              pem: faker.random.words(),
            },
            author_association: faker.random.arrayElement([
              'COLLABORATOR',
              'CONTRIBUTOR',
              'FIRST_TIMER',
              'FIRST_TIME_CONTRIBUTOR',
              'MANNEQUIN',
              'MEMBER',
              'NONE',
              'OWNER',
            ]),
            reactions: {
              url: faker.random.words(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/repos/:owner/:repo/issues/:issue_number/comments',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json(
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
              _ => ({
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                url: faker.random.words(),
                body: faker.random.words(),
                body_text: faker.random.words(),
                body_html: faker.random.words(),
                html_url: faker.random.words(),
                user: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                issue_url: faker.random.words(),
                author_association: faker.random.arrayElement([
                  'COLLABORATOR',
                  'CONTRIBUTOR',
                  'FIRST_TIMER',
                  'FIRST_TIME_CONTRIBUTOR',
                  'MANNEQUIN',
                  'MEMBER',
                  'NONE',
                  'OWNER',
                ]),
                performed_via_github_app: {
                  id: faker.datatype.number(),
                  slug: faker.random.words(),
                  node_id: faker.random.words(),
                  owner: {
                    name: faker.random.words(),
                    email: faker.random.words(),
                    login: faker.random.words(),
                    id: faker.datatype.number(),
                    node_id: faker.random.words(),
                    avatar_url: faker.random.words(),
                    gravatar_id: faker.random.words(),
                    url: faker.random.words(),
                    html_url: faker.random.words(),
                    followers_url: faker.random.words(),
                    following_url: faker.random.words(),
                    gists_url: faker.random.words(),
                    starred_url: faker.random.words(),
                    subscriptions_url: faker.random.words(),
                    organizations_url: faker.random.words(),
                    repos_url: faker.random.words(),
                    events_url: faker.random.words(),
                    received_events_url: faker.random.words(),
                    type: faker.random.words(),
                    site_admin: faker.datatype.boolean(),
                    starred_at: faker.random.words(),
                  },
                  name: faker.random.words(),
                  description: faker.random.words(),
                  external_url: faker.random.words(),
                  html_url: faker.random.words(),
                  created_at: faker.random.words(),
                  updated_at: faker.random.words(),
                  permissions: {
                    issues: faker.random.words(),
                    checks: faker.random.words(),
                    metadata: faker.random.words(),
                    contents: faker.random.words(),
                    deployments: faker.random.words(),
                  },
                  events: [
                    ...new Array(faker.datatype.number({ max: 100 })).keys(),
                  ].map(_ => faker.random.words()),
                  installations_count: faker.datatype.number(),
                  client_id: faker.random.words(),
                  client_secret: faker.random.words(),
                  webhook_secret: faker.random.words(),
                  pem: faker.random.words(),
                },
                reactions: {
                  url: faker.random.words(),
                  total_count: faker.datatype.number(),
                  '+1': faker.datatype.number(),
                  '-1': faker.datatype.number(),
                  laugh: faker.datatype.number(),
                  confused: faker.datatype.number(),
                  heart: faker.datatype.number(),
                  hooray: faker.datatype.number(),
                  eyes: faker.datatype.number(),
                  rocket: faker.datatype.number(),
                },
              })
            )
          ),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(410),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.post(
    '/repos/:owner/:repo/issues/:issue_number/comments',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(201),
          ctx.json({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            url: faker.random.words(),
            body: faker.random.words(),
            body_text: faker.random.words(),
            body_html: faker.random.words(),
            html_url: faker.random.words(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            issue_url: faker.random.words(),
            author_association: faker.random.arrayElement([
              'COLLABORATOR',
              'CONTRIBUTOR',
              'FIRST_TIMER',
              'FIRST_TIME_CONTRIBUTOR',
              'MANNEQUIN',
              'MEMBER',
              'NONE',
              'OWNER',
            ]),
            performed_via_github_app: {
              id: faker.datatype.number(),
              slug: faker.random.words(),
              node_id: faker.random.words(),
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              name: faker.random.words(),
              description: faker.random.words(),
              external_url: faker.random.words(),
              html_url: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                issues: faker.random.words(),
                checks: faker.random.words(),
                metadata: faker.random.words(),
                contents: faker.random.words(),
                deployments: faker.random.words(),
              },
              events: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              installations_count: faker.datatype.number(),
              client_id: faker.random.words(),
              client_secret: faker.random.words(),
              webhook_secret: faker.random.words(),
              pem: faker.random.words(),
            },
            reactions: {
              url: faker.random.words(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(410),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            errors: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              resource: faker.random.words(),
              field: faker.random.words(),
              message: faker.random.words(),
              code: faker.random.words(),
              index: faker.datatype.number(),
              value: {},
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/repos/:owner/:repo/issues/:issue_number/events',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json(
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
              _ => ({})
            )
          ),
        ],
        [
          ctx.status(410),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/repos/:owner/:repo/issues/:issue_number/labels',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json(
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
              _ => ({
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                url: faker.random.words(),
                name: faker.random.words(),
                description: faker.random.words(),
                color: faker.random.words(),
                default: faker.datatype.boolean(),
              })
            )
          ),
        ],
        [
          ctx.status(410),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.post(
    '/repos/:owner/:repo/issues/:issue_number/labels',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json(
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
              _ => ({
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                url: faker.random.words(),
                name: faker.random.words(),
                description: faker.random.words(),
                color: faker.random.words(),
                default: faker.datatype.boolean(),
              })
            )
          ),
        ],
        [
          ctx.status(410),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            errors: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              resource: faker.random.words(),
              field: faker.random.words(),
              message: faker.random.words(),
              code: faker.random.words(),
              index: faker.datatype.number(),
              value: {},
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.put(
    '/repos/:owner/:repo/issues/:issue_number/labels',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json(
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
              _ => ({
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                url: faker.random.words(),
                name: faker.random.words(),
                description: faker.random.words(),
                color: faker.random.words(),
                default: faker.datatype.boolean(),
              })
            )
          ),
        ],
        [
          ctx.status(410),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            errors: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              resource: faker.random.words(),
              field: faker.random.words(),
              message: faker.random.words(),
              code: faker.random.words(),
              index: faker.datatype.number(),
              value: {},
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/repos/:owner/:repo/issues/:issue_number/labels',
    (req, res, ctx) => {
      const resultArrray = [
        [ctx.status(204), ctx.json({})],
        [
          ctx.status(410),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/repos/:owner/:repo/issues/:issue_number/labels/:name',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json(
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
              _ => ({
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                url: faker.random.words(),
                name: faker.random.words(),
                description: faker.random.words(),
                color: faker.random.words(),
                default: faker.datatype.boolean(),
              })
            )
          ),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(410),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.put('/repos/:owner/:repo/issues/:issue_number/lock', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(410),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete(
    '/repos/:owner/:repo/issues/:issue_number/lock',
    (req, res, ctx) => {
      const resultArrray = [
        [ctx.status(204), ctx.json({})],
        [
          ctx.status(403),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/repos/:owner/:repo/issues/:issue_number/reactions',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json(
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
              _ => ({
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                user: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                content: faker.random.arrayElement([
                  '+1',
                  '-1',
                  'laugh',
                  'confused',
                  'heart',
                  'hooray',
                  'rocket',
                  'eyes',
                ]),
                created_at: faker.random.words(),
              })
            )
          ),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(410),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.post(
    '/repos/:owner/:repo/issues/:issue_number/reactions',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            content: faker.random.arrayElement([
              '+1',
              '-1',
              'laugh',
              'confused',
              'heart',
              'hooray',
              'rocket',
              'eyes',
            ]),
            created_at: faker.random.words(),
          }),
        ],
        [
          ctx.status(201),
          ctx.json({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            content: faker.random.arrayElement([
              '+1',
              '-1',
              'laugh',
              'confused',
              'heart',
              'hooray',
              'rocket',
              'eyes',
            ]),
            created_at: faker.random.words(),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            errors: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              resource: faker.random.words(),
              field: faker.random.words(),
              message: faker.random.words(),
              code: faker.random.words(),
              index: faker.datatype.number(),
              value: {},
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/repos/:owner/:repo/issues/:issue_number/reactions/:reaction_id',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/repos/:owner/:repo/issues/:issue_number/timeline',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json(
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
              _ => ({})
            )
          ),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(410),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get('/repos/:owner/:repo/keys', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.datatype.number(),
            key: faker.random.words(),
            url: faker.random.words(),
            title: faker.random.words(),
            verified: faker.datatype.boolean(),
            created_at: faker.random.words(),
            read_only: faker.datatype.boolean(),
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/repos/:owner/:repo/keys', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json({
          id: faker.datatype.number(),
          key: faker.random.words(),
          url: faker.random.words(),
          title: faker.random.words(),
          verified: faker.datatype.boolean(),
          created_at: faker.random.words(),
          read_only: faker.datatype.boolean(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/keys/:key_id', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.datatype.number(),
          key: faker.random.words(),
          url: faker.random.words(),
          title: faker.random.words(),
          verified: faker.datatype.boolean(),
          created_at: faker.random.words(),
          read_only: faker.datatype.boolean(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/repos/:owner/:repo/keys/:key_id', (req, res, ctx) => {
    const resultArrray = [[ctx.status(204), ctx.json({})]];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/labels', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            url: faker.random.words(),
            name: faker.random.words(),
            description: faker.random.words(),
            color: faker.random.words(),
            default: faker.datatype.boolean(),
          }))
        ),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/repos/:owner/:repo/labels', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json({
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          url: faker.random.words(),
          name: faker.random.words(),
          description: faker.random.words(),
          color: faker.random.words(),
          default: faker.datatype.boolean(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/labels/:name', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          url: faker.random.words(),
          name: faker.random.words(),
          description: faker.random.words(),
          color: faker.random.words(),
          default: faker.datatype.boolean(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.patch('/repos/:owner/:repo/labels/:name', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          url: faker.random.words(),
          name: faker.random.words(),
          description: faker.random.words(),
          color: faker.random.words(),
          default: faker.datatype.boolean(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/repos/:owner/:repo/labels/:name', (req, res, ctx) => {
    const resultArrray = [[ctx.status(204), ctx.json({})]];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/languages', (req, res, ctx) => {
    const resultArrray = [[ctx.status(200), ctx.json({})]];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.put('/repos/:owner/:repo/lfs', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(202), ctx.json({})],
      [ctx.status(403), ctx.json({})],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/repos/:owner/:repo/lfs', (req, res, ctx) => {
    const resultArrray = [[ctx.status(204), ctx.json({})]];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/license', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          name: faker.random.words(),
          path: faker.random.words(),
          sha: faker.random.words(),
          size: faker.datatype.number(),
          url: faker.random.words(),
          html_url: faker.random.words(),
          git_url: faker.random.words(),
          download_url: faker.random.words(),
          type: faker.random.words(),
          content: faker.random.words(),
          encoding: faker.random.words(),
          _links: {
            git: faker.random.words(),
            html: faker.random.words(),
            self: faker.random.words(),
          },
          license: {
            key: faker.random.words(),
            name: faker.random.words(),
            url: faker.random.words(),
            spdx_id: faker.random.words(),
            node_id: faker.random.words(),
            html_url: faker.random.words(),
          },
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/repos/:owner/:repo/merge-upstream', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          message: faker.random.words(),
          merge_type: faker.random.arrayElement([
            'merge',
            'fast-forward',
            'none',
          ]),
          base_branch: faker.random.words(),
        }),
      ],
      [ctx.status(409), ctx.json({})],
      [ctx.status(422), ctx.json({})],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/repos/:owner/:repo/merges', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json({
          url: faker.random.words(),
          sha: faker.random.words(),
          node_id: faker.random.words(),
          html_url: faker.random.words(),
          comments_url: faker.random.words(),
          commit: {
            url: faker.random.words(),
            author: {
              name: faker.random.words(),
              email: faker.random.words(),
              date: faker.random.words(),
            },
            committer: {
              name: faker.random.words(),
              email: faker.random.words(),
              date: faker.random.words(),
            },
            message: faker.random.words(),
            comment_count: faker.datatype.number(),
            tree: {
              sha: faker.random.words(),
              url: faker.random.words(),
            },
            verification: {
              verified: faker.datatype.boolean(),
              reason: faker.random.words(),
              payload: faker.random.words(),
              signature: faker.random.words(),
            },
          },
          author: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          committer: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          parents: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            sha: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
          })),
          stats: {
            additions: faker.datatype.number(),
            deletions: faker.datatype.number(),
            total: faker.datatype.number(),
          },
          files: [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
            _ => ({
              sha: faker.random.words(),
              filename: faker.random.words(),
              status: faker.random.arrayElement([
                'added',
                'removed',
                'modified',
                'renamed',
                'copied',
                'changed',
                'unchanged',
              ]),
              additions: faker.datatype.number(),
              deletions: faker.datatype.number(),
              changes: faker.datatype.number(),
              blob_url: faker.random.words(),
              raw_url: faker.random.words(),
              contents_url: faker.random.words(),
              patch: faker.random.words(),
              previous_filename: faker.random.words(),
            })
          ),
        }),
      ],
      [ctx.status(204), ctx.json({})],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [ctx.status(404), ctx.json({})],
      [ctx.status(409), ctx.json({})],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/milestones', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            url: faker.random.words(),
            html_url: faker.random.words(),
            labels_url: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            number: faker.datatype.number(),
            state: faker.random.arrayElement(['open', 'closed']),
            title: faker.random.words(),
            description: faker.random.words(),
            creator: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            open_issues: faker.datatype.number(),
            closed_issues: faker.datatype.number(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            closed_at: faker.random.words(),
            due_on: faker.random.words(),
          }))
        ),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/repos/:owner/:repo/milestones', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json({
          url: faker.random.words(),
          html_url: faker.random.words(),
          labels_url: faker.random.words(),
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          number: faker.datatype.number(),
          state: faker.random.arrayElement(['open', 'closed']),
          title: faker.random.words(),
          description: faker.random.words(),
          creator: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          open_issues: faker.datatype.number(),
          closed_issues: faker.datatype.number(),
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          closed_at: faker.random.words(),
          due_on: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get(
    '/repos/:owner/:repo/milestones/:milestone_number',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            url: faker.random.words(),
            html_url: faker.random.words(),
            labels_url: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            number: faker.datatype.number(),
            state: faker.random.arrayElement(['open', 'closed']),
            title: faker.random.words(),
            description: faker.random.words(),
            creator: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            open_issues: faker.datatype.number(),
            closed_issues: faker.datatype.number(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            closed_at: faker.random.words(),
            due_on: faker.random.words(),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.patch(
    '/repos/:owner/:repo/milestones/:milestone_number',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            url: faker.random.words(),
            html_url: faker.random.words(),
            labels_url: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            number: faker.datatype.number(),
            state: faker.random.arrayElement(['open', 'closed']),
            title: faker.random.words(),
            description: faker.random.words(),
            creator: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            open_issues: faker.datatype.number(),
            closed_issues: faker.datatype.number(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            closed_at: faker.random.words(),
            due_on: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/repos/:owner/:repo/milestones/:milestone_number',
    (req, res, ctx) => {
      const resultArrray = [
        [ctx.status(204), ctx.json({})],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/repos/:owner/:repo/milestones/:milestone_number/labels',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json(
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
              _ => ({
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                url: faker.random.words(),
                name: faker.random.words(),
                description: faker.random.words(),
                color: faker.random.words(),
                default: faker.datatype.boolean(),
              })
            )
          ),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get('/repos/:owner/:repo/notifications', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.random.words(),
            repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                license: {
                  key: faker.random.words(),
                  name: faker.random.words(),
                  url: faker.random.words(),
                  spdx_id: faker.random.words(),
                  node_id: faker.random.words(),
                  html_url: faker.random.words(),
                },
                organization: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                forks: faker.datatype.number(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                },
                owner: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                allow_rebase_merge: faker.datatype.boolean(),
                template_repository: {
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  name: faker.random.words(),
                  full_name: faker.random.words(),
                  owner: {
                    login: faker.random.words(),
                    id: faker.datatype.number(),
                    node_id: faker.random.words(),
                    avatar_url: faker.random.words(),
                    gravatar_id: faker.random.words(),
                    url: faker.random.words(),
                    html_url: faker.random.words(),
                    followers_url: faker.random.words(),
                    following_url: faker.random.words(),
                    gists_url: faker.random.words(),
                    starred_url: faker.random.words(),
                    subscriptions_url: faker.random.words(),
                    organizations_url: faker.random.words(),
                    repos_url: faker.random.words(),
                    events_url: faker.random.words(),
                    received_events_url: faker.random.words(),
                    type: faker.random.words(),
                    site_admin: faker.datatype.boolean(),
                  },
                  private: faker.datatype.boolean(),
                  html_url: faker.random.words(),
                  description: faker.random.words(),
                  fork: faker.datatype.boolean(),
                  url: faker.random.words(),
                  archive_url: faker.random.words(),
                  assignees_url: faker.random.words(),
                  blobs_url: faker.random.words(),
                  branches_url: faker.random.words(),
                  collaborators_url: faker.random.words(),
                  comments_url: faker.random.words(),
                  commits_url: faker.random.words(),
                  compare_url: faker.random.words(),
                  contents_url: faker.random.words(),
                  contributors_url: faker.random.words(),
                  deployments_url: faker.random.words(),
                  downloads_url: faker.random.words(),
                  events_url: faker.random.words(),
                  forks_url: faker.random.words(),
                  git_commits_url: faker.random.words(),
                  git_refs_url: faker.random.words(),
                  git_tags_url: faker.random.words(),
                  git_url: faker.random.words(),
                  issue_comment_url: faker.random.words(),
                  issue_events_url: faker.random.words(),
                  issues_url: faker.random.words(),
                  keys_url: faker.random.words(),
                  labels_url: faker.random.words(),
                  languages_url: faker.random.words(),
                  merges_url: faker.random.words(),
                  milestones_url: faker.random.words(),
                  notifications_url: faker.random.words(),
                  pulls_url: faker.random.words(),
                  releases_url: faker.random.words(),
                  ssh_url: faker.random.words(),
                  stargazers_url: faker.random.words(),
                  statuses_url: faker.random.words(),
                  subscribers_url: faker.random.words(),
                  subscription_url: faker.random.words(),
                  tags_url: faker.random.words(),
                  teams_url: faker.random.words(),
                  trees_url: faker.random.words(),
                  clone_url: faker.random.words(),
                  mirror_url: faker.random.words(),
                  hooks_url: faker.random.words(),
                  svn_url: faker.random.words(),
                  homepage: faker.random.words(),
                  language: faker.random.words(),
                  forks_count: faker.datatype.number(),
                  stargazers_count: faker.datatype.number(),
                  watchers_count: faker.datatype.number(),
                  size: faker.datatype.number(),
                  default_branch: faker.random.words(),
                  open_issues_count: faker.datatype.number(),
                  is_template: faker.datatype.boolean(),
                  topics: [
                    ...new Array(faker.datatype.number({ max: 100 })).keys(),
                  ].map(_ => faker.random.words()),
                  has_issues: faker.datatype.boolean(),
                  has_projects: faker.datatype.boolean(),
                  has_wiki: faker.datatype.boolean(),
                  has_pages: faker.datatype.boolean(),
                  has_downloads: faker.datatype.boolean(),
                  archived: faker.datatype.boolean(),
                  disabled: faker.datatype.boolean(),
                  visibility: faker.random.words(),
                  pushed_at: faker.random.words(),
                  created_at: faker.random.words(),
                  updated_at: faker.random.words(),
                  permissions: {
                    admin: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    pull: faker.datatype.boolean(),
                  },
                  allow_rebase_merge: faker.datatype.boolean(),
                  temp_clone_token: faker.random.words(),
                  allow_squash_merge: faker.datatype.boolean(),
                  allow_auto_merge: faker.datatype.boolean(),
                  delete_branch_on_merge: faker.datatype.boolean(),
                  allow_update_branch: faker.datatype.boolean(),
                  allow_merge_commit: faker.datatype.boolean(),
                  subscribers_count: faker.datatype.number(),
                  network_count: faker.datatype.number(),
                },
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                allow_forking: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
                open_issues: faker.datatype.number(),
                watchers: faker.datatype.number(),
                master_branch: faker.random.words(),
                starred_at: faker.random.words(),
              },
              temp_clone_token: faker.random.words(),
              delete_branch_on_merge: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              code_of_conduct: {
                key: faker.random.words(),
                name: faker.random.words(),
                url: faker.random.words(),
                body: faker.random.words(),
                html_url: faker.random.words(),
              },
              license: {
                key: faker.random.words(),
                name: faker.random.words(),
                spdx_id: faker.random.words(),
                url: faker.random.words(),
                node_id: faker.random.words(),
              },
              forks: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              allow_forking: faker.datatype.boolean(),
            },
            subject: {
              title: faker.random.words(),
              url: faker.random.words(),
              latest_comment_url: faker.random.words(),
              type: faker.random.words(),
            },
            reason: faker.random.words(),
            unread: faker.datatype.boolean(),
            updated_at: faker.random.words(),
            last_read_at: faker.random.words(),
            url: faker.random.words(),
            subscription_url: faker.random.words(),
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.put('/repos/:owner/:repo/notifications', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(202),
        ctx.json({
          message: faker.random.words(),
          url: faker.random.words(),
        }),
      ],
      [ctx.status(205), ctx.json({})],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/pages', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          url: faker.random.words(),
          status: faker.random.arrayElement(['built', 'building', 'errored']),
          cname: faker.random.words(),
          protected_domain_state: faker.random.arrayElement([
            'pending',
            'verified',
            'unverified',
          ]),
          pending_domain_unverified_at: faker.random.words(),
          custom_404: faker.datatype.boolean(),
          html_url: faker.random.words(),
          source: {
            branch: faker.random.words(),
            path: faker.random.words(),
          },
          public: faker.datatype.boolean(),
          https_certificate: {
            state: faker.random.arrayElement([
              'new',
              'authorization_created',
              'authorization_pending',
              'authorized',
              'authorization_revoked',
              'issued',
              'uploaded',
              'approved',
              'errored',
              'bad_authz',
              'destroy_pending',
              'dns_changed',
            ]),
            description: faker.random.words(),
            domains: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            expires_at: faker.random.words(),
          },
          https_enforced: faker.datatype.boolean(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/repos/:owner/:repo/pages', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json({
          url: faker.random.words(),
          status: faker.random.arrayElement(['built', 'building', 'errored']),
          cname: faker.random.words(),
          protected_domain_state: faker.random.arrayElement([
            'pending',
            'verified',
            'unverified',
          ]),
          pending_domain_unverified_at: faker.random.words(),
          custom_404: faker.datatype.boolean(),
          html_url: faker.random.words(),
          source: {
            branch: faker.random.words(),
            path: faker.random.words(),
          },
          public: faker.datatype.boolean(),
          https_certificate: {
            state: faker.random.arrayElement([
              'new',
              'authorization_created',
              'authorization_pending',
              'authorized',
              'authorization_revoked',
              'issued',
              'uploaded',
              'approved',
              'errored',
              'bad_authz',
              'destroy_pending',
              'dns_changed',
            ]),
            description: faker.random.words(),
            domains: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            expires_at: faker.random.words(),
          },
          https_enforced: faker.datatype.boolean(),
        }),
      ],
      [
        ctx.status(409),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.put('/repos/:owner/:repo/pages', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [
        ctx.status(400),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/repos/:owner/:repo/pages', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/pages/builds', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            url: faker.random.words(),
            status: faker.random.words(),
            error: {
              message: faker.random.words(),
            },
            pusher: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            commit: faker.random.words(),
            duration: faker.datatype.number(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/repos/:owner/:repo/pages/builds', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json({
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/pages/builds/latest', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          url: faker.random.words(),
          status: faker.random.words(),
          error: {
            message: faker.random.words(),
          },
          pusher: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          commit: faker.random.words(),
          duration: faker.datatype.number(),
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/pages/builds/:build_id', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          url: faker.random.words(),
          status: faker.random.words(),
          error: {
            message: faker.random.words(),
          },
          pusher: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          commit: faker.random.words(),
          duration: faker.datatype.number(),
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/pre-receive-hooks', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.datatype.number(),
            name: faker.random.words(),
            enforcement: faker.random.words(),
            configuration_url: faker.random.words(),
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get(
    '/repos/:owner/:repo/pre-receive-hooks/:pre_receive_hook_id',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            name: faker.random.words(),
            enforcement: faker.random.words(),
            configuration_url: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.patch(
    '/repos/:owner/:repo/pre-receive-hooks/:pre_receive_hook_id',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            name: faker.random.words(),
            enforcement: faker.random.words(),
            configuration_url: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/repos/:owner/:repo/pre-receive-hooks/:pre_receive_hook_id',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            name: faker.random.words(),
            enforcement: faker.random.words(),
            configuration_url: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get('/repos/:owner/:repo/projects', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            owner_url: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            columns_url: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            body: faker.random.words(),
            number: faker.datatype.number(),
            state: faker.random.words(),
            creator: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            organization_permission: faker.random.arrayElement([
              'read',
              'write',
              'admin',
              'none',
            ]),
            private: faker.datatype.boolean(),
          }))
        ),
      ],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(410),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/repos/:owner/:repo/projects', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json({
          owner_url: faker.random.words(),
          url: faker.random.words(),
          html_url: faker.random.words(),
          columns_url: faker.random.words(),
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          name: faker.random.words(),
          body: faker.random.words(),
          number: faker.datatype.number(),
          state: faker.random.words(),
          creator: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          organization_permission: faker.random.arrayElement([
            'read',
            'write',
            'admin',
            'none',
          ]),
          private: faker.datatype.boolean(),
        }),
      ],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(410),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/pulls', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            url: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            html_url: faker.random.words(),
            diff_url: faker.random.words(),
            patch_url: faker.random.words(),
            issue_url: faker.random.words(),
            commits_url: faker.random.words(),
            review_comments_url: faker.random.words(),
            review_comment_url: faker.random.words(),
            comments_url: faker.random.words(),
            statuses_url: faker.random.words(),
            number: faker.datatype.number(),
            state: faker.random.words(),
            locked: faker.datatype.boolean(),
            title: faker.random.words(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            body: faker.random.words(),
            labels: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              url: faker.random.words(),
              name: faker.random.words(),
              description: faker.random.words(),
              color: faker.random.words(),
              default: faker.datatype.boolean(),
            })),
            milestone: {
              url: faker.random.words(),
              html_url: faker.random.words(),
              labels_url: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              number: faker.datatype.number(),
              state: faker.random.arrayElement(['open', 'closed']),
              title: faker.random.words(),
              description: faker.random.words(),
              creator: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              open_issues: faker.datatype.number(),
              closed_issues: faker.datatype.number(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              closed_at: faker.random.words(),
              due_on: faker.random.words(),
            },
            active_lock_reason: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            closed_at: faker.random.words(),
            merged_at: faker.random.words(),
            merge_commit_sha: faker.random.words(),
            assignee: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            assignees: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            })),
            requested_reviewers: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            })),
            requested_teams: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              slug: faker.random.words(),
              description: faker.random.words(),
              privacy: faker.random.words(),
              permission: faker.random.words(),
              permissions: {
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                admin: faker.datatype.boolean(),
              },
              url: faker.random.words(),
              html_url: faker.random.words(),
              members_url: faker.random.words(),
              repositories_url: faker.random.words(),
              parent: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                url: faker.random.words(),
                members_url: faker.random.words(),
                name: faker.random.words(),
                description: faker.random.words(),
                permission: faker.random.words(),
                privacy: faker.random.words(),
                html_url: faker.random.words(),
                repositories_url: faker.random.words(),
                slug: faker.random.words(),
                ldap_dn: faker.random.words(),
              },
            })),
            head: {
              label: faker.random.words(),
              ref: faker.random.words(),
              repo: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                license: {
                  key: faker.random.words(),
                  name: faker.random.words(),
                  url: faker.random.words(),
                  spdx_id: faker.random.words(),
                  node_id: faker.random.words(),
                  html_url: faker.random.words(),
                },
                organization: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                forks: faker.datatype.number(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                },
                owner: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                allow_rebase_merge: faker.datatype.boolean(),
                template_repository: {
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  name: faker.random.words(),
                  full_name: faker.random.words(),
                  owner: {
                    login: faker.random.words(),
                    id: faker.datatype.number(),
                    node_id: faker.random.words(),
                    avatar_url: faker.random.words(),
                    gravatar_id: faker.random.words(),
                    url: faker.random.words(),
                    html_url: faker.random.words(),
                    followers_url: faker.random.words(),
                    following_url: faker.random.words(),
                    gists_url: faker.random.words(),
                    starred_url: faker.random.words(),
                    subscriptions_url: faker.random.words(),
                    organizations_url: faker.random.words(),
                    repos_url: faker.random.words(),
                    events_url: faker.random.words(),
                    received_events_url: faker.random.words(),
                    type: faker.random.words(),
                    site_admin: faker.datatype.boolean(),
                  },
                  private: faker.datatype.boolean(),
                  html_url: faker.random.words(),
                  description: faker.random.words(),
                  fork: faker.datatype.boolean(),
                  url: faker.random.words(),
                  archive_url: faker.random.words(),
                  assignees_url: faker.random.words(),
                  blobs_url: faker.random.words(),
                  branches_url: faker.random.words(),
                  collaborators_url: faker.random.words(),
                  comments_url: faker.random.words(),
                  commits_url: faker.random.words(),
                  compare_url: faker.random.words(),
                  contents_url: faker.random.words(),
                  contributors_url: faker.random.words(),
                  deployments_url: faker.random.words(),
                  downloads_url: faker.random.words(),
                  events_url: faker.random.words(),
                  forks_url: faker.random.words(),
                  git_commits_url: faker.random.words(),
                  git_refs_url: faker.random.words(),
                  git_tags_url: faker.random.words(),
                  git_url: faker.random.words(),
                  issue_comment_url: faker.random.words(),
                  issue_events_url: faker.random.words(),
                  issues_url: faker.random.words(),
                  keys_url: faker.random.words(),
                  labels_url: faker.random.words(),
                  languages_url: faker.random.words(),
                  merges_url: faker.random.words(),
                  milestones_url: faker.random.words(),
                  notifications_url: faker.random.words(),
                  pulls_url: faker.random.words(),
                  releases_url: faker.random.words(),
                  ssh_url: faker.random.words(),
                  stargazers_url: faker.random.words(),
                  statuses_url: faker.random.words(),
                  subscribers_url: faker.random.words(),
                  subscription_url: faker.random.words(),
                  tags_url: faker.random.words(),
                  teams_url: faker.random.words(),
                  trees_url: faker.random.words(),
                  clone_url: faker.random.words(),
                  mirror_url: faker.random.words(),
                  hooks_url: faker.random.words(),
                  svn_url: faker.random.words(),
                  homepage: faker.random.words(),
                  language: faker.random.words(),
                  forks_count: faker.datatype.number(),
                  stargazers_count: faker.datatype.number(),
                  watchers_count: faker.datatype.number(),
                  size: faker.datatype.number(),
                  default_branch: faker.random.words(),
                  open_issues_count: faker.datatype.number(),
                  is_template: faker.datatype.boolean(),
                  topics: [
                    ...new Array(faker.datatype.number({ max: 100 })).keys(),
                  ].map(_ => faker.random.words()),
                  has_issues: faker.datatype.boolean(),
                  has_projects: faker.datatype.boolean(),
                  has_wiki: faker.datatype.boolean(),
                  has_pages: faker.datatype.boolean(),
                  has_downloads: faker.datatype.boolean(),
                  archived: faker.datatype.boolean(),
                  disabled: faker.datatype.boolean(),
                  visibility: faker.random.words(),
                  pushed_at: faker.random.words(),
                  created_at: faker.random.words(),
                  updated_at: faker.random.words(),
                  permissions: {
                    admin: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    pull: faker.datatype.boolean(),
                  },
                  allow_rebase_merge: faker.datatype.boolean(),
                  temp_clone_token: faker.random.words(),
                  allow_squash_merge: faker.datatype.boolean(),
                  allow_auto_merge: faker.datatype.boolean(),
                  delete_branch_on_merge: faker.datatype.boolean(),
                  allow_update_branch: faker.datatype.boolean(),
                  allow_merge_commit: faker.datatype.boolean(),
                  subscribers_count: faker.datatype.number(),
                  network_count: faker.datatype.number(),
                },
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                allow_forking: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
                open_issues: faker.datatype.number(),
                watchers: faker.datatype.number(),
                master_branch: faker.random.words(),
                starred_at: faker.random.words(),
              },
              sha: faker.random.words(),
              user: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
            },
            base: {
              label: faker.random.words(),
              ref: faker.random.words(),
              repo: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                license: {
                  key: faker.random.words(),
                  name: faker.random.words(),
                  url: faker.random.words(),
                  spdx_id: faker.random.words(),
                  node_id: faker.random.words(),
                  html_url: faker.random.words(),
                },
                organization: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                forks: faker.datatype.number(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                },
                owner: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                allow_rebase_merge: faker.datatype.boolean(),
                template_repository: {
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  name: faker.random.words(),
                  full_name: faker.random.words(),
                  owner: {
                    login: faker.random.words(),
                    id: faker.datatype.number(),
                    node_id: faker.random.words(),
                    avatar_url: faker.random.words(),
                    gravatar_id: faker.random.words(),
                    url: faker.random.words(),
                    html_url: faker.random.words(),
                    followers_url: faker.random.words(),
                    following_url: faker.random.words(),
                    gists_url: faker.random.words(),
                    starred_url: faker.random.words(),
                    subscriptions_url: faker.random.words(),
                    organizations_url: faker.random.words(),
                    repos_url: faker.random.words(),
                    events_url: faker.random.words(),
                    received_events_url: faker.random.words(),
                    type: faker.random.words(),
                    site_admin: faker.datatype.boolean(),
                  },
                  private: faker.datatype.boolean(),
                  html_url: faker.random.words(),
                  description: faker.random.words(),
                  fork: faker.datatype.boolean(),
                  url: faker.random.words(),
                  archive_url: faker.random.words(),
                  assignees_url: faker.random.words(),
                  blobs_url: faker.random.words(),
                  branches_url: faker.random.words(),
                  collaborators_url: faker.random.words(),
                  comments_url: faker.random.words(),
                  commits_url: faker.random.words(),
                  compare_url: faker.random.words(),
                  contents_url: faker.random.words(),
                  contributors_url: faker.random.words(),
                  deployments_url: faker.random.words(),
                  downloads_url: faker.random.words(),
                  events_url: faker.random.words(),
                  forks_url: faker.random.words(),
                  git_commits_url: faker.random.words(),
                  git_refs_url: faker.random.words(),
                  git_tags_url: faker.random.words(),
                  git_url: faker.random.words(),
                  issue_comment_url: faker.random.words(),
                  issue_events_url: faker.random.words(),
                  issues_url: faker.random.words(),
                  keys_url: faker.random.words(),
                  labels_url: faker.random.words(),
                  languages_url: faker.random.words(),
                  merges_url: faker.random.words(),
                  milestones_url: faker.random.words(),
                  notifications_url: faker.random.words(),
                  pulls_url: faker.random.words(),
                  releases_url: faker.random.words(),
                  ssh_url: faker.random.words(),
                  stargazers_url: faker.random.words(),
                  statuses_url: faker.random.words(),
                  subscribers_url: faker.random.words(),
                  subscription_url: faker.random.words(),
                  tags_url: faker.random.words(),
                  teams_url: faker.random.words(),
                  trees_url: faker.random.words(),
                  clone_url: faker.random.words(),
                  mirror_url: faker.random.words(),
                  hooks_url: faker.random.words(),
                  svn_url: faker.random.words(),
                  homepage: faker.random.words(),
                  language: faker.random.words(),
                  forks_count: faker.datatype.number(),
                  stargazers_count: faker.datatype.number(),
                  watchers_count: faker.datatype.number(),
                  size: faker.datatype.number(),
                  default_branch: faker.random.words(),
                  open_issues_count: faker.datatype.number(),
                  is_template: faker.datatype.boolean(),
                  topics: [
                    ...new Array(faker.datatype.number({ max: 100 })).keys(),
                  ].map(_ => faker.random.words()),
                  has_issues: faker.datatype.boolean(),
                  has_projects: faker.datatype.boolean(),
                  has_wiki: faker.datatype.boolean(),
                  has_pages: faker.datatype.boolean(),
                  has_downloads: faker.datatype.boolean(),
                  archived: faker.datatype.boolean(),
                  disabled: faker.datatype.boolean(),
                  visibility: faker.random.words(),
                  pushed_at: faker.random.words(),
                  created_at: faker.random.words(),
                  updated_at: faker.random.words(),
                  permissions: {
                    admin: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    pull: faker.datatype.boolean(),
                  },
                  allow_rebase_merge: faker.datatype.boolean(),
                  temp_clone_token: faker.random.words(),
                  allow_squash_merge: faker.datatype.boolean(),
                  allow_auto_merge: faker.datatype.boolean(),
                  delete_branch_on_merge: faker.datatype.boolean(),
                  allow_update_branch: faker.datatype.boolean(),
                  allow_merge_commit: faker.datatype.boolean(),
                  subscribers_count: faker.datatype.number(),
                  network_count: faker.datatype.number(),
                },
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                allow_forking: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
                open_issues: faker.datatype.number(),
                watchers: faker.datatype.number(),
                master_branch: faker.random.words(),
                starred_at: faker.random.words(),
              },
              sha: faker.random.words(),
              user: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
            },
            _links: {
              comments: {
                href: faker.random.words(),
              },
              commits: {
                href: faker.random.words(),
              },
              statuses: {
                href: faker.random.words(),
              },
              html: {
                href: faker.random.words(),
              },
              issue: {
                href: faker.random.words(),
              },
              review_comments: {
                href: faker.random.words(),
              },
              review_comment: {
                href: faker.random.words(),
              },
              self: {
                href: faker.random.words(),
              },
            },
            author_association: faker.random.arrayElement([
              'COLLABORATOR',
              'CONTRIBUTOR',
              'FIRST_TIMER',
              'FIRST_TIME_CONTRIBUTOR',
              'MANNEQUIN',
              'MEMBER',
              'NONE',
              'OWNER',
            ]),
            auto_merge: {
              enabled_by: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              merge_method: faker.random.arrayElement([
                'merge',
                'squash',
                'rebase',
              ]),
              commit_title: faker.random.words(),
              commit_message: faker.random.words(),
            },
            draft: faker.datatype.boolean(),
          }))
        ),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/repos/:owner/:repo/pulls', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json({
          url: faker.random.words(),
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          html_url: faker.random.words(),
          diff_url: faker.random.words(),
          patch_url: faker.random.words(),
          issue_url: faker.random.words(),
          commits_url: faker.random.words(),
          review_comments_url: faker.random.words(),
          review_comment_url: faker.random.words(),
          comments_url: faker.random.words(),
          statuses_url: faker.random.words(),
          number: faker.datatype.number(),
          state: faker.random.arrayElement(['open', 'closed']),
          locked: faker.datatype.boolean(),
          title: faker.random.words(),
          user: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          body: faker.random.words(),
          labels: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            url: faker.random.words(),
            name: faker.random.words(),
            description: faker.random.words(),
            color: faker.random.words(),
            default: faker.datatype.boolean(),
          })),
          milestone: {
            url: faker.random.words(),
            html_url: faker.random.words(),
            labels_url: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            number: faker.datatype.number(),
            state: faker.random.arrayElement(['open', 'closed']),
            title: faker.random.words(),
            description: faker.random.words(),
            creator: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            open_issues: faker.datatype.number(),
            closed_issues: faker.datatype.number(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            closed_at: faker.random.words(),
            due_on: faker.random.words(),
          },
          active_lock_reason: faker.random.words(),
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          closed_at: faker.random.words(),
          merged_at: faker.random.words(),
          merge_commit_sha: faker.random.words(),
          assignee: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          assignees: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          })),
          requested_reviewers: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          })),
          requested_teams: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            url: faker.random.words(),
            members_url: faker.random.words(),
            name: faker.random.words(),
            description: faker.random.words(),
            permission: faker.random.words(),
            privacy: faker.random.words(),
            html_url: faker.random.words(),
            repositories_url: faker.random.words(),
            slug: faker.random.words(),
            ldap_dn: faker.random.words(),
          })),
          head: {
            label: faker.random.words(),
            ref: faker.random.words(),
            repo: {
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              description: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              fork: faker.datatype.boolean(),
              forks_url: faker.random.words(),
              full_name: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              hooks_url: faker.random.words(),
              html_url: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              name: faker.random.words(),
              notifications_url: faker.random.words(),
              owner: {
                avatar_url: faker.random.words(),
                events_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                html_url: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                login: faker.random.words(),
                organizations_url: faker.random.words(),
                received_events_url: faker.random.words(),
                repos_url: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                type: faker.random.words(),
                url: faker.random.words(),
              },
              private: faker.datatype.boolean(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              url: faker.random.words(),
              clone_url: faker.random.words(),
              default_branch: faker.random.words(),
              forks: faker.datatype.number(),
              forks_count: faker.datatype.number(),
              git_url: faker.random.words(),
              has_downloads: faker.datatype.boolean(),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              master_branch: faker.random.words(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              mirror_url: faker.random.words(),
              open_issues: faker.datatype.number(),
              open_issues_count: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              temp_clone_token: faker.random.words(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_rebase_merge: faker.datatype.boolean(),
              license: {
                key: faker.random.words(),
                name: faker.random.words(),
                url: faker.random.words(),
                spdx_id: faker.random.words(),
                node_id: faker.random.words(),
              },
              pushed_at: faker.random.words(),
              size: faker.datatype.number(),
              ssh_url: faker.random.words(),
              stargazers_count: faker.datatype.number(),
              svn_url: faker.random.words(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              watchers: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              allow_forking: faker.datatype.boolean(),
              is_template: faker.datatype.boolean(),
            },
            sha: faker.random.words(),
            user: {
              avatar_url: faker.random.words(),
              events_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              html_url: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              login: faker.random.words(),
              organizations_url: faker.random.words(),
              received_events_url: faker.random.words(),
              repos_url: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              type: faker.random.words(),
              url: faker.random.words(),
            },
          },
          base: {
            label: faker.random.words(),
            ref: faker.random.words(),
            repo: {
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              description: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              fork: faker.datatype.boolean(),
              forks_url: faker.random.words(),
              full_name: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              hooks_url: faker.random.words(),
              html_url: faker.random.words(),
              id: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              node_id: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              name: faker.random.words(),
              notifications_url: faker.random.words(),
              owner: {
                avatar_url: faker.random.words(),
                events_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                html_url: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                login: faker.random.words(),
                organizations_url: faker.random.words(),
                received_events_url: faker.random.words(),
                repos_url: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                type: faker.random.words(),
                url: faker.random.words(),
              },
              private: faker.datatype.boolean(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              url: faker.random.words(),
              clone_url: faker.random.words(),
              default_branch: faker.random.words(),
              forks: faker.datatype.number(),
              forks_count: faker.datatype.number(),
              git_url: faker.random.words(),
              has_downloads: faker.datatype.boolean(),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              master_branch: faker.random.words(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              mirror_url: faker.random.words(),
              open_issues: faker.datatype.number(),
              open_issues_count: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              temp_clone_token: faker.random.words(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_rebase_merge: faker.datatype.boolean(),
              license: {
                key: faker.random.words(),
                name: faker.random.words(),
                url: faker.random.words(),
                spdx_id: faker.random.words(),
                node_id: faker.random.words(),
                html_url: faker.random.words(),
              },
              pushed_at: faker.random.words(),
              size: faker.datatype.number(),
              ssh_url: faker.random.words(),
              stargazers_count: faker.datatype.number(),
              svn_url: faker.random.words(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              watchers: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              allow_forking: faker.datatype.boolean(),
            },
            sha: faker.random.words(),
            user: {
              avatar_url: faker.random.words(),
              events_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              html_url: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              login: faker.random.words(),
              organizations_url: faker.random.words(),
              received_events_url: faker.random.words(),
              repos_url: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              type: faker.random.words(),
              url: faker.random.words(),
            },
          },
          _links: {
            comments: {
              href: faker.random.words(),
            },
            commits: {
              href: faker.random.words(),
            },
            statuses: {
              href: faker.random.words(),
            },
            html: {
              href: faker.random.words(),
            },
            issue: {
              href: faker.random.words(),
            },
            review_comments: {
              href: faker.random.words(),
            },
            review_comment: {
              href: faker.random.words(),
            },
            self: {
              href: faker.random.words(),
            },
          },
          author_association: faker.random.arrayElement([
            'COLLABORATOR',
            'CONTRIBUTOR',
            'FIRST_TIMER',
            'FIRST_TIME_CONTRIBUTOR',
            'MANNEQUIN',
            'MEMBER',
            'NONE',
            'OWNER',
          ]),
          auto_merge: {
            enabled_by: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            merge_method: faker.random.arrayElement([
              'merge',
              'squash',
              'rebase',
            ]),
            commit_title: faker.random.words(),
            commit_message: faker.random.words(),
          },
          draft: faker.datatype.boolean(),
          merged: faker.datatype.boolean(),
          mergeable: faker.datatype.boolean(),
          rebaseable: faker.datatype.boolean(),
          mergeable_state: faker.random.words(),
          merged_by: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          comments: faker.datatype.number(),
          review_comments: faker.datatype.number(),
          maintainer_can_modify: faker.datatype.boolean(),
          commits: faker.datatype.number(),
          additions: faker.datatype.number(),
          deletions: faker.datatype.number(),
          changed_files: faker.datatype.number(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/pulls/comments', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            url: faker.random.words(),
            pull_request_review_id: faker.datatype.number(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            diff_hunk: faker.random.words(),
            path: faker.random.words(),
            position: faker.datatype.number(),
            original_position: faker.datatype.number(),
            commit_id: faker.random.words(),
            original_commit_id: faker.random.words(),
            in_reply_to_id: faker.datatype.number(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            body: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            html_url: faker.random.words(),
            pull_request_url: faker.random.words(),
            author_association: faker.random.arrayElement([
              'COLLABORATOR',
              'CONTRIBUTOR',
              'FIRST_TIMER',
              'FIRST_TIME_CONTRIBUTOR',
              'MANNEQUIN',
              'MEMBER',
              'NONE',
              'OWNER',
            ]),
            _links: {
              self: {
                href: faker.random.words(),
              },
              html: {
                href: faker.random.words(),
              },
              pull_request: {
                href: faker.random.words(),
              },
            },
            start_line: faker.datatype.number(),
            original_start_line: faker.datatype.number(),
            start_side: faker.random.arrayElement(['LEFT', 'RIGHT']),
            line: faker.datatype.number(),
            original_line: faker.datatype.number(),
            side: faker.random.arrayElement(['LEFT', 'RIGHT']),
            reactions: {
              url: faker.random.words(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
            body_html: faker.random.words(),
            body_text: faker.random.words(),
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get(
    '/repos/:owner/:repo/pulls/comments/:comment_id',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            url: faker.random.words(),
            pull_request_review_id: faker.datatype.number(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            diff_hunk: faker.random.words(),
            path: faker.random.words(),
            position: faker.datatype.number(),
            original_position: faker.datatype.number(),
            commit_id: faker.random.words(),
            original_commit_id: faker.random.words(),
            in_reply_to_id: faker.datatype.number(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            body: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            html_url: faker.random.words(),
            pull_request_url: faker.random.words(),
            author_association: faker.random.arrayElement([
              'COLLABORATOR',
              'CONTRIBUTOR',
              'FIRST_TIMER',
              'FIRST_TIME_CONTRIBUTOR',
              'MANNEQUIN',
              'MEMBER',
              'NONE',
              'OWNER',
            ]),
            _links: {
              self: {
                href: faker.random.words(),
              },
              html: {
                href: faker.random.words(),
              },
              pull_request: {
                href: faker.random.words(),
              },
            },
            start_line: faker.datatype.number(),
            original_start_line: faker.datatype.number(),
            start_side: faker.random.arrayElement(['LEFT', 'RIGHT']),
            line: faker.datatype.number(),
            original_line: faker.datatype.number(),
            side: faker.random.arrayElement(['LEFT', 'RIGHT']),
            reactions: {
              url: faker.random.words(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
            body_html: faker.random.words(),
            body_text: faker.random.words(),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.patch(
    '/repos/:owner/:repo/pulls/comments/:comment_id',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            url: faker.random.words(),
            pull_request_review_id: faker.datatype.number(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            diff_hunk: faker.random.words(),
            path: faker.random.words(),
            position: faker.datatype.number(),
            original_position: faker.datatype.number(),
            commit_id: faker.random.words(),
            original_commit_id: faker.random.words(),
            in_reply_to_id: faker.datatype.number(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            body: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            html_url: faker.random.words(),
            pull_request_url: faker.random.words(),
            author_association: faker.random.arrayElement([
              'COLLABORATOR',
              'CONTRIBUTOR',
              'FIRST_TIMER',
              'FIRST_TIME_CONTRIBUTOR',
              'MANNEQUIN',
              'MEMBER',
              'NONE',
              'OWNER',
            ]),
            _links: {
              self: {
                href: faker.random.words(),
              },
              html: {
                href: faker.random.words(),
              },
              pull_request: {
                href: faker.random.words(),
              },
            },
            start_line: faker.datatype.number(),
            original_start_line: faker.datatype.number(),
            start_side: faker.random.arrayElement(['LEFT', 'RIGHT']),
            line: faker.datatype.number(),
            original_line: faker.datatype.number(),
            side: faker.random.arrayElement(['LEFT', 'RIGHT']),
            reactions: {
              url: faker.random.words(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
            body_html: faker.random.words(),
            body_text: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/repos/:owner/:repo/pulls/comments/:comment_id',
    (req, res, ctx) => {
      const resultArrray = [
        [ctx.status(204), ctx.json({})],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/repos/:owner/:repo/pulls/comments/:comment_id/reactions',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json(
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
              _ => ({
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                user: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                content: faker.random.arrayElement([
                  '+1',
                  '-1',
                  'laugh',
                  'confused',
                  'heart',
                  'hooray',
                  'rocket',
                  'eyes',
                ]),
                created_at: faker.random.words(),
              })
            )
          ),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.post(
    '/repos/:owner/:repo/pulls/comments/:comment_id/reactions',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            content: faker.random.arrayElement([
              '+1',
              '-1',
              'laugh',
              'confused',
              'heart',
              'hooray',
              'rocket',
              'eyes',
            ]),
            created_at: faker.random.words(),
          }),
        ],
        [
          ctx.status(201),
          ctx.json({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            content: faker.random.arrayElement([
              '+1',
              '-1',
              'laugh',
              'confused',
              'heart',
              'hooray',
              'rocket',
              'eyes',
            ]),
            created_at: faker.random.words(),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            errors: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              resource: faker.random.words(),
              field: faker.random.words(),
              message: faker.random.words(),
              code: faker.random.words(),
              index: faker.datatype.number(),
              value: {},
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/repos/:owner/:repo/pulls/comments/:comment_id/reactions/:reaction_id',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get('/repos/:owner/:repo/pulls/:pull_number', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          url: faker.random.words(),
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          html_url: faker.random.words(),
          diff_url: faker.random.words(),
          patch_url: faker.random.words(),
          issue_url: faker.random.words(),
          commits_url: faker.random.words(),
          review_comments_url: faker.random.words(),
          review_comment_url: faker.random.words(),
          comments_url: faker.random.words(),
          statuses_url: faker.random.words(),
          number: faker.datatype.number(),
          state: faker.random.arrayElement(['open', 'closed']),
          locked: faker.datatype.boolean(),
          title: faker.random.words(),
          user: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          body: faker.random.words(),
          labels: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            url: faker.random.words(),
            name: faker.random.words(),
            description: faker.random.words(),
            color: faker.random.words(),
            default: faker.datatype.boolean(),
          })),
          milestone: {
            url: faker.random.words(),
            html_url: faker.random.words(),
            labels_url: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            number: faker.datatype.number(),
            state: faker.random.arrayElement(['open', 'closed']),
            title: faker.random.words(),
            description: faker.random.words(),
            creator: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            open_issues: faker.datatype.number(),
            closed_issues: faker.datatype.number(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            closed_at: faker.random.words(),
            due_on: faker.random.words(),
          },
          active_lock_reason: faker.random.words(),
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          closed_at: faker.random.words(),
          merged_at: faker.random.words(),
          merge_commit_sha: faker.random.words(),
          assignee: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          assignees: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          })),
          requested_reviewers: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          })),
          requested_teams: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            url: faker.random.words(),
            members_url: faker.random.words(),
            name: faker.random.words(),
            description: faker.random.words(),
            permission: faker.random.words(),
            privacy: faker.random.words(),
            html_url: faker.random.words(),
            repositories_url: faker.random.words(),
            slug: faker.random.words(),
            ldap_dn: faker.random.words(),
          })),
          head: {
            label: faker.random.words(),
            ref: faker.random.words(),
            repo: {
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              description: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              fork: faker.datatype.boolean(),
              forks_url: faker.random.words(),
              full_name: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              hooks_url: faker.random.words(),
              html_url: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              name: faker.random.words(),
              notifications_url: faker.random.words(),
              owner: {
                avatar_url: faker.random.words(),
                events_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                html_url: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                login: faker.random.words(),
                organizations_url: faker.random.words(),
                received_events_url: faker.random.words(),
                repos_url: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                type: faker.random.words(),
                url: faker.random.words(),
              },
              private: faker.datatype.boolean(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              url: faker.random.words(),
              clone_url: faker.random.words(),
              default_branch: faker.random.words(),
              forks: faker.datatype.number(),
              forks_count: faker.datatype.number(),
              git_url: faker.random.words(),
              has_downloads: faker.datatype.boolean(),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              master_branch: faker.random.words(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              mirror_url: faker.random.words(),
              open_issues: faker.datatype.number(),
              open_issues_count: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              temp_clone_token: faker.random.words(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_rebase_merge: faker.datatype.boolean(),
              license: {
                key: faker.random.words(),
                name: faker.random.words(),
                url: faker.random.words(),
                spdx_id: faker.random.words(),
                node_id: faker.random.words(),
              },
              pushed_at: faker.random.words(),
              size: faker.datatype.number(),
              ssh_url: faker.random.words(),
              stargazers_count: faker.datatype.number(),
              svn_url: faker.random.words(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              watchers: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              allow_forking: faker.datatype.boolean(),
              is_template: faker.datatype.boolean(),
            },
            sha: faker.random.words(),
            user: {
              avatar_url: faker.random.words(),
              events_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              html_url: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              login: faker.random.words(),
              organizations_url: faker.random.words(),
              received_events_url: faker.random.words(),
              repos_url: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              type: faker.random.words(),
              url: faker.random.words(),
            },
          },
          base: {
            label: faker.random.words(),
            ref: faker.random.words(),
            repo: {
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              description: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              fork: faker.datatype.boolean(),
              forks_url: faker.random.words(),
              full_name: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              hooks_url: faker.random.words(),
              html_url: faker.random.words(),
              id: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              node_id: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              name: faker.random.words(),
              notifications_url: faker.random.words(),
              owner: {
                avatar_url: faker.random.words(),
                events_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                html_url: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                login: faker.random.words(),
                organizations_url: faker.random.words(),
                received_events_url: faker.random.words(),
                repos_url: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                type: faker.random.words(),
                url: faker.random.words(),
              },
              private: faker.datatype.boolean(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              url: faker.random.words(),
              clone_url: faker.random.words(),
              default_branch: faker.random.words(),
              forks: faker.datatype.number(),
              forks_count: faker.datatype.number(),
              git_url: faker.random.words(),
              has_downloads: faker.datatype.boolean(),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              master_branch: faker.random.words(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              mirror_url: faker.random.words(),
              open_issues: faker.datatype.number(),
              open_issues_count: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              temp_clone_token: faker.random.words(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_rebase_merge: faker.datatype.boolean(),
              license: {
                key: faker.random.words(),
                name: faker.random.words(),
                url: faker.random.words(),
                spdx_id: faker.random.words(),
                node_id: faker.random.words(),
                html_url: faker.random.words(),
              },
              pushed_at: faker.random.words(),
              size: faker.datatype.number(),
              ssh_url: faker.random.words(),
              stargazers_count: faker.datatype.number(),
              svn_url: faker.random.words(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              watchers: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              allow_forking: faker.datatype.boolean(),
            },
            sha: faker.random.words(),
            user: {
              avatar_url: faker.random.words(),
              events_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              html_url: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              login: faker.random.words(),
              organizations_url: faker.random.words(),
              received_events_url: faker.random.words(),
              repos_url: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              type: faker.random.words(),
              url: faker.random.words(),
            },
          },
          _links: {
            comments: {
              href: faker.random.words(),
            },
            commits: {
              href: faker.random.words(),
            },
            statuses: {
              href: faker.random.words(),
            },
            html: {
              href: faker.random.words(),
            },
            issue: {
              href: faker.random.words(),
            },
            review_comments: {
              href: faker.random.words(),
            },
            review_comment: {
              href: faker.random.words(),
            },
            self: {
              href: faker.random.words(),
            },
          },
          author_association: faker.random.arrayElement([
            'COLLABORATOR',
            'CONTRIBUTOR',
            'FIRST_TIMER',
            'FIRST_TIME_CONTRIBUTOR',
            'MANNEQUIN',
            'MEMBER',
            'NONE',
            'OWNER',
          ]),
          auto_merge: {
            enabled_by: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            merge_method: faker.random.arrayElement([
              'merge',
              'squash',
              'rebase',
            ]),
            commit_title: faker.random.words(),
            commit_message: faker.random.words(),
          },
          draft: faker.datatype.boolean(),
          merged: faker.datatype.boolean(),
          mergeable: faker.datatype.boolean(),
          rebaseable: faker.datatype.boolean(),
          mergeable_state: faker.random.words(),
          merged_by: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          comments: faker.datatype.number(),
          review_comments: faker.datatype.number(),
          maintainer_can_modify: faker.datatype.boolean(),
          commits: faker.datatype.number(),
          additions: faker.datatype.number(),
          deletions: faker.datatype.number(),
          changed_files: faker.datatype.number(),
        }),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(500),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.patch('/repos/:owner/:repo/pulls/:pull_number', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          url: faker.random.words(),
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          html_url: faker.random.words(),
          diff_url: faker.random.words(),
          patch_url: faker.random.words(),
          issue_url: faker.random.words(),
          commits_url: faker.random.words(),
          review_comments_url: faker.random.words(),
          review_comment_url: faker.random.words(),
          comments_url: faker.random.words(),
          statuses_url: faker.random.words(),
          number: faker.datatype.number(),
          state: faker.random.arrayElement(['open', 'closed']),
          locked: faker.datatype.boolean(),
          title: faker.random.words(),
          user: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          body: faker.random.words(),
          labels: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            url: faker.random.words(),
            name: faker.random.words(),
            description: faker.random.words(),
            color: faker.random.words(),
            default: faker.datatype.boolean(),
          })),
          milestone: {
            url: faker.random.words(),
            html_url: faker.random.words(),
            labels_url: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            number: faker.datatype.number(),
            state: faker.random.arrayElement(['open', 'closed']),
            title: faker.random.words(),
            description: faker.random.words(),
            creator: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            open_issues: faker.datatype.number(),
            closed_issues: faker.datatype.number(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            closed_at: faker.random.words(),
            due_on: faker.random.words(),
          },
          active_lock_reason: faker.random.words(),
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          closed_at: faker.random.words(),
          merged_at: faker.random.words(),
          merge_commit_sha: faker.random.words(),
          assignee: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          assignees: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          })),
          requested_reviewers: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          })),
          requested_teams: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            url: faker.random.words(),
            members_url: faker.random.words(),
            name: faker.random.words(),
            description: faker.random.words(),
            permission: faker.random.words(),
            privacy: faker.random.words(),
            html_url: faker.random.words(),
            repositories_url: faker.random.words(),
            slug: faker.random.words(),
            ldap_dn: faker.random.words(),
          })),
          head: {
            label: faker.random.words(),
            ref: faker.random.words(),
            repo: {
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              description: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              fork: faker.datatype.boolean(),
              forks_url: faker.random.words(),
              full_name: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              hooks_url: faker.random.words(),
              html_url: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              name: faker.random.words(),
              notifications_url: faker.random.words(),
              owner: {
                avatar_url: faker.random.words(),
                events_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                html_url: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                login: faker.random.words(),
                organizations_url: faker.random.words(),
                received_events_url: faker.random.words(),
                repos_url: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                type: faker.random.words(),
                url: faker.random.words(),
              },
              private: faker.datatype.boolean(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              url: faker.random.words(),
              clone_url: faker.random.words(),
              default_branch: faker.random.words(),
              forks: faker.datatype.number(),
              forks_count: faker.datatype.number(),
              git_url: faker.random.words(),
              has_downloads: faker.datatype.boolean(),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              master_branch: faker.random.words(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              mirror_url: faker.random.words(),
              open_issues: faker.datatype.number(),
              open_issues_count: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              temp_clone_token: faker.random.words(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_rebase_merge: faker.datatype.boolean(),
              license: {
                key: faker.random.words(),
                name: faker.random.words(),
                url: faker.random.words(),
                spdx_id: faker.random.words(),
                node_id: faker.random.words(),
              },
              pushed_at: faker.random.words(),
              size: faker.datatype.number(),
              ssh_url: faker.random.words(),
              stargazers_count: faker.datatype.number(),
              svn_url: faker.random.words(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              watchers: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              allow_forking: faker.datatype.boolean(),
              is_template: faker.datatype.boolean(),
            },
            sha: faker.random.words(),
            user: {
              avatar_url: faker.random.words(),
              events_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              html_url: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              login: faker.random.words(),
              organizations_url: faker.random.words(),
              received_events_url: faker.random.words(),
              repos_url: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              type: faker.random.words(),
              url: faker.random.words(),
            },
          },
          base: {
            label: faker.random.words(),
            ref: faker.random.words(),
            repo: {
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              description: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              fork: faker.datatype.boolean(),
              forks_url: faker.random.words(),
              full_name: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              hooks_url: faker.random.words(),
              html_url: faker.random.words(),
              id: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              node_id: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              name: faker.random.words(),
              notifications_url: faker.random.words(),
              owner: {
                avatar_url: faker.random.words(),
                events_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                html_url: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                login: faker.random.words(),
                organizations_url: faker.random.words(),
                received_events_url: faker.random.words(),
                repos_url: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                type: faker.random.words(),
                url: faker.random.words(),
              },
              private: faker.datatype.boolean(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              url: faker.random.words(),
              clone_url: faker.random.words(),
              default_branch: faker.random.words(),
              forks: faker.datatype.number(),
              forks_count: faker.datatype.number(),
              git_url: faker.random.words(),
              has_downloads: faker.datatype.boolean(),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              master_branch: faker.random.words(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              mirror_url: faker.random.words(),
              open_issues: faker.datatype.number(),
              open_issues_count: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              temp_clone_token: faker.random.words(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_rebase_merge: faker.datatype.boolean(),
              license: {
                key: faker.random.words(),
                name: faker.random.words(),
                url: faker.random.words(),
                spdx_id: faker.random.words(),
                node_id: faker.random.words(),
                html_url: faker.random.words(),
              },
              pushed_at: faker.random.words(),
              size: faker.datatype.number(),
              ssh_url: faker.random.words(),
              stargazers_count: faker.datatype.number(),
              svn_url: faker.random.words(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              watchers: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              allow_forking: faker.datatype.boolean(),
            },
            sha: faker.random.words(),
            user: {
              avatar_url: faker.random.words(),
              events_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              html_url: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              login: faker.random.words(),
              organizations_url: faker.random.words(),
              received_events_url: faker.random.words(),
              repos_url: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              type: faker.random.words(),
              url: faker.random.words(),
            },
          },
          _links: {
            comments: {
              href: faker.random.words(),
            },
            commits: {
              href: faker.random.words(),
            },
            statuses: {
              href: faker.random.words(),
            },
            html: {
              href: faker.random.words(),
            },
            issue: {
              href: faker.random.words(),
            },
            review_comments: {
              href: faker.random.words(),
            },
            review_comment: {
              href: faker.random.words(),
            },
            self: {
              href: faker.random.words(),
            },
          },
          author_association: faker.random.arrayElement([
            'COLLABORATOR',
            'CONTRIBUTOR',
            'FIRST_TIMER',
            'FIRST_TIME_CONTRIBUTOR',
            'MANNEQUIN',
            'MEMBER',
            'NONE',
            'OWNER',
          ]),
          auto_merge: {
            enabled_by: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            merge_method: faker.random.arrayElement([
              'merge',
              'squash',
              'rebase',
            ]),
            commit_title: faker.random.words(),
            commit_message: faker.random.words(),
          },
          draft: faker.datatype.boolean(),
          merged: faker.datatype.boolean(),
          mergeable: faker.datatype.boolean(),
          rebaseable: faker.datatype.boolean(),
          mergeable_state: faker.random.words(),
          merged_by: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          comments: faker.datatype.number(),
          review_comments: faker.datatype.number(),
          maintainer_can_modify: faker.datatype.boolean(),
          commits: faker.datatype.number(),
          additions: faker.datatype.number(),
          deletions: faker.datatype.number(),
          changed_files: faker.datatype.number(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get(
    '/repos/:owner/:repo/pulls/:pull_number/comments',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json(
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
              _ => ({
                url: faker.random.words(),
                pull_request_review_id: faker.datatype.number(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                diff_hunk: faker.random.words(),
                path: faker.random.words(),
                position: faker.datatype.number(),
                original_position: faker.datatype.number(),
                commit_id: faker.random.words(),
                original_commit_id: faker.random.words(),
                in_reply_to_id: faker.datatype.number(),
                user: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                body: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                html_url: faker.random.words(),
                pull_request_url: faker.random.words(),
                author_association: faker.random.arrayElement([
                  'COLLABORATOR',
                  'CONTRIBUTOR',
                  'FIRST_TIMER',
                  'FIRST_TIME_CONTRIBUTOR',
                  'MANNEQUIN',
                  'MEMBER',
                  'NONE',
                  'OWNER',
                ]),
                _links: {
                  self: {
                    href: faker.random.words(),
                  },
                  html: {
                    href: faker.random.words(),
                  },
                  pull_request: {
                    href: faker.random.words(),
                  },
                },
                start_line: faker.datatype.number(),
                original_start_line: faker.datatype.number(),
                start_side: faker.random.arrayElement(['LEFT', 'RIGHT']),
                line: faker.datatype.number(),
                original_line: faker.datatype.number(),
                side: faker.random.arrayElement(['LEFT', 'RIGHT']),
                reactions: {
                  url: faker.random.words(),
                  total_count: faker.datatype.number(),
                  '+1': faker.datatype.number(),
                  '-1': faker.datatype.number(),
                  laugh: faker.datatype.number(),
                  confused: faker.datatype.number(),
                  heart: faker.datatype.number(),
                  hooray: faker.datatype.number(),
                  eyes: faker.datatype.number(),
                  rocket: faker.datatype.number(),
                },
                body_html: faker.random.words(),
                body_text: faker.random.words(),
              })
            )
          ),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.post(
    '/repos/:owner/:repo/pulls/:pull_number/comments',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(201),
          ctx.json({
            url: faker.random.words(),
            pull_request_review_id: faker.datatype.number(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            diff_hunk: faker.random.words(),
            path: faker.random.words(),
            position: faker.datatype.number(),
            original_position: faker.datatype.number(),
            commit_id: faker.random.words(),
            original_commit_id: faker.random.words(),
            in_reply_to_id: faker.datatype.number(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            body: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            html_url: faker.random.words(),
            pull_request_url: faker.random.words(),
            author_association: faker.random.arrayElement([
              'COLLABORATOR',
              'CONTRIBUTOR',
              'FIRST_TIMER',
              'FIRST_TIME_CONTRIBUTOR',
              'MANNEQUIN',
              'MEMBER',
              'NONE',
              'OWNER',
            ]),
            _links: {
              self: {
                href: faker.random.words(),
              },
              html: {
                href: faker.random.words(),
              },
              pull_request: {
                href: faker.random.words(),
              },
            },
            start_line: faker.datatype.number(),
            original_start_line: faker.datatype.number(),
            start_side: faker.random.arrayElement(['LEFT', 'RIGHT']),
            line: faker.datatype.number(),
            original_line: faker.datatype.number(),
            side: faker.random.arrayElement(['LEFT', 'RIGHT']),
            reactions: {
              url: faker.random.words(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
            body_html: faker.random.words(),
            body_text: faker.random.words(),
          }),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            errors: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              resource: faker.random.words(),
              field: faker.random.words(),
              message: faker.random.words(),
              code: faker.random.words(),
              index: faker.datatype.number(),
              value: {},
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.post(
    '/repos/:owner/:repo/pulls/:pull_number/comments/:comment_id/replies',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(201),
          ctx.json({
            url: faker.random.words(),
            pull_request_review_id: faker.datatype.number(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            diff_hunk: faker.random.words(),
            path: faker.random.words(),
            position: faker.datatype.number(),
            original_position: faker.datatype.number(),
            commit_id: faker.random.words(),
            original_commit_id: faker.random.words(),
            in_reply_to_id: faker.datatype.number(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            body: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            html_url: faker.random.words(),
            pull_request_url: faker.random.words(),
            author_association: faker.random.arrayElement([
              'COLLABORATOR',
              'CONTRIBUTOR',
              'FIRST_TIMER',
              'FIRST_TIME_CONTRIBUTOR',
              'MANNEQUIN',
              'MEMBER',
              'NONE',
              'OWNER',
            ]),
            _links: {
              self: {
                href: faker.random.words(),
              },
              html: {
                href: faker.random.words(),
              },
              pull_request: {
                href: faker.random.words(),
              },
            },
            start_line: faker.datatype.number(),
            original_start_line: faker.datatype.number(),
            start_side: faker.random.arrayElement(['LEFT', 'RIGHT']),
            line: faker.datatype.number(),
            original_line: faker.datatype.number(),
            side: faker.random.arrayElement(['LEFT', 'RIGHT']),
            reactions: {
              url: faker.random.words(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
            body_html: faker.random.words(),
            body_text: faker.random.words(),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/repos/:owner/:repo/pulls/:pull_number/commits',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json(
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
              _ => ({
                url: faker.random.words(),
                sha: faker.random.words(),
                node_id: faker.random.words(),
                html_url: faker.random.words(),
                comments_url: faker.random.words(),
                commit: {
                  url: faker.random.words(),
                  author: {
                    name: faker.random.words(),
                    email: faker.random.words(),
                    date: faker.random.words(),
                  },
                  committer: {
                    name: faker.random.words(),
                    email: faker.random.words(),
                    date: faker.random.words(),
                  },
                  message: faker.random.words(),
                  comment_count: faker.datatype.number(),
                  tree: {
                    sha: faker.random.words(),
                    url: faker.random.words(),
                  },
                  verification: {
                    verified: faker.datatype.boolean(),
                    reason: faker.random.words(),
                    payload: faker.random.words(),
                    signature: faker.random.words(),
                  },
                },
                author: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                committer: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                parents: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => ({
                  sha: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                })),
                stats: {
                  additions: faker.datatype.number(),
                  deletions: faker.datatype.number(),
                  total: faker.datatype.number(),
                },
                files: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => ({
                  sha: faker.random.words(),
                  filename: faker.random.words(),
                  status: faker.random.arrayElement([
                    'added',
                    'removed',
                    'modified',
                    'renamed',
                    'copied',
                    'changed',
                    'unchanged',
                  ]),
                  additions: faker.datatype.number(),
                  deletions: faker.datatype.number(),
                  changes: faker.datatype.number(),
                  blob_url: faker.random.words(),
                  raw_url: faker.random.words(),
                  contents_url: faker.random.words(),
                  patch: faker.random.words(),
                  previous_filename: faker.random.words(),
                })),
              })
            )
          ),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get('/repos/:owner/:repo/pulls/:pull_number/files', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            sha: faker.random.words(),
            filename: faker.random.words(),
            status: faker.random.arrayElement([
              'added',
              'removed',
              'modified',
              'renamed',
              'copied',
              'changed',
              'unchanged',
            ]),
            additions: faker.datatype.number(),
            deletions: faker.datatype.number(),
            changes: faker.datatype.number(),
            blob_url: faker.random.words(),
            raw_url: faker.random.words(),
            contents_url: faker.random.words(),
            patch: faker.random.words(),
            previous_filename: faker.random.words(),
          }))
        ),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
      [
        ctx.status(500),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/pulls/:pull_number/merge', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [ctx.status(404), ctx.json({})],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.put('/repos/:owner/:repo/pulls/:pull_number/merge', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          sha: faker.random.words(),
          merged: faker.datatype.boolean(),
          message: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(405),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
        }),
      ],
      [
        ctx.status(409),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get(
    '/repos/:owner/:repo/pulls/:pull_number/requested_reviewers',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            users: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            })),
            teams: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              slug: faker.random.words(),
              description: faker.random.words(),
              privacy: faker.random.words(),
              permission: faker.random.words(),
              permissions: {
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                admin: faker.datatype.boolean(),
              },
              url: faker.random.words(),
              html_url: faker.random.words(),
              members_url: faker.random.words(),
              repositories_url: faker.random.words(),
              parent: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                url: faker.random.words(),
                members_url: faker.random.words(),
                name: faker.random.words(),
                description: faker.random.words(),
                permission: faker.random.words(),
                privacy: faker.random.words(),
                html_url: faker.random.words(),
                repositories_url: faker.random.words(),
                slug: faker.random.words(),
                ldap_dn: faker.random.words(),
              },
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.post(
    '/repos/:owner/:repo/pulls/:pull_number/requested_reviewers',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(201),
          ctx.json({
            url: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            html_url: faker.random.words(),
            diff_url: faker.random.words(),
            patch_url: faker.random.words(),
            issue_url: faker.random.words(),
            commits_url: faker.random.words(),
            review_comments_url: faker.random.words(),
            review_comment_url: faker.random.words(),
            comments_url: faker.random.words(),
            statuses_url: faker.random.words(),
            number: faker.datatype.number(),
            state: faker.random.words(),
            locked: faker.datatype.boolean(),
            title: faker.random.words(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            body: faker.random.words(),
            labels: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              url: faker.random.words(),
              name: faker.random.words(),
              description: faker.random.words(),
              color: faker.random.words(),
              default: faker.datatype.boolean(),
            })),
            milestone: {
              url: faker.random.words(),
              html_url: faker.random.words(),
              labels_url: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              number: faker.datatype.number(),
              state: faker.random.arrayElement(['open', 'closed']),
              title: faker.random.words(),
              description: faker.random.words(),
              creator: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              open_issues: faker.datatype.number(),
              closed_issues: faker.datatype.number(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              closed_at: faker.random.words(),
              due_on: faker.random.words(),
            },
            active_lock_reason: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            closed_at: faker.random.words(),
            merged_at: faker.random.words(),
            merge_commit_sha: faker.random.words(),
            assignee: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            assignees: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            })),
            requested_reviewers: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            })),
            requested_teams: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              slug: faker.random.words(),
              description: faker.random.words(),
              privacy: faker.random.words(),
              permission: faker.random.words(),
              permissions: {
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                admin: faker.datatype.boolean(),
              },
              url: faker.random.words(),
              html_url: faker.random.words(),
              members_url: faker.random.words(),
              repositories_url: faker.random.words(),
              parent: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                url: faker.random.words(),
                members_url: faker.random.words(),
                name: faker.random.words(),
                description: faker.random.words(),
                permission: faker.random.words(),
                privacy: faker.random.words(),
                html_url: faker.random.words(),
                repositories_url: faker.random.words(),
                slug: faker.random.words(),
                ldap_dn: faker.random.words(),
              },
            })),
            head: {
              label: faker.random.words(),
              ref: faker.random.words(),
              repo: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                license: {
                  key: faker.random.words(),
                  name: faker.random.words(),
                  url: faker.random.words(),
                  spdx_id: faker.random.words(),
                  node_id: faker.random.words(),
                  html_url: faker.random.words(),
                },
                organization: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                forks: faker.datatype.number(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                },
                owner: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                allow_rebase_merge: faker.datatype.boolean(),
                template_repository: {
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  name: faker.random.words(),
                  full_name: faker.random.words(),
                  owner: {
                    login: faker.random.words(),
                    id: faker.datatype.number(),
                    node_id: faker.random.words(),
                    avatar_url: faker.random.words(),
                    gravatar_id: faker.random.words(),
                    url: faker.random.words(),
                    html_url: faker.random.words(),
                    followers_url: faker.random.words(),
                    following_url: faker.random.words(),
                    gists_url: faker.random.words(),
                    starred_url: faker.random.words(),
                    subscriptions_url: faker.random.words(),
                    organizations_url: faker.random.words(),
                    repos_url: faker.random.words(),
                    events_url: faker.random.words(),
                    received_events_url: faker.random.words(),
                    type: faker.random.words(),
                    site_admin: faker.datatype.boolean(),
                  },
                  private: faker.datatype.boolean(),
                  html_url: faker.random.words(),
                  description: faker.random.words(),
                  fork: faker.datatype.boolean(),
                  url: faker.random.words(),
                  archive_url: faker.random.words(),
                  assignees_url: faker.random.words(),
                  blobs_url: faker.random.words(),
                  branches_url: faker.random.words(),
                  collaborators_url: faker.random.words(),
                  comments_url: faker.random.words(),
                  commits_url: faker.random.words(),
                  compare_url: faker.random.words(),
                  contents_url: faker.random.words(),
                  contributors_url: faker.random.words(),
                  deployments_url: faker.random.words(),
                  downloads_url: faker.random.words(),
                  events_url: faker.random.words(),
                  forks_url: faker.random.words(),
                  git_commits_url: faker.random.words(),
                  git_refs_url: faker.random.words(),
                  git_tags_url: faker.random.words(),
                  git_url: faker.random.words(),
                  issue_comment_url: faker.random.words(),
                  issue_events_url: faker.random.words(),
                  issues_url: faker.random.words(),
                  keys_url: faker.random.words(),
                  labels_url: faker.random.words(),
                  languages_url: faker.random.words(),
                  merges_url: faker.random.words(),
                  milestones_url: faker.random.words(),
                  notifications_url: faker.random.words(),
                  pulls_url: faker.random.words(),
                  releases_url: faker.random.words(),
                  ssh_url: faker.random.words(),
                  stargazers_url: faker.random.words(),
                  statuses_url: faker.random.words(),
                  subscribers_url: faker.random.words(),
                  subscription_url: faker.random.words(),
                  tags_url: faker.random.words(),
                  teams_url: faker.random.words(),
                  trees_url: faker.random.words(),
                  clone_url: faker.random.words(),
                  mirror_url: faker.random.words(),
                  hooks_url: faker.random.words(),
                  svn_url: faker.random.words(),
                  homepage: faker.random.words(),
                  language: faker.random.words(),
                  forks_count: faker.datatype.number(),
                  stargazers_count: faker.datatype.number(),
                  watchers_count: faker.datatype.number(),
                  size: faker.datatype.number(),
                  default_branch: faker.random.words(),
                  open_issues_count: faker.datatype.number(),
                  is_template: faker.datatype.boolean(),
                  topics: [
                    ...new Array(faker.datatype.number({ max: 100 })).keys(),
                  ].map(_ => faker.random.words()),
                  has_issues: faker.datatype.boolean(),
                  has_projects: faker.datatype.boolean(),
                  has_wiki: faker.datatype.boolean(),
                  has_pages: faker.datatype.boolean(),
                  has_downloads: faker.datatype.boolean(),
                  archived: faker.datatype.boolean(),
                  disabled: faker.datatype.boolean(),
                  visibility: faker.random.words(),
                  pushed_at: faker.random.words(),
                  created_at: faker.random.words(),
                  updated_at: faker.random.words(),
                  permissions: {
                    admin: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    pull: faker.datatype.boolean(),
                  },
                  allow_rebase_merge: faker.datatype.boolean(),
                  temp_clone_token: faker.random.words(),
                  allow_squash_merge: faker.datatype.boolean(),
                  allow_auto_merge: faker.datatype.boolean(),
                  delete_branch_on_merge: faker.datatype.boolean(),
                  allow_update_branch: faker.datatype.boolean(),
                  allow_merge_commit: faker.datatype.boolean(),
                  subscribers_count: faker.datatype.number(),
                  network_count: faker.datatype.number(),
                },
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                allow_forking: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
                open_issues: faker.datatype.number(),
                watchers: faker.datatype.number(),
                master_branch: faker.random.words(),
                starred_at: faker.random.words(),
              },
              sha: faker.random.words(),
              user: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
            },
            base: {
              label: faker.random.words(),
              ref: faker.random.words(),
              repo: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                license: {
                  key: faker.random.words(),
                  name: faker.random.words(),
                  url: faker.random.words(),
                  spdx_id: faker.random.words(),
                  node_id: faker.random.words(),
                  html_url: faker.random.words(),
                },
                organization: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                forks: faker.datatype.number(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                },
                owner: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                allow_rebase_merge: faker.datatype.boolean(),
                template_repository: {
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  name: faker.random.words(),
                  full_name: faker.random.words(),
                  owner: {
                    login: faker.random.words(),
                    id: faker.datatype.number(),
                    node_id: faker.random.words(),
                    avatar_url: faker.random.words(),
                    gravatar_id: faker.random.words(),
                    url: faker.random.words(),
                    html_url: faker.random.words(),
                    followers_url: faker.random.words(),
                    following_url: faker.random.words(),
                    gists_url: faker.random.words(),
                    starred_url: faker.random.words(),
                    subscriptions_url: faker.random.words(),
                    organizations_url: faker.random.words(),
                    repos_url: faker.random.words(),
                    events_url: faker.random.words(),
                    received_events_url: faker.random.words(),
                    type: faker.random.words(),
                    site_admin: faker.datatype.boolean(),
                  },
                  private: faker.datatype.boolean(),
                  html_url: faker.random.words(),
                  description: faker.random.words(),
                  fork: faker.datatype.boolean(),
                  url: faker.random.words(),
                  archive_url: faker.random.words(),
                  assignees_url: faker.random.words(),
                  blobs_url: faker.random.words(),
                  branches_url: faker.random.words(),
                  collaborators_url: faker.random.words(),
                  comments_url: faker.random.words(),
                  commits_url: faker.random.words(),
                  compare_url: faker.random.words(),
                  contents_url: faker.random.words(),
                  contributors_url: faker.random.words(),
                  deployments_url: faker.random.words(),
                  downloads_url: faker.random.words(),
                  events_url: faker.random.words(),
                  forks_url: faker.random.words(),
                  git_commits_url: faker.random.words(),
                  git_refs_url: faker.random.words(),
                  git_tags_url: faker.random.words(),
                  git_url: faker.random.words(),
                  issue_comment_url: faker.random.words(),
                  issue_events_url: faker.random.words(),
                  issues_url: faker.random.words(),
                  keys_url: faker.random.words(),
                  labels_url: faker.random.words(),
                  languages_url: faker.random.words(),
                  merges_url: faker.random.words(),
                  milestones_url: faker.random.words(),
                  notifications_url: faker.random.words(),
                  pulls_url: faker.random.words(),
                  releases_url: faker.random.words(),
                  ssh_url: faker.random.words(),
                  stargazers_url: faker.random.words(),
                  statuses_url: faker.random.words(),
                  subscribers_url: faker.random.words(),
                  subscription_url: faker.random.words(),
                  tags_url: faker.random.words(),
                  teams_url: faker.random.words(),
                  trees_url: faker.random.words(),
                  clone_url: faker.random.words(),
                  mirror_url: faker.random.words(),
                  hooks_url: faker.random.words(),
                  svn_url: faker.random.words(),
                  homepage: faker.random.words(),
                  language: faker.random.words(),
                  forks_count: faker.datatype.number(),
                  stargazers_count: faker.datatype.number(),
                  watchers_count: faker.datatype.number(),
                  size: faker.datatype.number(),
                  default_branch: faker.random.words(),
                  open_issues_count: faker.datatype.number(),
                  is_template: faker.datatype.boolean(),
                  topics: [
                    ...new Array(faker.datatype.number({ max: 100 })).keys(),
                  ].map(_ => faker.random.words()),
                  has_issues: faker.datatype.boolean(),
                  has_projects: faker.datatype.boolean(),
                  has_wiki: faker.datatype.boolean(),
                  has_pages: faker.datatype.boolean(),
                  has_downloads: faker.datatype.boolean(),
                  archived: faker.datatype.boolean(),
                  disabled: faker.datatype.boolean(),
                  visibility: faker.random.words(),
                  pushed_at: faker.random.words(),
                  created_at: faker.random.words(),
                  updated_at: faker.random.words(),
                  permissions: {
                    admin: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    pull: faker.datatype.boolean(),
                  },
                  allow_rebase_merge: faker.datatype.boolean(),
                  temp_clone_token: faker.random.words(),
                  allow_squash_merge: faker.datatype.boolean(),
                  allow_auto_merge: faker.datatype.boolean(),
                  delete_branch_on_merge: faker.datatype.boolean(),
                  allow_update_branch: faker.datatype.boolean(),
                  allow_merge_commit: faker.datatype.boolean(),
                  subscribers_count: faker.datatype.number(),
                  network_count: faker.datatype.number(),
                },
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                allow_forking: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
                open_issues: faker.datatype.number(),
                watchers: faker.datatype.number(),
                master_branch: faker.random.words(),
                starred_at: faker.random.words(),
              },
              sha: faker.random.words(),
              user: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
            },
            _links: {
              comments: {
                href: faker.random.words(),
              },
              commits: {
                href: faker.random.words(),
              },
              statuses: {
                href: faker.random.words(),
              },
              html: {
                href: faker.random.words(),
              },
              issue: {
                href: faker.random.words(),
              },
              review_comments: {
                href: faker.random.words(),
              },
              review_comment: {
                href: faker.random.words(),
              },
              self: {
                href: faker.random.words(),
              },
            },
            author_association: faker.random.arrayElement([
              'COLLABORATOR',
              'CONTRIBUTOR',
              'FIRST_TIMER',
              'FIRST_TIME_CONTRIBUTOR',
              'MANNEQUIN',
              'MEMBER',
              'NONE',
              'OWNER',
            ]),
            auto_merge: {
              enabled_by: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              merge_method: faker.random.arrayElement([
                'merge',
                'squash',
                'rebase',
              ]),
              commit_title: faker.random.words(),
              commit_message: faker.random.words(),
            },
            draft: faker.datatype.boolean(),
          }),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [ctx.status(422), ctx.json({})],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/repos/:owner/:repo/pulls/:pull_number/requested_reviewers',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            url: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            html_url: faker.random.words(),
            diff_url: faker.random.words(),
            patch_url: faker.random.words(),
            issue_url: faker.random.words(),
            commits_url: faker.random.words(),
            review_comments_url: faker.random.words(),
            review_comment_url: faker.random.words(),
            comments_url: faker.random.words(),
            statuses_url: faker.random.words(),
            number: faker.datatype.number(),
            state: faker.random.words(),
            locked: faker.datatype.boolean(),
            title: faker.random.words(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            body: faker.random.words(),
            labels: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              url: faker.random.words(),
              name: faker.random.words(),
              description: faker.random.words(),
              color: faker.random.words(),
              default: faker.datatype.boolean(),
            })),
            milestone: {
              url: faker.random.words(),
              html_url: faker.random.words(),
              labels_url: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              number: faker.datatype.number(),
              state: faker.random.arrayElement(['open', 'closed']),
              title: faker.random.words(),
              description: faker.random.words(),
              creator: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              open_issues: faker.datatype.number(),
              closed_issues: faker.datatype.number(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              closed_at: faker.random.words(),
              due_on: faker.random.words(),
            },
            active_lock_reason: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            closed_at: faker.random.words(),
            merged_at: faker.random.words(),
            merge_commit_sha: faker.random.words(),
            assignee: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            assignees: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            })),
            requested_reviewers: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            })),
            requested_teams: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              slug: faker.random.words(),
              description: faker.random.words(),
              privacy: faker.random.words(),
              permission: faker.random.words(),
              permissions: {
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                admin: faker.datatype.boolean(),
              },
              url: faker.random.words(),
              html_url: faker.random.words(),
              members_url: faker.random.words(),
              repositories_url: faker.random.words(),
              parent: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                url: faker.random.words(),
                members_url: faker.random.words(),
                name: faker.random.words(),
                description: faker.random.words(),
                permission: faker.random.words(),
                privacy: faker.random.words(),
                html_url: faker.random.words(),
                repositories_url: faker.random.words(),
                slug: faker.random.words(),
                ldap_dn: faker.random.words(),
              },
            })),
            head: {
              label: faker.random.words(),
              ref: faker.random.words(),
              repo: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                license: {
                  key: faker.random.words(),
                  name: faker.random.words(),
                  url: faker.random.words(),
                  spdx_id: faker.random.words(),
                  node_id: faker.random.words(),
                  html_url: faker.random.words(),
                },
                organization: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                forks: faker.datatype.number(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                },
                owner: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                allow_rebase_merge: faker.datatype.boolean(),
                template_repository: {
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  name: faker.random.words(),
                  full_name: faker.random.words(),
                  owner: {
                    login: faker.random.words(),
                    id: faker.datatype.number(),
                    node_id: faker.random.words(),
                    avatar_url: faker.random.words(),
                    gravatar_id: faker.random.words(),
                    url: faker.random.words(),
                    html_url: faker.random.words(),
                    followers_url: faker.random.words(),
                    following_url: faker.random.words(),
                    gists_url: faker.random.words(),
                    starred_url: faker.random.words(),
                    subscriptions_url: faker.random.words(),
                    organizations_url: faker.random.words(),
                    repos_url: faker.random.words(),
                    events_url: faker.random.words(),
                    received_events_url: faker.random.words(),
                    type: faker.random.words(),
                    site_admin: faker.datatype.boolean(),
                  },
                  private: faker.datatype.boolean(),
                  html_url: faker.random.words(),
                  description: faker.random.words(),
                  fork: faker.datatype.boolean(),
                  url: faker.random.words(),
                  archive_url: faker.random.words(),
                  assignees_url: faker.random.words(),
                  blobs_url: faker.random.words(),
                  branches_url: faker.random.words(),
                  collaborators_url: faker.random.words(),
                  comments_url: faker.random.words(),
                  commits_url: faker.random.words(),
                  compare_url: faker.random.words(),
                  contents_url: faker.random.words(),
                  contributors_url: faker.random.words(),
                  deployments_url: faker.random.words(),
                  downloads_url: faker.random.words(),
                  events_url: faker.random.words(),
                  forks_url: faker.random.words(),
                  git_commits_url: faker.random.words(),
                  git_refs_url: faker.random.words(),
                  git_tags_url: faker.random.words(),
                  git_url: faker.random.words(),
                  issue_comment_url: faker.random.words(),
                  issue_events_url: faker.random.words(),
                  issues_url: faker.random.words(),
                  keys_url: faker.random.words(),
                  labels_url: faker.random.words(),
                  languages_url: faker.random.words(),
                  merges_url: faker.random.words(),
                  milestones_url: faker.random.words(),
                  notifications_url: faker.random.words(),
                  pulls_url: faker.random.words(),
                  releases_url: faker.random.words(),
                  ssh_url: faker.random.words(),
                  stargazers_url: faker.random.words(),
                  statuses_url: faker.random.words(),
                  subscribers_url: faker.random.words(),
                  subscription_url: faker.random.words(),
                  tags_url: faker.random.words(),
                  teams_url: faker.random.words(),
                  trees_url: faker.random.words(),
                  clone_url: faker.random.words(),
                  mirror_url: faker.random.words(),
                  hooks_url: faker.random.words(),
                  svn_url: faker.random.words(),
                  homepage: faker.random.words(),
                  language: faker.random.words(),
                  forks_count: faker.datatype.number(),
                  stargazers_count: faker.datatype.number(),
                  watchers_count: faker.datatype.number(),
                  size: faker.datatype.number(),
                  default_branch: faker.random.words(),
                  open_issues_count: faker.datatype.number(),
                  is_template: faker.datatype.boolean(),
                  topics: [
                    ...new Array(faker.datatype.number({ max: 100 })).keys(),
                  ].map(_ => faker.random.words()),
                  has_issues: faker.datatype.boolean(),
                  has_projects: faker.datatype.boolean(),
                  has_wiki: faker.datatype.boolean(),
                  has_pages: faker.datatype.boolean(),
                  has_downloads: faker.datatype.boolean(),
                  archived: faker.datatype.boolean(),
                  disabled: faker.datatype.boolean(),
                  visibility: faker.random.words(),
                  pushed_at: faker.random.words(),
                  created_at: faker.random.words(),
                  updated_at: faker.random.words(),
                  permissions: {
                    admin: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    pull: faker.datatype.boolean(),
                  },
                  allow_rebase_merge: faker.datatype.boolean(),
                  temp_clone_token: faker.random.words(),
                  allow_squash_merge: faker.datatype.boolean(),
                  allow_auto_merge: faker.datatype.boolean(),
                  delete_branch_on_merge: faker.datatype.boolean(),
                  allow_update_branch: faker.datatype.boolean(),
                  allow_merge_commit: faker.datatype.boolean(),
                  subscribers_count: faker.datatype.number(),
                  network_count: faker.datatype.number(),
                },
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                allow_forking: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
                open_issues: faker.datatype.number(),
                watchers: faker.datatype.number(),
                master_branch: faker.random.words(),
                starred_at: faker.random.words(),
              },
              sha: faker.random.words(),
              user: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
            },
            base: {
              label: faker.random.words(),
              ref: faker.random.words(),
              repo: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                license: {
                  key: faker.random.words(),
                  name: faker.random.words(),
                  url: faker.random.words(),
                  spdx_id: faker.random.words(),
                  node_id: faker.random.words(),
                  html_url: faker.random.words(),
                },
                organization: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                forks: faker.datatype.number(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                },
                owner: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                allow_rebase_merge: faker.datatype.boolean(),
                template_repository: {
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  name: faker.random.words(),
                  full_name: faker.random.words(),
                  owner: {
                    login: faker.random.words(),
                    id: faker.datatype.number(),
                    node_id: faker.random.words(),
                    avatar_url: faker.random.words(),
                    gravatar_id: faker.random.words(),
                    url: faker.random.words(),
                    html_url: faker.random.words(),
                    followers_url: faker.random.words(),
                    following_url: faker.random.words(),
                    gists_url: faker.random.words(),
                    starred_url: faker.random.words(),
                    subscriptions_url: faker.random.words(),
                    organizations_url: faker.random.words(),
                    repos_url: faker.random.words(),
                    events_url: faker.random.words(),
                    received_events_url: faker.random.words(),
                    type: faker.random.words(),
                    site_admin: faker.datatype.boolean(),
                  },
                  private: faker.datatype.boolean(),
                  html_url: faker.random.words(),
                  description: faker.random.words(),
                  fork: faker.datatype.boolean(),
                  url: faker.random.words(),
                  archive_url: faker.random.words(),
                  assignees_url: faker.random.words(),
                  blobs_url: faker.random.words(),
                  branches_url: faker.random.words(),
                  collaborators_url: faker.random.words(),
                  comments_url: faker.random.words(),
                  commits_url: faker.random.words(),
                  compare_url: faker.random.words(),
                  contents_url: faker.random.words(),
                  contributors_url: faker.random.words(),
                  deployments_url: faker.random.words(),
                  downloads_url: faker.random.words(),
                  events_url: faker.random.words(),
                  forks_url: faker.random.words(),
                  git_commits_url: faker.random.words(),
                  git_refs_url: faker.random.words(),
                  git_tags_url: faker.random.words(),
                  git_url: faker.random.words(),
                  issue_comment_url: faker.random.words(),
                  issue_events_url: faker.random.words(),
                  issues_url: faker.random.words(),
                  keys_url: faker.random.words(),
                  labels_url: faker.random.words(),
                  languages_url: faker.random.words(),
                  merges_url: faker.random.words(),
                  milestones_url: faker.random.words(),
                  notifications_url: faker.random.words(),
                  pulls_url: faker.random.words(),
                  releases_url: faker.random.words(),
                  ssh_url: faker.random.words(),
                  stargazers_url: faker.random.words(),
                  statuses_url: faker.random.words(),
                  subscribers_url: faker.random.words(),
                  subscription_url: faker.random.words(),
                  tags_url: faker.random.words(),
                  teams_url: faker.random.words(),
                  trees_url: faker.random.words(),
                  clone_url: faker.random.words(),
                  mirror_url: faker.random.words(),
                  hooks_url: faker.random.words(),
                  svn_url: faker.random.words(),
                  homepage: faker.random.words(),
                  language: faker.random.words(),
                  forks_count: faker.datatype.number(),
                  stargazers_count: faker.datatype.number(),
                  watchers_count: faker.datatype.number(),
                  size: faker.datatype.number(),
                  default_branch: faker.random.words(),
                  open_issues_count: faker.datatype.number(),
                  is_template: faker.datatype.boolean(),
                  topics: [
                    ...new Array(faker.datatype.number({ max: 100 })).keys(),
                  ].map(_ => faker.random.words()),
                  has_issues: faker.datatype.boolean(),
                  has_projects: faker.datatype.boolean(),
                  has_wiki: faker.datatype.boolean(),
                  has_pages: faker.datatype.boolean(),
                  has_downloads: faker.datatype.boolean(),
                  archived: faker.datatype.boolean(),
                  disabled: faker.datatype.boolean(),
                  visibility: faker.random.words(),
                  pushed_at: faker.random.words(),
                  created_at: faker.random.words(),
                  updated_at: faker.random.words(),
                  permissions: {
                    admin: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    pull: faker.datatype.boolean(),
                  },
                  allow_rebase_merge: faker.datatype.boolean(),
                  temp_clone_token: faker.random.words(),
                  allow_squash_merge: faker.datatype.boolean(),
                  allow_auto_merge: faker.datatype.boolean(),
                  delete_branch_on_merge: faker.datatype.boolean(),
                  allow_update_branch: faker.datatype.boolean(),
                  allow_merge_commit: faker.datatype.boolean(),
                  subscribers_count: faker.datatype.number(),
                  network_count: faker.datatype.number(),
                },
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                allow_forking: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
                open_issues: faker.datatype.number(),
                watchers: faker.datatype.number(),
                master_branch: faker.random.words(),
                starred_at: faker.random.words(),
              },
              sha: faker.random.words(),
              user: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
            },
            _links: {
              comments: {
                href: faker.random.words(),
              },
              commits: {
                href: faker.random.words(),
              },
              statuses: {
                href: faker.random.words(),
              },
              html: {
                href: faker.random.words(),
              },
              issue: {
                href: faker.random.words(),
              },
              review_comments: {
                href: faker.random.words(),
              },
              review_comment: {
                href: faker.random.words(),
              },
              self: {
                href: faker.random.words(),
              },
            },
            author_association: faker.random.arrayElement([
              'COLLABORATOR',
              'CONTRIBUTOR',
              'FIRST_TIMER',
              'FIRST_TIME_CONTRIBUTOR',
              'MANNEQUIN',
              'MEMBER',
              'NONE',
              'OWNER',
            ]),
            auto_merge: {
              enabled_by: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              merge_method: faker.random.arrayElement([
                'merge',
                'squash',
                'rebase',
              ]),
              commit_title: faker.random.words(),
              commit_message: faker.random.words(),
            },
            draft: faker.datatype.boolean(),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            errors: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              resource: faker.random.words(),
              field: faker.random.words(),
              message: faker.random.words(),
              code: faker.random.words(),
              index: faker.datatype.number(),
              value: {},
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/repos/:owner/:repo/pulls/:pull_number/reviews',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json(
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
              _ => ({
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                user: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                body: faker.random.words(),
                state: faker.random.words(),
                html_url: faker.random.words(),
                pull_request_url: faker.random.words(),
                _links: {
                  html: {
                    href: faker.random.words(),
                  },
                  pull_request: {
                    href: faker.random.words(),
                  },
                },
                submitted_at: faker.random.words(),
                commit_id: faker.random.words(),
                body_html: faker.random.words(),
                body_text: faker.random.words(),
                author_association: faker.random.arrayElement([
                  'COLLABORATOR',
                  'CONTRIBUTOR',
                  'FIRST_TIMER',
                  'FIRST_TIME_CONTRIBUTOR',
                  'MANNEQUIN',
                  'MEMBER',
                  'NONE',
                  'OWNER',
                ]),
              })
            )
          ),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.post(
    '/repos/:owner/:repo/pulls/:pull_number/reviews',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            body: faker.random.words(),
            state: faker.random.words(),
            html_url: faker.random.words(),
            pull_request_url: faker.random.words(),
            _links: {
              html: {
                href: faker.random.words(),
              },
              pull_request: {
                href: faker.random.words(),
              },
            },
            submitted_at: faker.random.words(),
            commit_id: faker.random.words(),
            body_html: faker.random.words(),
            body_text: faker.random.words(),
            author_association: faker.random.arrayElement([
              'COLLABORATOR',
              'CONTRIBUTOR',
              'FIRST_TIMER',
              'FIRST_TIME_CONTRIBUTOR',
              'MANNEQUIN',
              'MEMBER',
              'NONE',
              'OWNER',
            ]),
          }),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            errors: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/repos/:owner/:repo/pulls/:pull_number/reviews/:review_id',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            body: faker.random.words(),
            state: faker.random.words(),
            html_url: faker.random.words(),
            pull_request_url: faker.random.words(),
            _links: {
              html: {
                href: faker.random.words(),
              },
              pull_request: {
                href: faker.random.words(),
              },
            },
            submitted_at: faker.random.words(),
            commit_id: faker.random.words(),
            body_html: faker.random.words(),
            body_text: faker.random.words(),
            author_association: faker.random.arrayElement([
              'COLLABORATOR',
              'CONTRIBUTOR',
              'FIRST_TIMER',
              'FIRST_TIME_CONTRIBUTOR',
              'MANNEQUIN',
              'MEMBER',
              'NONE',
              'OWNER',
            ]),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.put(
    '/repos/:owner/:repo/pulls/:pull_number/reviews/:review_id',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            body: faker.random.words(),
            state: faker.random.words(),
            html_url: faker.random.words(),
            pull_request_url: faker.random.words(),
            _links: {
              html: {
                href: faker.random.words(),
              },
              pull_request: {
                href: faker.random.words(),
              },
            },
            submitted_at: faker.random.words(),
            commit_id: faker.random.words(),
            body_html: faker.random.words(),
            body_text: faker.random.words(),
            author_association: faker.random.arrayElement([
              'COLLABORATOR',
              'CONTRIBUTOR',
              'FIRST_TIMER',
              'FIRST_TIME_CONTRIBUTOR',
              'MANNEQUIN',
              'MEMBER',
              'NONE',
              'OWNER',
            ]),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            errors: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/repos/:owner/:repo/pulls/:pull_number/reviews/:review_id',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            body: faker.random.words(),
            state: faker.random.words(),
            html_url: faker.random.words(),
            pull_request_url: faker.random.words(),
            _links: {
              html: {
                href: faker.random.words(),
              },
              pull_request: {
                href: faker.random.words(),
              },
            },
            submitted_at: faker.random.words(),
            commit_id: faker.random.words(),
            body_html: faker.random.words(),
            body_text: faker.random.words(),
            author_association: faker.random.arrayElement([
              'COLLABORATOR',
              'CONTRIBUTOR',
              'FIRST_TIMER',
              'FIRST_TIME_CONTRIBUTOR',
              'MANNEQUIN',
              'MEMBER',
              'NONE',
              'OWNER',
            ]),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            errors: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/repos/:owner/:repo/pulls/:pull_number/reviews/:review_id/comments',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json(
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
              _ => ({
                url: faker.random.words(),
                pull_request_review_id: faker.datatype.number(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                diff_hunk: faker.random.words(),
                path: faker.random.words(),
                position: faker.datatype.number(),
                original_position: faker.datatype.number(),
                commit_id: faker.random.words(),
                original_commit_id: faker.random.words(),
                in_reply_to_id: faker.datatype.number(),
                user: {},
                body: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                html_url: faker.random.words(),
                pull_request_url: faker.random.words(),
                author_association: {},
                _links: {
                  self: {},
                  html: {},
                  pull_request: {},
                },
                body_text: faker.random.words(),
                body_html: faker.random.words(),
                reactions: {},
                side: faker.random.arrayElement(['LEFT', 'RIGHT']),
                start_side: faker.random.arrayElement(['LEFT', 'RIGHT']),
                line: faker.datatype.number(),
                original_line: faker.datatype.number(),
                start_line: faker.datatype.number(),
                original_start_line: faker.datatype.number(),
              })
            )
          ),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.put(
    '/repos/:owner/:repo/pulls/:pull_number/reviews/:review_id/dismissals',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            body: faker.random.words(),
            state: faker.random.words(),
            html_url: faker.random.words(),
            pull_request_url: faker.random.words(),
            _links: {
              html: {
                href: faker.random.words(),
              },
              pull_request: {
                href: faker.random.words(),
              },
            },
            submitted_at: faker.random.words(),
            commit_id: faker.random.words(),
            body_html: faker.random.words(),
            body_text: faker.random.words(),
            author_association: faker.random.arrayElement([
              'COLLABORATOR',
              'CONTRIBUTOR',
              'FIRST_TIMER',
              'FIRST_TIME_CONTRIBUTOR',
              'MANNEQUIN',
              'MEMBER',
              'NONE',
              'OWNER',
            ]),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            errors: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.post(
    '/repos/:owner/:repo/pulls/:pull_number/reviews/:review_id/events',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            body: faker.random.words(),
            state: faker.random.words(),
            html_url: faker.random.words(),
            pull_request_url: faker.random.words(),
            _links: {
              html: {
                href: faker.random.words(),
              },
              pull_request: {
                href: faker.random.words(),
              },
            },
            submitted_at: faker.random.words(),
            commit_id: faker.random.words(),
            body_html: faker.random.words(),
            body_text: faker.random.words(),
            author_association: faker.random.arrayElement([
              'COLLABORATOR',
              'CONTRIBUTOR',
              'FIRST_TIMER',
              'FIRST_TIME_CONTRIBUTOR',
              'MANNEQUIN',
              'MEMBER',
              'NONE',
              'OWNER',
            ]),
          }),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            errors: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.put(
    '/repos/:owner/:repo/pulls/:pull_number/update-branch',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(202),
          ctx.json({
            message: faker.random.words(),
            url: faker.random.words(),
          }),
        ],
        [
          ctx.status(403),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            errors: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              resource: faker.random.words(),
              field: faker.random.words(),
              message: faker.random.words(),
              code: faker.random.words(),
              index: faker.datatype.number(),
              value: {},
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get('/repos/:owner/:repo/readme', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          type: faker.random.words(),
          encoding: faker.random.words(),
          size: faker.datatype.number(),
          name: faker.random.words(),
          path: faker.random.words(),
          content: faker.random.words(),
          sha: faker.random.words(),
          url: faker.random.words(),
          git_url: faker.random.words(),
          html_url: faker.random.words(),
          download_url: faker.random.words(),
          _links: {
            git: faker.random.words(),
            html: faker.random.words(),
            self: faker.random.words(),
          },
          target: faker.random.words(),
          submodule_git_url: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/readme/:dir', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          type: faker.random.words(),
          encoding: faker.random.words(),
          size: faker.datatype.number(),
          name: faker.random.words(),
          path: faker.random.words(),
          content: faker.random.words(),
          sha: faker.random.words(),
          url: faker.random.words(),
          git_url: faker.random.words(),
          html_url: faker.random.words(),
          download_url: faker.random.words(),
          _links: {
            git: faker.random.words(),
            html: faker.random.words(),
            self: faker.random.words(),
          },
          target: faker.random.words(),
          submodule_git_url: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/releases', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            url: faker.random.words(),
            html_url: faker.random.words(),
            assets_url: faker.random.words(),
            upload_url: faker.random.words(),
            tarball_url: faker.random.words(),
            zipball_url: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            tag_name: faker.random.words(),
            target_commitish: faker.random.words(),
            name: faker.random.words(),
            body: faker.random.words(),
            draft: faker.datatype.boolean(),
            prerelease: faker.datatype.boolean(),
            created_at: faker.random.words(),
            published_at: faker.random.words(),
            author: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            assets: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              url: faker.random.words(),
              browser_download_url: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              label: faker.random.words(),
              state: faker.random.arrayElement(['uploaded', 'open']),
              content_type: faker.random.words(),
              size: faker.datatype.number(),
              download_count: faker.datatype.number(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              uploader: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
            })),
            body_html: faker.random.words(),
            body_text: faker.random.words(),
            mentions_count: faker.datatype.number(),
            reactions: {
              url: faker.random.words(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }))
        ),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/repos/:owner/:repo/releases', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json({
          url: faker.random.words(),
          html_url: faker.random.words(),
          assets_url: faker.random.words(),
          upload_url: faker.random.words(),
          tarball_url: faker.random.words(),
          zipball_url: faker.random.words(),
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          tag_name: faker.random.words(),
          target_commitish: faker.random.words(),
          name: faker.random.words(),
          body: faker.random.words(),
          draft: faker.datatype.boolean(),
          prerelease: faker.datatype.boolean(),
          created_at: faker.random.words(),
          published_at: faker.random.words(),
          author: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          assets: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            url: faker.random.words(),
            browser_download_url: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            label: faker.random.words(),
            state: faker.random.arrayElement(['uploaded', 'open']),
            content_type: faker.random.words(),
            size: faker.datatype.number(),
            download_count: faker.datatype.number(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            uploader: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
          })),
          body_html: faker.random.words(),
          body_text: faker.random.words(),
          mentions_count: faker.datatype.number(),
          reactions: {
            url: faker.random.words(),
            total_count: faker.datatype.number(),
            '+1': faker.datatype.number(),
            '-1': faker.datatype.number(),
            laugh: faker.datatype.number(),
            confused: faker.datatype.number(),
            heart: faker.datatype.number(),
            hooray: faker.datatype.number(),
            eyes: faker.datatype.number(),
            rocket: faker.datatype.number(),
          },
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/releases/assets/:asset_id', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          url: faker.random.words(),
          browser_download_url: faker.random.words(),
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          name: faker.random.words(),
          label: faker.random.words(),
          state: faker.random.arrayElement(['uploaded', 'open']),
          content_type: faker.random.words(),
          size: faker.datatype.number(),
          download_count: faker.datatype.number(),
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          uploader: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
        }),
      ],
      [ctx.status(302), ctx.json({})],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(415),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.patch(
    '/repos/:owner/:repo/releases/assets/:asset_id',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            url: faker.random.words(),
            browser_download_url: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            label: faker.random.words(),
            state: faker.random.arrayElement(['uploaded', 'open']),
            content_type: faker.random.words(),
            size: faker.datatype.number(),
            download_count: faker.datatype.number(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            uploader: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/repos/:owner/:repo/releases/assets/:asset_id',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.post('/repos/:owner/:repo/releases/generate-notes', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          name: faker.random.words(),
          body: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/releases/latest', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          url: faker.random.words(),
          html_url: faker.random.words(),
          assets_url: faker.random.words(),
          upload_url: faker.random.words(),
          tarball_url: faker.random.words(),
          zipball_url: faker.random.words(),
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          tag_name: faker.random.words(),
          target_commitish: faker.random.words(),
          name: faker.random.words(),
          body: faker.random.words(),
          draft: faker.datatype.boolean(),
          prerelease: faker.datatype.boolean(),
          created_at: faker.random.words(),
          published_at: faker.random.words(),
          author: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          assets: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            url: faker.random.words(),
            browser_download_url: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            label: faker.random.words(),
            state: faker.random.arrayElement(['uploaded', 'open']),
            content_type: faker.random.words(),
            size: faker.datatype.number(),
            download_count: faker.datatype.number(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            uploader: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
          })),
          body_html: faker.random.words(),
          body_text: faker.random.words(),
          mentions_count: faker.datatype.number(),
          reactions: {
            url: faker.random.words(),
            total_count: faker.datatype.number(),
            '+1': faker.datatype.number(),
            '-1': faker.datatype.number(),
            laugh: faker.datatype.number(),
            confused: faker.datatype.number(),
            heart: faker.datatype.number(),
            hooray: faker.datatype.number(),
            eyes: faker.datatype.number(),
            rocket: faker.datatype.number(),
          },
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/releases/tags/:tag', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          url: faker.random.words(),
          html_url: faker.random.words(),
          assets_url: faker.random.words(),
          upload_url: faker.random.words(),
          tarball_url: faker.random.words(),
          zipball_url: faker.random.words(),
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          tag_name: faker.random.words(),
          target_commitish: faker.random.words(),
          name: faker.random.words(),
          body: faker.random.words(),
          draft: faker.datatype.boolean(),
          prerelease: faker.datatype.boolean(),
          created_at: faker.random.words(),
          published_at: faker.random.words(),
          author: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          assets: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            url: faker.random.words(),
            browser_download_url: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            label: faker.random.words(),
            state: faker.random.arrayElement(['uploaded', 'open']),
            content_type: faker.random.words(),
            size: faker.datatype.number(),
            download_count: faker.datatype.number(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            uploader: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
          })),
          body_html: faker.random.words(),
          body_text: faker.random.words(),
          mentions_count: faker.datatype.number(),
          reactions: {
            url: faker.random.words(),
            total_count: faker.datatype.number(),
            '+1': faker.datatype.number(),
            '-1': faker.datatype.number(),
            laugh: faker.datatype.number(),
            confused: faker.datatype.number(),
            heart: faker.datatype.number(),
            hooray: faker.datatype.number(),
            eyes: faker.datatype.number(),
            rocket: faker.datatype.number(),
          },
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/releases/:release_id', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          url: faker.random.words(),
          html_url: faker.random.words(),
          assets_url: faker.random.words(),
          upload_url: faker.random.words(),
          tarball_url: faker.random.words(),
          zipball_url: faker.random.words(),
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          tag_name: faker.random.words(),
          target_commitish: faker.random.words(),
          name: faker.random.words(),
          body: faker.random.words(),
          draft: faker.datatype.boolean(),
          prerelease: faker.datatype.boolean(),
          created_at: faker.random.words(),
          published_at: faker.random.words(),
          author: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          assets: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            url: faker.random.words(),
            browser_download_url: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            label: faker.random.words(),
            state: faker.random.arrayElement(['uploaded', 'open']),
            content_type: faker.random.words(),
            size: faker.datatype.number(),
            download_count: faker.datatype.number(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            uploader: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
          })),
          body_html: faker.random.words(),
          body_text: faker.random.words(),
          mentions_count: faker.datatype.number(),
          reactions: {
            url: faker.random.words(),
            total_count: faker.datatype.number(),
            '+1': faker.datatype.number(),
            '-1': faker.datatype.number(),
            laugh: faker.datatype.number(),
            confused: faker.datatype.number(),
            heart: faker.datatype.number(),
            hooray: faker.datatype.number(),
            eyes: faker.datatype.number(),
            rocket: faker.datatype.number(),
          },
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.patch('/repos/:owner/:repo/releases/:release_id', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          url: faker.random.words(),
          html_url: faker.random.words(),
          assets_url: faker.random.words(),
          upload_url: faker.random.words(),
          tarball_url: faker.random.words(),
          zipball_url: faker.random.words(),
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          tag_name: faker.random.words(),
          target_commitish: faker.random.words(),
          name: faker.random.words(),
          body: faker.random.words(),
          draft: faker.datatype.boolean(),
          prerelease: faker.datatype.boolean(),
          created_at: faker.random.words(),
          published_at: faker.random.words(),
          author: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          assets: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            url: faker.random.words(),
            browser_download_url: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            label: faker.random.words(),
            state: faker.random.arrayElement(['uploaded', 'open']),
            content_type: faker.random.words(),
            size: faker.datatype.number(),
            download_count: faker.datatype.number(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            uploader: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
          })),
          body_html: faker.random.words(),
          body_text: faker.random.words(),
          mentions_count: faker.datatype.number(),
          reactions: {
            url: faker.random.words(),
            total_count: faker.datatype.number(),
            '+1': faker.datatype.number(),
            '-1': faker.datatype.number(),
            laugh: faker.datatype.number(),
            confused: faker.datatype.number(),
            heart: faker.datatype.number(),
            hooray: faker.datatype.number(),
            eyes: faker.datatype.number(),
            rocket: faker.datatype.number(),
          },
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/repos/:owner/:repo/releases/:release_id', (req, res, ctx) => {
    const resultArrray = [[ctx.status(204), ctx.json({})]];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get(
    '/repos/:owner/:repo/releases/:release_id/assets',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json(
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
              _ => ({
                url: faker.random.words(),
                browser_download_url: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                label: faker.random.words(),
                state: faker.random.arrayElement(['uploaded', 'open']),
                content_type: faker.random.words(),
                size: faker.datatype.number(),
                download_count: faker.datatype.number(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                uploader: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
              })
            )
          ),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.post(
    '/repos/:owner/:repo/releases/:release_id/assets',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(201),
          ctx.json({
            url: faker.random.words(),
            browser_download_url: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            label: faker.random.words(),
            state: faker.random.arrayElement(['uploaded', 'open']),
            content_type: faker.random.words(),
            size: faker.datatype.number(),
            download_count: faker.datatype.number(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            uploader: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
          }),
        ],
        [ctx.status(422), ctx.json({})],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.post(
    '/repos/:owner/:repo/releases/:release_id/reactions',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            content: faker.random.arrayElement([
              '+1',
              '-1',
              'laugh',
              'confused',
              'heart',
              'hooray',
              'rocket',
              'eyes',
            ]),
            created_at: faker.random.words(),
          }),
        ],
        [
          ctx.status(201),
          ctx.json({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            content: faker.random.arrayElement([
              '+1',
              '-1',
              'laugh',
              'confused',
              'heart',
              'hooray',
              'rocket',
              'eyes',
            ]),
            created_at: faker.random.words(),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            errors: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              resource: faker.random.words(),
              field: faker.random.words(),
              message: faker.random.words(),
              code: faker.random.words(),
              index: faker.datatype.number(),
              value: {},
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get('/repos/:owner/:repo/secret-scanning/alerts', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            number: faker.datatype.number(),
            created_at: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            locations_url: faker.random.words(),
            state: faker.random.arrayElement(['open', 'resolved']),
            resolution: faker.random.arrayElement([
              null,
              'false_positive',
              'wont_fix',
              'revoked',
              'used_in_tests',
            ]),
            resolved_at: faker.random.words(),
            resolved_by: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            secret_type: faker.random.words(),
            secret: faker.random.words(),
          }))
        ),
      ],
      [ctx.status(404), ctx.json({})],
      [
        ctx.status(503),
        ctx.json({
          code: faker.random.words(),
          message: faker.random.words(),
          documentation_url: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get(
    '/repos/:owner/:repo/secret-scanning/alerts/:alert_number',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            number: faker.datatype.number(),
            created_at: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            locations_url: faker.random.words(),
            state: faker.random.arrayElement(['open', 'resolved']),
            resolution: faker.random.arrayElement([
              null,
              'false_positive',
              'wont_fix',
              'revoked',
              'used_in_tests',
            ]),
            resolved_at: faker.random.words(),
            resolved_by: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            secret_type: faker.random.words(),
            secret: faker.random.words(),
          }),
        ],
        [ctx.status(304), ctx.json({})],
        [ctx.status(404), ctx.json({})],
        [
          ctx.status(503),
          ctx.json({
            code: faker.random.words(),
            message: faker.random.words(),
            documentation_url: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.patch(
    '/repos/:owner/:repo/secret-scanning/alerts/:alert_number',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            number: faker.datatype.number(),
            created_at: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            locations_url: faker.random.words(),
            state: faker.random.arrayElement(['open', 'resolved']),
            resolution: faker.random.arrayElement([
              null,
              'false_positive',
              'wont_fix',
              'revoked',
              'used_in_tests',
            ]),
            resolved_at: faker.random.words(),
            resolved_by: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            secret_type: faker.random.words(),
            secret: faker.random.words(),
          }),
        ],
        [ctx.status(404), ctx.json({})],
        [ctx.status(422), ctx.json({})],
        [
          ctx.status(503),
          ctx.json({
            code: faker.random.words(),
            message: faker.random.words(),
            documentation_url: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/repos/:owner/:repo/secret-scanning/alerts/:alert_number/locations',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json(
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
              _ => ({
                type: faker.random.arrayElement(['commit']),
                details: {},
              })
            )
          ),
        ],
        [ctx.status(404), ctx.json({})],
        [
          ctx.status(503),
          ctx.json({
            code: faker.random.words(),
            message: faker.random.words(),
            documentation_url: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get('/repos/:owner/:repo/stargazers', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(200), ctx.json({})],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/stats/code_frequency', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ =>
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ =>
              faker.datatype.number()
            )
          )
        ),
      ],
      [ctx.status(202), ctx.json({})],
      [ctx.status(204), ctx.json({})],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/stats/commit_activity', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            days: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.datatype.number()),
            total: faker.datatype.number(),
            week: faker.datatype.number(),
          }))
        ),
      ],
      [ctx.status(202), ctx.json({})],
      [ctx.status(204), ctx.json({})],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/stats/contributors', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            author: {},
            total: faker.datatype.number(),
            weeks: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              w: faker.datatype.number(),
              a: faker.datatype.number(),
              d: faker.datatype.number(),
              c: faker.datatype.number(),
            })),
          }))
        ),
      ],
      [ctx.status(202), ctx.json({})],
      [ctx.status(204), ctx.json({})],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/stats/participation', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          all: [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
            _ => faker.datatype.number()
          ),
          owner: [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
            _ => faker.datatype.number()
          ),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/stats/punch_card', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ =>
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ =>
              faker.datatype.number()
            )
          )
        ),
      ],
      [ctx.status(204), ctx.json({})],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/repos/:owner/:repo/statuses/:sha', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json({
          url: faker.random.words(),
          avatar_url: faker.random.words(),
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          state: faker.random.words(),
          description: faker.random.words(),
          target_url: faker.random.words(),
          context: faker.random.words(),
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          creator: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/subscribers', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/subscription', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          subscribed: faker.datatype.boolean(),
          ignored: faker.datatype.boolean(),
          reason: faker.random.words(),
          created_at: faker.random.words(),
          url: faker.random.words(),
          repository_url: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [ctx.status(404), ctx.json({})],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.put('/repos/:owner/:repo/subscription', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          subscribed: faker.datatype.boolean(),
          ignored: faker.datatype.boolean(),
          reason: faker.random.words(),
          created_at: faker.random.words(),
          url: faker.random.words(),
          repository_url: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/repos/:owner/:repo/subscription', (req, res, ctx) => {
    const resultArrray = [[ctx.status(204), ctx.json({})]];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/tags', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            name: faker.random.words(),
            commit: {
              sha: faker.random.words(),
              url: faker.random.words(),
            },
            zipball_url: faker.random.words(),
            tarball_url: faker.random.words(),
            node_id: faker.random.words(),
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/tarball/:ref', (req, res, ctx) => {
    const resultArrray = [[ctx.status(302), ctx.json({})]];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/teams', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            slug: faker.random.words(),
            description: faker.random.words(),
            privacy: faker.random.words(),
            permission: faker.random.words(),
            permissions: {
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              admin: faker.datatype.boolean(),
            },
            url: faker.random.words(),
            html_url: faker.random.words(),
            members_url: faker.random.words(),
            repositories_url: faker.random.words(),
            parent: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              url: faker.random.words(),
              members_url: faker.random.words(),
              name: faker.random.words(),
              description: faker.random.words(),
              permission: faker.random.words(),
              privacy: faker.random.words(),
              html_url: faker.random.words(),
              repositories_url: faker.random.words(),
              slug: faker.random.words(),
              ldap_dn: faker.random.words(),
            },
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/topics', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          names: [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
            _ => faker.random.words()
          ),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.put('/repos/:owner/:repo/topics', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          names: [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
            _ => faker.random.words()
          ),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/repos/:owner/:repo/transfer', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(202),
        ctx.json({
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          name: faker.random.words(),
          full_name: faker.random.words(),
          owner: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.random.words(),
          description: faker.random.words(),
          fork: faker.datatype.boolean(),
          url: faker.random.words(),
          archive_url: faker.random.words(),
          assignees_url: faker.random.words(),
          blobs_url: faker.random.words(),
          branches_url: faker.random.words(),
          collaborators_url: faker.random.words(),
          comments_url: faker.random.words(),
          commits_url: faker.random.words(),
          compare_url: faker.random.words(),
          contents_url: faker.random.words(),
          contributors_url: faker.random.words(),
          deployments_url: faker.random.words(),
          downloads_url: faker.random.words(),
          events_url: faker.random.words(),
          forks_url: faker.random.words(),
          git_commits_url: faker.random.words(),
          git_refs_url: faker.random.words(),
          git_tags_url: faker.random.words(),
          git_url: faker.random.words(),
          issue_comment_url: faker.random.words(),
          issue_events_url: faker.random.words(),
          issues_url: faker.random.words(),
          keys_url: faker.random.words(),
          labels_url: faker.random.words(),
          languages_url: faker.random.words(),
          merges_url: faker.random.words(),
          milestones_url: faker.random.words(),
          notifications_url: faker.random.words(),
          pulls_url: faker.random.words(),
          releases_url: faker.random.words(),
          ssh_url: faker.random.words(),
          stargazers_url: faker.random.words(),
          statuses_url: faker.random.words(),
          subscribers_url: faker.random.words(),
          subscription_url: faker.random.words(),
          tags_url: faker.random.words(),
          teams_url: faker.random.words(),
          trees_url: faker.random.words(),
          clone_url: faker.random.words(),
          mirror_url: faker.random.words(),
          hooks_url: faker.random.words(),
          svn_url: faker.random.words(),
          homepage: faker.random.words(),
          language: faker.random.words(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.random.words(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.random.words(),
          pushed_at: faker.random.words(),
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          permissions: {
            admin: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
          },
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            full_name: faker.random.words(),
            license: {
              key: faker.random.words(),
              name: faker.random.words(),
              url: faker.random.words(),
              spdx_id: faker.random.words(),
              node_id: faker.random.words(),
              html_url: faker.random.words(),
            },
            organization: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.random.words(),
            description: faker.random.words(),
            fork: faker.datatype.boolean(),
            url: faker.random.words(),
            archive_url: faker.random.words(),
            assignees_url: faker.random.words(),
            blobs_url: faker.random.words(),
            branches_url: faker.random.words(),
            collaborators_url: faker.random.words(),
            comments_url: faker.random.words(),
            commits_url: faker.random.words(),
            compare_url: faker.random.words(),
            contents_url: faker.random.words(),
            contributors_url: faker.random.words(),
            deployments_url: faker.random.words(),
            downloads_url: faker.random.words(),
            events_url: faker.random.words(),
            forks_url: faker.random.words(),
            git_commits_url: faker.random.words(),
            git_refs_url: faker.random.words(),
            git_tags_url: faker.random.words(),
            git_url: faker.random.words(),
            issue_comment_url: faker.random.words(),
            issue_events_url: faker.random.words(),
            issues_url: faker.random.words(),
            keys_url: faker.random.words(),
            labels_url: faker.random.words(),
            languages_url: faker.random.words(),
            merges_url: faker.random.words(),
            milestones_url: faker.random.words(),
            notifications_url: faker.random.words(),
            pulls_url: faker.random.words(),
            releases_url: faker.random.words(),
            ssh_url: faker.random.words(),
            stargazers_url: faker.random.words(),
            statuses_url: faker.random.words(),
            subscribers_url: faker.random.words(),
            subscription_url: faker.random.words(),
            tags_url: faker.random.words(),
            teams_url: faker.random.words(),
            trees_url: faker.random.words(),
            clone_url: faker.random.words(),
            mirror_url: faker.random.words(),
            hooks_url: faker.random.words(),
            svn_url: faker.random.words(),
            homepage: faker.random.words(),
            language: faker.random.words(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.random.words(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.random.words(),
            pushed_at: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            allow_rebase_merge: faker.datatype.boolean(),
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              owner: {
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.random.words(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.random.words(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.random.words(),
            starred_at: faker.random.words(),
          },
          temp_clone_token: faker.random.words(),
          delete_branch_on_merge: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          code_of_conduct: {
            key: faker.random.words(),
            name: faker.random.words(),
            url: faker.random.words(),
            body: faker.random.words(),
            html_url: faker.random.words(),
          },
          license: {
            key: faker.random.words(),
            name: faker.random.words(),
            spdx_id: faker.random.words(),
            url: faker.random.words(),
            node_id: faker.random.words(),
          },
          forks: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          allow_forking: faker.datatype.boolean(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/repos/:owner/:repo/zipball/:ref', (req, res, ctx) => {
    const resultArrray = [[ctx.status(302), ctx.json({})]];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post(
    '/repos/:template_owner/:template_repo/generate',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(201),
          ctx.json({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            full_name: faker.random.words(),
            license: {
              key: faker.random.words(),
              name: faker.random.words(),
              url: faker.random.words(),
              spdx_id: faker.random.words(),
              node_id: faker.random.words(),
              html_url: faker.random.words(),
            },
            organization: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.random.words(),
            description: faker.random.words(),
            fork: faker.datatype.boolean(),
            url: faker.random.words(),
            archive_url: faker.random.words(),
            assignees_url: faker.random.words(),
            blobs_url: faker.random.words(),
            branches_url: faker.random.words(),
            collaborators_url: faker.random.words(),
            comments_url: faker.random.words(),
            commits_url: faker.random.words(),
            compare_url: faker.random.words(),
            contents_url: faker.random.words(),
            contributors_url: faker.random.words(),
            deployments_url: faker.random.words(),
            downloads_url: faker.random.words(),
            events_url: faker.random.words(),
            forks_url: faker.random.words(),
            git_commits_url: faker.random.words(),
            git_refs_url: faker.random.words(),
            git_tags_url: faker.random.words(),
            git_url: faker.random.words(),
            issue_comment_url: faker.random.words(),
            issue_events_url: faker.random.words(),
            issues_url: faker.random.words(),
            keys_url: faker.random.words(),
            labels_url: faker.random.words(),
            languages_url: faker.random.words(),
            merges_url: faker.random.words(),
            milestones_url: faker.random.words(),
            notifications_url: faker.random.words(),
            pulls_url: faker.random.words(),
            releases_url: faker.random.words(),
            ssh_url: faker.random.words(),
            stargazers_url: faker.random.words(),
            statuses_url: faker.random.words(),
            subscribers_url: faker.random.words(),
            subscription_url: faker.random.words(),
            tags_url: faker.random.words(),
            teams_url: faker.random.words(),
            trees_url: faker.random.words(),
            clone_url: faker.random.words(),
            mirror_url: faker.random.words(),
            hooks_url: faker.random.words(),
            svn_url: faker.random.words(),
            homepage: faker.random.words(),
            language: faker.random.words(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.random.words(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.random.words(),
            pushed_at: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            allow_rebase_merge: faker.datatype.boolean(),
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              owner: {
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.random.words(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.random.words(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.random.words(),
            starred_at: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get('/repositories', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            full_name: faker.random.words(),
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.random.words(),
            description: faker.random.words(),
            fork: faker.datatype.boolean(),
            url: faker.random.words(),
            archive_url: faker.random.words(),
            assignees_url: faker.random.words(),
            blobs_url: faker.random.words(),
            branches_url: faker.random.words(),
            collaborators_url: faker.random.words(),
            comments_url: faker.random.words(),
            commits_url: faker.random.words(),
            compare_url: faker.random.words(),
            contents_url: faker.random.words(),
            contributors_url: faker.random.words(),
            deployments_url: faker.random.words(),
            downloads_url: faker.random.words(),
            events_url: faker.random.words(),
            forks_url: faker.random.words(),
            git_commits_url: faker.random.words(),
            git_refs_url: faker.random.words(),
            git_tags_url: faker.random.words(),
            git_url: faker.random.words(),
            issue_comment_url: faker.random.words(),
            issue_events_url: faker.random.words(),
            issues_url: faker.random.words(),
            keys_url: faker.random.words(),
            labels_url: faker.random.words(),
            languages_url: faker.random.words(),
            merges_url: faker.random.words(),
            milestones_url: faker.random.words(),
            notifications_url: faker.random.words(),
            pulls_url: faker.random.words(),
            releases_url: faker.random.words(),
            ssh_url: faker.random.words(),
            stargazers_url: faker.random.words(),
            statuses_url: faker.random.words(),
            subscribers_url: faker.random.words(),
            subscription_url: faker.random.words(),
            tags_url: faker.random.words(),
            teams_url: faker.random.words(),
            trees_url: faker.random.words(),
            clone_url: faker.random.words(),
            mirror_url: faker.random.words(),
            hooks_url: faker.random.words(),
            svn_url: faker.random.words(),
            homepage: faker.random.words(),
            language: faker.random.words(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.random.words(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.random.words(),
            pushed_at: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              license: {
                key: faker.random.words(),
                name: faker.random.words(),
                url: faker.random.words(),
                spdx_id: faker.random.words(),
                node_id: faker.random.words(),
                html_url: faker.random.words(),
              },
              organization: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              allow_rebase_merge: faker.datatype.boolean(),
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                owner: {
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.random.words(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.random.words(),
              starred_at: faker.random.words(),
            },
            temp_clone_token: faker.random.words(),
            delete_branch_on_merge: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            code_of_conduct: {
              key: faker.random.words(),
              name: faker.random.words(),
              url: faker.random.words(),
              body: faker.random.words(),
              html_url: faker.random.words(),
            },
            license: {
              key: faker.random.words(),
              name: faker.random.words(),
              spdx_id: faker.random.words(),
              url: faker.random.words(),
              node_id: faker.random.words(),
            },
            forks: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            allow_forking: faker.datatype.boolean(),
          }))
        ),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get(
    '/repositories/:repository_id/environments/:environment_name/secrets',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            total_count: faker.datatype.number(),
            secrets: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              name: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/repositories/:repository_id/environments/:environment_name/secrets/public-key',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            key_id: faker.random.words(),
            key: faker.random.words(),
            id: faker.datatype.number(),
            url: faker.random.words(),
            title: faker.random.words(),
            created_at: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/repositories/:repository_id/environments/:environment_name/secrets/:secret_name',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            name: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.put(
    '/repositories/:repository_id/environments/:environment_name/secrets/:secret_name',
    (req, res, ctx) => {
      const resultArrray = [
        [ctx.status(201), ctx.json({})],
        [ctx.status(204), ctx.json({})],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/repositories/:repository_id/environments/:environment_name/secrets/:secret_name',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get('/search/code', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          total_count: faker.datatype.number(),
          incomplete_results: faker.datatype.boolean(),
          items: [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
            _ => ({
              name: faker.random.words(),
              path: faker.random.words(),
              sha: faker.random.words(),
              url: faker.random.words(),
              git_url: faker.random.words(),
              html_url: faker.random.words(),
              repository: {},
              score: faker.datatype.number(),
              file_size: faker.datatype.number(),
              language: faker.random.words(),
              last_modified_at: faker.random.words(),
              line_numbers: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              text_matches: {},
            })
          ),
        }),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
      [
        ctx.status(503),
        ctx.json({
          code: faker.random.words(),
          message: faker.random.words(),
          documentation_url: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/search/commits', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          total_count: faker.datatype.number(),
          incomplete_results: faker.datatype.boolean(),
          items: [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
            _ => ({
              url: faker.random.words(),
              sha: faker.random.words(),
              html_url: faker.random.words(),
              comments_url: faker.random.words(),
              commit: {
                author: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  date: faker.random.words(),
                },
                committer: {},
                comment_count: faker.datatype.number(),
                message: faker.random.words(),
                tree: {
                  sha: faker.random.words(),
                  url: faker.random.words(),
                },
                url: faker.random.words(),
                verification: {},
              },
              author: {},
              committer: {},
              parents: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => ({
                url: faker.random.words(),
                html_url: faker.random.words(),
                sha: faker.random.words(),
              })),
              repository: {},
              score: faker.datatype.number(),
              node_id: faker.random.words(),
              text_matches: {},
            })
          ),
        }),
      ],
      [ctx.status(304), ctx.json({})],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/search/issues', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          total_count: faker.datatype.number(),
          incomplete_results: faker.datatype.boolean(),
          items: [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
            _ => ({
              url: faker.random.words(),
              repository_url: faker.random.words(),
              labels_url: faker.random.words(),
              comments_url: faker.random.words(),
              events_url: faker.random.words(),
              html_url: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              number: faker.datatype.number(),
              title: faker.random.words(),
              locked: faker.datatype.boolean(),
              active_lock_reason: faker.random.words(),
              assignees: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => ({})),
              user: {},
              labels: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => ({
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                url: faker.random.words(),
                name: faker.random.words(),
                color: faker.random.words(),
                default: faker.datatype.boolean(),
                description: faker.random.words(),
              })),
              state: faker.random.words(),
              assignee: {},
              milestone: {},
              comments: faker.datatype.number(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              closed_at: faker.random.words(),
              text_matches: {},
              pull_request: {
                merged_at: faker.random.words(),
                diff_url: faker.random.words(),
                html_url: faker.random.words(),
                patch_url: faker.random.words(),
                url: faker.random.words(),
              },
              body: faker.random.words(),
              score: faker.datatype.number(),
              author_association: {},
              draft: faker.datatype.boolean(),
              repository: {},
              body_html: faker.random.words(),
              body_text: faker.random.words(),
              timeline_url: faker.random.words(),
              performed_via_github_app: {},
              reactions: {},
            })
          ),
        }),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
      [
        ctx.status(503),
        ctx.json({
          code: faker.random.words(),
          message: faker.random.words(),
          documentation_url: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/search/labels', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          total_count: faker.datatype.number(),
          incomplete_results: faker.datatype.boolean(),
          items: [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
            _ => ({
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              url: faker.random.words(),
              name: faker.random.words(),
              color: faker.random.words(),
              default: faker.datatype.boolean(),
              description: faker.random.words(),
              score: faker.datatype.number(),
              text_matches: {},
            })
          ),
        }),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/search/repositories', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          total_count: faker.datatype.number(),
          incomplete_results: faker.datatype.boolean(),
          items: [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
            _ => ({
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              owner: {},
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              pushed_at: faker.random.words(),
              homepage: faker.random.words(),
              size: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              open_issues_count: faker.datatype.number(),
              master_branch: faker.random.words(),
              default_branch: faker.random.words(),
              score: faker.datatype.number(),
              forks_url: faker.random.words(),
              keys_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              teams_url: faker.random.words(),
              hooks_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              events_url: faker.random.words(),
              assignees_url: faker.random.words(),
              branches_url: faker.random.words(),
              tags_url: faker.random.words(),
              blobs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              trees_url: faker.random.words(),
              statuses_url: faker.random.words(),
              languages_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              contributors_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              commits_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              comments_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              contents_url: faker.random.words(),
              compare_url: faker.random.words(),
              merges_url: faker.random.words(),
              archive_url: faker.random.words(),
              downloads_url: faker.random.words(),
              issues_url: faker.random.words(),
              pulls_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              labels_url: faker.random.words(),
              releases_url: faker.random.words(),
              deployments_url: faker.random.words(),
              git_url: faker.random.words(),
              ssh_url: faker.random.words(),
              clone_url: faker.random.words(),
              svn_url: faker.random.words(),
              forks: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              mirror_url: faker.random.words(),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              license: {},
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              text_matches: {},
              temp_clone_token: faker.random.words(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_rebase_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_forking: faker.datatype.boolean(),
              is_template: faker.datatype.boolean(),
            })
          ),
        }),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
      [
        ctx.status(503),
        ctx.json({
          code: faker.random.words(),
          message: faker.random.words(),
          documentation_url: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/search/topics', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          total_count: faker.datatype.number(),
          incomplete_results: faker.datatype.boolean(),
          items: [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
            _ => ({
              name: faker.random.words(),
              display_name: faker.random.words(),
              short_description: faker.random.words(),
              description: faker.random.words(),
              created_by: faker.random.words(),
              released: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              featured: faker.datatype.boolean(),
              curated: faker.datatype.boolean(),
              score: faker.datatype.number(),
              repository_count: faker.datatype.number(),
              logo_url: faker.random.words(),
              text_matches: {},
              related: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => ({
                topic_relation: {
                  id: faker.datatype.number(),
                  name: faker.random.words(),
                  topic_id: faker.datatype.number(),
                  relation_type: faker.random.words(),
                },
              })),
              aliases: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => ({
                topic_relation: {
                  id: faker.datatype.number(),
                  name: faker.random.words(),
                  topic_id: faker.datatype.number(),
                  relation_type: faker.random.words(),
                },
              })),
            })
          ),
        }),
      ],
      [ctx.status(304), ctx.json({})],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/search/users', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          total_count: faker.datatype.number(),
          incomplete_results: faker.datatype.boolean(),
          items: [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
            _ => ({
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              score: faker.datatype.number(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              events_url: faker.random.words(),
              public_repos: faker.datatype.number(),
              public_gists: faker.datatype.number(),
              followers: faker.datatype.number(),
              following: faker.datatype.number(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              name: faker.random.words(),
              bio: faker.random.words(),
              email: faker.random.words(),
              location: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              hireable: faker.datatype.boolean(),
              text_matches: {},
              blog: faker.random.words(),
              company: faker.random.words(),
              suspended_at: faker.random.words(),
            })
          ),
        }),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
      [
        ctx.status(503),
        ctx.json({
          code: faker.random.words(),
          message: faker.random.words(),
          documentation_url: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/setup/api/configcheck', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          status: faker.random.words(),
          progress: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            status: faker.random.words(),
            key: faker.random.words(),
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/setup/api/configure', (req, res, ctx) => {
    const resultArrray = [[ctx.status(202), ctx.json({})]];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/setup/api/maintenance', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          status: faker.random.words(),
          scheduled_time: faker.random.words(),
          connection_services: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            name: faker.random.words(),
            number: faker.datatype.number(),
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/setup/api/maintenance', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          status: faker.random.words(),
          scheduled_time: faker.random.words(),
          connection_services: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            name: faker.random.words(),
            number: faker.datatype.number(),
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/setup/api/settings', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          enterprise: {
            private_mode: faker.datatype.boolean(),
            public_pages: faker.datatype.boolean(),
            subdomain_isolation: faker.datatype.boolean(),
            signup_enabled: faker.datatype.boolean(),
            github_hostname: faker.random.words(),
            identicons_host: faker.random.words(),
            http_proxy: faker.random.words(),
            auth_mode: faker.random.words(),
            expire_sessions: faker.datatype.boolean(),
            admin_password: faker.random.words(),
            configuration_id: faker.datatype.number(),
            configuration_run_count: faker.datatype.number(),
            avatar: {
              enabled: faker.datatype.boolean(),
              uri: faker.random.words(),
            },
            customer: {
              name: faker.random.words(),
              email: faker.random.words(),
              uuid: faker.random.words(),
              secret_key_data: faker.random.words(),
              public_key_data: faker.random.words(),
            },
            license: {
              seats: faker.datatype.number(),
              evaluation: faker.datatype.boolean(),
              perpetual: faker.datatype.boolean(),
              unlimited_seating: faker.datatype.boolean(),
              support_key: faker.random.words(),
              ssh_allowed: faker.datatype.boolean(),
              cluster_support: faker.datatype.boolean(),
              expire_at: faker.random.words(),
            },
            github_ssl: {
              enabled: faker.datatype.boolean(),
              cert: faker.random.words(),
              key: faker.random.words(),
            },
            ldap: {
              host: faker.random.words(),
              port: faker.datatype.number(),
              base: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => ({})),
              uid: faker.random.words(),
              bind_dn: faker.random.words(),
              password: faker.random.words(),
              method: faker.random.words(),
              search_strategy: faker.random.words(),
              user_groups: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => ({})),
              admin_group: faker.random.words(),
              virtual_attribute_enabled: faker.datatype.boolean(),
              recursive_group_search: faker.datatype.boolean(),
              posix_support: faker.datatype.boolean(),
              user_sync_emails: faker.datatype.boolean(),
              user_sync_keys: faker.datatype.boolean(),
              user_sync_interval: faker.datatype.number(),
              team_sync_interval: faker.datatype.number(),
              sync_enabled: faker.datatype.boolean(),
              reconciliation: {
                user: faker.random.words(),
                org: faker.random.words(),
              },
              profile: {
                uid: faker.random.words(),
                name: faker.random.words(),
                mail: faker.random.words(),
                key: faker.random.words(),
              },
            },
            cas: {
              url: faker.random.words(),
            },
            saml: {
              sso_url: faker.random.words(),
              certificate: faker.random.words(),
              certificate_path: faker.random.words(),
              issuer: faker.random.words(),
              idp_initiated_sso: faker.datatype.boolean(),
              disable_admin_demote: faker.datatype.boolean(),
            },
            github_oauth: {
              client_id: faker.random.words(),
              client_secret: faker.random.words(),
              organization_name: faker.random.words(),
              organization_team: faker.random.words(),
            },
            smtp: {
              enabled: faker.datatype.boolean(),
              address: faker.random.words(),
              authentication: faker.random.words(),
              port: faker.random.words(),
              domain: faker.random.words(),
              username: faker.random.words(),
              user_name: faker.random.words(),
              enable_starttls_auto: faker.datatype.boolean(),
              password: faker.random.words(),
              'discard-to-noreply-address': faker.datatype.boolean(),
              support_address: faker.random.words(),
              support_address_type: faker.random.words(),
              noreply_address: faker.random.words(),
            },
            ntp: {
              primary_server: faker.random.words(),
              secondary_server: faker.random.words(),
            },
            timezone: faker.random.words(),
            snmp: {
              enabled: faker.datatype.boolean(),
              community: faker.random.words(),
            },
            syslog: {
              enabled: faker.datatype.boolean(),
              server: faker.random.words(),
              protocol_name: faker.random.words(),
            },
            assets: faker.random.words(),
            pages: {
              enabled: faker.datatype.boolean(),
            },
            collectd: {
              enabled: faker.datatype.boolean(),
              server: faker.random.words(),
              port: faker.datatype.number(),
              encryption: faker.random.words(),
              username: faker.random.words(),
              password: faker.random.words(),
            },
            mapping: {
              enabled: faker.datatype.boolean(),
              tileserver: faker.random.words(),
              basemap: faker.random.words(),
              token: faker.random.words(),
            },
            load_balancer: faker.random.words(),
          },
          run_list: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.put('/setup/api/settings', (req, res, ctx) => {
    const resultArrray = [[ctx.status(204), ctx.json({})]];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/setup/api/settings/authorized-keys', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            key: faker.random.words(),
            'pretty-print': faker.random.words(),
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/setup/api/settings/authorized-keys', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            key: faker.random.words(),
            'pretty-print': faker.random.words(),
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/setup/api/settings/authorized-keys', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            key: faker.random.words(),
            'pretty-print': faker.random.words(),
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/setup/api/start', (req, res, ctx) => {
    const resultArrray = [[ctx.status(202), ctx.json({})]];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/setup/api/upgrade', (req, res, ctx) => {
    const resultArrray = [[ctx.status(202), ctx.json({})]];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/teams/:team_id', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          url: faker.random.words(),
          html_url: faker.random.words(),
          name: faker.random.words(),
          slug: faker.random.words(),
          description: faker.random.words(),
          privacy: faker.random.arrayElement(['closed', 'secret']),
          permission: faker.random.words(),
          members_url: faker.random.words(),
          repositories_url: faker.random.words(),
          parent: {
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            url: faker.random.words(),
            members_url: faker.random.words(),
            name: faker.random.words(),
            description: faker.random.words(),
            permission: faker.random.words(),
            privacy: faker.random.words(),
            html_url: faker.random.words(),
            repositories_url: faker.random.words(),
            slug: faker.random.words(),
            ldap_dn: faker.random.words(),
          },
          members_count: faker.datatype.number(),
          repos_count: faker.datatype.number(),
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          organization: {
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            hooks_url: faker.random.words(),
            issues_url: faker.random.words(),
            members_url: faker.random.words(),
            public_members_url: faker.random.words(),
            avatar_url: faker.random.words(),
            description: faker.random.words(),
            name: faker.random.words(),
            company: faker.random.words(),
            blog: faker.random.words(),
            location: faker.random.words(),
            email: faker.random.words(),
            twitter_username: faker.random.words(),
            is_verified: faker.datatype.boolean(),
            has_organization_projects: faker.datatype.boolean(),
            has_repository_projects: faker.datatype.boolean(),
            public_repos: faker.datatype.number(),
            public_gists: faker.datatype.number(),
            followers: faker.datatype.number(),
            following: faker.datatype.number(),
            html_url: faker.random.words(),
            created_at: faker.random.words(),
            type: faker.random.words(),
            total_private_repos: faker.datatype.number(),
            owned_private_repos: faker.datatype.number(),
            private_gists: faker.datatype.number(),
            disk_usage: faker.datatype.number(),
            collaborators: faker.datatype.number(),
            billing_email: faker.random.words(),
            plan: {
              name: faker.random.words(),
              space: faker.datatype.number(),
              private_repos: faker.datatype.number(),
              filled_seats: faker.datatype.number(),
              seats: faker.datatype.number(),
            },
            default_repository_permission: faker.random.words(),
            members_can_create_repositories: faker.datatype.boolean(),
            two_factor_requirement_enabled: faker.datatype.boolean(),
            members_allowed_repository_creation_type: faker.random.words(),
            members_can_create_public_repositories: faker.datatype.boolean(),
            members_can_create_private_repositories: faker.datatype.boolean(),
            members_can_create_internal_repositories: faker.datatype.boolean(),
            members_can_create_pages: faker.datatype.boolean(),
            members_can_create_public_pages: faker.datatype.boolean(),
            members_can_create_private_pages: faker.datatype.boolean(),
            members_can_fork_private_repositories: faker.datatype.boolean(),
            updated_at: faker.random.words(),
          },
          ldap_dn: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.patch('/teams/:team_id', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          url: faker.random.words(),
          html_url: faker.random.words(),
          name: faker.random.words(),
          slug: faker.random.words(),
          description: faker.random.words(),
          privacy: faker.random.arrayElement(['closed', 'secret']),
          permission: faker.random.words(),
          members_url: faker.random.words(),
          repositories_url: faker.random.words(),
          parent: {
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            url: faker.random.words(),
            members_url: faker.random.words(),
            name: faker.random.words(),
            description: faker.random.words(),
            permission: faker.random.words(),
            privacy: faker.random.words(),
            html_url: faker.random.words(),
            repositories_url: faker.random.words(),
            slug: faker.random.words(),
            ldap_dn: faker.random.words(),
          },
          members_count: faker.datatype.number(),
          repos_count: faker.datatype.number(),
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          organization: {
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            hooks_url: faker.random.words(),
            issues_url: faker.random.words(),
            members_url: faker.random.words(),
            public_members_url: faker.random.words(),
            avatar_url: faker.random.words(),
            description: faker.random.words(),
            name: faker.random.words(),
            company: faker.random.words(),
            blog: faker.random.words(),
            location: faker.random.words(),
            email: faker.random.words(),
            twitter_username: faker.random.words(),
            is_verified: faker.datatype.boolean(),
            has_organization_projects: faker.datatype.boolean(),
            has_repository_projects: faker.datatype.boolean(),
            public_repos: faker.datatype.number(),
            public_gists: faker.datatype.number(),
            followers: faker.datatype.number(),
            following: faker.datatype.number(),
            html_url: faker.random.words(),
            created_at: faker.random.words(),
            type: faker.random.words(),
            total_private_repos: faker.datatype.number(),
            owned_private_repos: faker.datatype.number(),
            private_gists: faker.datatype.number(),
            disk_usage: faker.datatype.number(),
            collaborators: faker.datatype.number(),
            billing_email: faker.random.words(),
            plan: {
              name: faker.random.words(),
              space: faker.datatype.number(),
              private_repos: faker.datatype.number(),
              filled_seats: faker.datatype.number(),
              seats: faker.datatype.number(),
            },
            default_repository_permission: faker.random.words(),
            members_can_create_repositories: faker.datatype.boolean(),
            two_factor_requirement_enabled: faker.datatype.boolean(),
            members_allowed_repository_creation_type: faker.random.words(),
            members_can_create_public_repositories: faker.datatype.boolean(),
            members_can_create_private_repositories: faker.datatype.boolean(),
            members_can_create_internal_repositories: faker.datatype.boolean(),
            members_can_create_pages: faker.datatype.boolean(),
            members_can_create_public_pages: faker.datatype.boolean(),
            members_can_create_private_pages: faker.datatype.boolean(),
            members_can_fork_private_repositories: faker.datatype.boolean(),
            updated_at: faker.random.words(),
          },
          ldap_dn: faker.random.words(),
        }),
      ],
      [
        ctx.status(201),
        ctx.json({
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          url: faker.random.words(),
          html_url: faker.random.words(),
          name: faker.random.words(),
          slug: faker.random.words(),
          description: faker.random.words(),
          privacy: faker.random.arrayElement(['closed', 'secret']),
          permission: faker.random.words(),
          members_url: faker.random.words(),
          repositories_url: faker.random.words(),
          parent: {
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            url: faker.random.words(),
            members_url: faker.random.words(),
            name: faker.random.words(),
            description: faker.random.words(),
            permission: faker.random.words(),
            privacy: faker.random.words(),
            html_url: faker.random.words(),
            repositories_url: faker.random.words(),
            slug: faker.random.words(),
            ldap_dn: faker.random.words(),
          },
          members_count: faker.datatype.number(),
          repos_count: faker.datatype.number(),
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          organization: {
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            hooks_url: faker.random.words(),
            issues_url: faker.random.words(),
            members_url: faker.random.words(),
            public_members_url: faker.random.words(),
            avatar_url: faker.random.words(),
            description: faker.random.words(),
            name: faker.random.words(),
            company: faker.random.words(),
            blog: faker.random.words(),
            location: faker.random.words(),
            email: faker.random.words(),
            twitter_username: faker.random.words(),
            is_verified: faker.datatype.boolean(),
            has_organization_projects: faker.datatype.boolean(),
            has_repository_projects: faker.datatype.boolean(),
            public_repos: faker.datatype.number(),
            public_gists: faker.datatype.number(),
            followers: faker.datatype.number(),
            following: faker.datatype.number(),
            html_url: faker.random.words(),
            created_at: faker.random.words(),
            type: faker.random.words(),
            total_private_repos: faker.datatype.number(),
            owned_private_repos: faker.datatype.number(),
            private_gists: faker.datatype.number(),
            disk_usage: faker.datatype.number(),
            collaborators: faker.datatype.number(),
            billing_email: faker.random.words(),
            plan: {
              name: faker.random.words(),
              space: faker.datatype.number(),
              private_repos: faker.datatype.number(),
              filled_seats: faker.datatype.number(),
              seats: faker.datatype.number(),
            },
            default_repository_permission: faker.random.words(),
            members_can_create_repositories: faker.datatype.boolean(),
            two_factor_requirement_enabled: faker.datatype.boolean(),
            members_allowed_repository_creation_type: faker.random.words(),
            members_can_create_public_repositories: faker.datatype.boolean(),
            members_can_create_private_repositories: faker.datatype.boolean(),
            members_can_create_internal_repositories: faker.datatype.boolean(),
            members_can_create_pages: faker.datatype.boolean(),
            members_can_create_public_pages: faker.datatype.boolean(),
            members_can_create_private_pages: faker.datatype.boolean(),
            members_can_fork_private_repositories: faker.datatype.boolean(),
            updated_at: faker.random.words(),
          },
          ldap_dn: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/teams/:team_id', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/teams/:team_id/discussions', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            author: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            body: faker.random.words(),
            body_html: faker.random.words(),
            body_version: faker.random.words(),
            comments_count: faker.datatype.number(),
            comments_url: faker.random.words(),
            created_at: faker.random.words(),
            last_edited_at: faker.random.words(),
            html_url: faker.random.words(),
            node_id: faker.random.words(),
            number: faker.datatype.number(),
            pinned: faker.datatype.boolean(),
            private: faker.datatype.boolean(),
            team_url: faker.random.words(),
            title: faker.random.words(),
            updated_at: faker.random.words(),
            url: faker.random.words(),
            reactions: {
              url: faker.random.words(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/teams/:team_id/discussions', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json({
          author: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          body: faker.random.words(),
          body_html: faker.random.words(),
          body_version: faker.random.words(),
          comments_count: faker.datatype.number(),
          comments_url: faker.random.words(),
          created_at: faker.random.words(),
          last_edited_at: faker.random.words(),
          html_url: faker.random.words(),
          node_id: faker.random.words(),
          number: faker.datatype.number(),
          pinned: faker.datatype.boolean(),
          private: faker.datatype.boolean(),
          team_url: faker.random.words(),
          title: faker.random.words(),
          updated_at: faker.random.words(),
          url: faker.random.words(),
          reactions: {
            url: faker.random.words(),
            total_count: faker.datatype.number(),
            '+1': faker.datatype.number(),
            '-1': faker.datatype.number(),
            laugh: faker.datatype.number(),
            confused: faker.datatype.number(),
            heart: faker.datatype.number(),
            hooray: faker.datatype.number(),
            eyes: faker.datatype.number(),
            rocket: faker.datatype.number(),
          },
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get(
    '/teams/:team_id/discussions/:discussion_number',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            author: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            body: faker.random.words(),
            body_html: faker.random.words(),
            body_version: faker.random.words(),
            comments_count: faker.datatype.number(),
            comments_url: faker.random.words(),
            created_at: faker.random.words(),
            last_edited_at: faker.random.words(),
            html_url: faker.random.words(),
            node_id: faker.random.words(),
            number: faker.datatype.number(),
            pinned: faker.datatype.boolean(),
            private: faker.datatype.boolean(),
            team_url: faker.random.words(),
            title: faker.random.words(),
            updated_at: faker.random.words(),
            url: faker.random.words(),
            reactions: {
              url: faker.random.words(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.patch(
    '/teams/:team_id/discussions/:discussion_number',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            author: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            body: faker.random.words(),
            body_html: faker.random.words(),
            body_version: faker.random.words(),
            comments_count: faker.datatype.number(),
            comments_url: faker.random.words(),
            created_at: faker.random.words(),
            last_edited_at: faker.random.words(),
            html_url: faker.random.words(),
            node_id: faker.random.words(),
            number: faker.datatype.number(),
            pinned: faker.datatype.boolean(),
            private: faker.datatype.boolean(),
            team_url: faker.random.words(),
            title: faker.random.words(),
            updated_at: faker.random.words(),
            url: faker.random.words(),
            reactions: {
              url: faker.random.words(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/teams/:team_id/discussions/:discussion_number',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/teams/:team_id/discussions/:discussion_number/comments',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json(
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
              _ => ({
                author: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                body: faker.random.words(),
                body_html: faker.random.words(),
                body_version: faker.random.words(),
                created_at: faker.random.words(),
                last_edited_at: faker.random.words(),
                discussion_url: faker.random.words(),
                html_url: faker.random.words(),
                node_id: faker.random.words(),
                number: faker.datatype.number(),
                updated_at: faker.random.words(),
                url: faker.random.words(),
                reactions: {
                  url: faker.random.words(),
                  total_count: faker.datatype.number(),
                  '+1': faker.datatype.number(),
                  '-1': faker.datatype.number(),
                  laugh: faker.datatype.number(),
                  confused: faker.datatype.number(),
                  heart: faker.datatype.number(),
                  hooray: faker.datatype.number(),
                  eyes: faker.datatype.number(),
                  rocket: faker.datatype.number(),
                },
              })
            )
          ),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.post(
    '/teams/:team_id/discussions/:discussion_number/comments',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(201),
          ctx.json({
            author: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            body: faker.random.words(),
            body_html: faker.random.words(),
            body_version: faker.random.words(),
            created_at: faker.random.words(),
            last_edited_at: faker.random.words(),
            discussion_url: faker.random.words(),
            html_url: faker.random.words(),
            node_id: faker.random.words(),
            number: faker.datatype.number(),
            updated_at: faker.random.words(),
            url: faker.random.words(),
            reactions: {
              url: faker.random.words(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/teams/:team_id/discussions/:discussion_number/comments/:comment_number',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            author: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            body: faker.random.words(),
            body_html: faker.random.words(),
            body_version: faker.random.words(),
            created_at: faker.random.words(),
            last_edited_at: faker.random.words(),
            discussion_url: faker.random.words(),
            html_url: faker.random.words(),
            node_id: faker.random.words(),
            number: faker.datatype.number(),
            updated_at: faker.random.words(),
            url: faker.random.words(),
            reactions: {
              url: faker.random.words(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.patch(
    '/teams/:team_id/discussions/:discussion_number/comments/:comment_number',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            author: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            body: faker.random.words(),
            body_html: faker.random.words(),
            body_version: faker.random.words(),
            created_at: faker.random.words(),
            last_edited_at: faker.random.words(),
            discussion_url: faker.random.words(),
            html_url: faker.random.words(),
            node_id: faker.random.words(),
            number: faker.datatype.number(),
            updated_at: faker.random.words(),
            url: faker.random.words(),
            reactions: {
              url: faker.random.words(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/teams/:team_id/discussions/:discussion_number/comments/:comment_number',
    (req, res, ctx) => {
      const resultArrray = [[ctx.status(204), ctx.json({})]];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/teams/:team_id/discussions/:discussion_number/comments/:comment_number/reactions',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json(
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
              _ => ({
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                user: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                content: faker.random.arrayElement([
                  '+1',
                  '-1',
                  'laugh',
                  'confused',
                  'heart',
                  'hooray',
                  'rocket',
                  'eyes',
                ]),
                created_at: faker.random.words(),
              })
            )
          ),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.post(
    '/teams/:team_id/discussions/:discussion_number/comments/:comment_number/reactions',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(201),
          ctx.json({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            content: faker.random.arrayElement([
              '+1',
              '-1',
              'laugh',
              'confused',
              'heart',
              'hooray',
              'rocket',
              'eyes',
            ]),
            created_at: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get(
    '/teams/:team_id/discussions/:discussion_number/reactions',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json(
            [...new Array(faker.datatype.number({ max: 100 })).keys()].map(
              _ => ({
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                user: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                content: faker.random.arrayElement([
                  '+1',
                  '-1',
                  'laugh',
                  'confused',
                  'heart',
                  'hooray',
                  'rocket',
                  'eyes',
                ]),
                created_at: faker.random.words(),
              })
            )
          ),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.post(
    '/teams/:team_id/discussions/:discussion_number/reactions',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(201),
          ctx.json({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            content: faker.random.arrayElement([
              '+1',
              '-1',
              'laugh',
              'confused',
              'heart',
              'hooray',
              'rocket',
              'eyes',
            ]),
            created_at: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get('/teams/:team_id/members', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          }))
        ),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/teams/:team_id/members/:username', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [ctx.status(404), ctx.json({})],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.put('/teams/:team_id/members/:username', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [ctx.status(404), ctx.json({})],
      [ctx.status(422), ctx.json({})],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/teams/:team_id/members/:username', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [ctx.status(404), ctx.json({})],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/teams/:team_id/memberships/:username', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          url: faker.random.words(),
          role: faker.random.arrayElement(['member', 'maintainer']),
          state: faker.random.arrayElement(['active', 'pending']),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.put('/teams/:team_id/memberships/:username', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          url: faker.random.words(),
          role: faker.random.arrayElement(['member', 'maintainer']),
          state: faker.random.arrayElement(['active', 'pending']),
        }),
      ],
      [ctx.status(403), ctx.json({})],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [ctx.status(422), ctx.json({})],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/teams/:team_id/memberships/:username', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [ctx.status(403), ctx.json({})],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/teams/:team_id/projects', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            owner_url: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            columns_url: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            body: faker.random.words(),
            number: faker.datatype.number(),
            state: faker.random.words(),
            creator: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            organization_permission: faker.random.words(),
            private: faker.datatype.boolean(),
            permissions: {
              read: faker.datatype.boolean(),
              write: faker.datatype.boolean(),
              admin: faker.datatype.boolean(),
            },
          }))
        ),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/teams/:team_id/projects/:project_id', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          owner_url: faker.random.words(),
          url: faker.random.words(),
          html_url: faker.random.words(),
          columns_url: faker.random.words(),
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          name: faker.random.words(),
          body: faker.random.words(),
          number: faker.datatype.number(),
          state: faker.random.words(),
          creator: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          organization_permission: faker.random.words(),
          private: faker.datatype.boolean(),
          permissions: {
            read: faker.datatype.boolean(),
            write: faker.datatype.boolean(),
            admin: faker.datatype.boolean(),
          },
        }),
      ],
      [ctx.status(404), ctx.json({})],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.put('/teams/:team_id/projects/:project_id', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/teams/:team_id/projects/:project_id', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(415),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/teams/:team_id/repos', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            full_name: faker.random.words(),
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.random.words(),
            description: faker.random.words(),
            fork: faker.datatype.boolean(),
            url: faker.random.words(),
            archive_url: faker.random.words(),
            assignees_url: faker.random.words(),
            blobs_url: faker.random.words(),
            branches_url: faker.random.words(),
            collaborators_url: faker.random.words(),
            comments_url: faker.random.words(),
            commits_url: faker.random.words(),
            compare_url: faker.random.words(),
            contents_url: faker.random.words(),
            contributors_url: faker.random.words(),
            deployments_url: faker.random.words(),
            downloads_url: faker.random.words(),
            events_url: faker.random.words(),
            forks_url: faker.random.words(),
            git_commits_url: faker.random.words(),
            git_refs_url: faker.random.words(),
            git_tags_url: faker.random.words(),
            git_url: faker.random.words(),
            issue_comment_url: faker.random.words(),
            issue_events_url: faker.random.words(),
            issues_url: faker.random.words(),
            keys_url: faker.random.words(),
            labels_url: faker.random.words(),
            languages_url: faker.random.words(),
            merges_url: faker.random.words(),
            milestones_url: faker.random.words(),
            notifications_url: faker.random.words(),
            pulls_url: faker.random.words(),
            releases_url: faker.random.words(),
            ssh_url: faker.random.words(),
            stargazers_url: faker.random.words(),
            statuses_url: faker.random.words(),
            subscribers_url: faker.random.words(),
            subscription_url: faker.random.words(),
            tags_url: faker.random.words(),
            teams_url: faker.random.words(),
            trees_url: faker.random.words(),
            clone_url: faker.random.words(),
            mirror_url: faker.random.words(),
            hooks_url: faker.random.words(),
            svn_url: faker.random.words(),
            homepage: faker.random.words(),
            language: faker.random.words(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.random.words(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.random.words(),
            pushed_at: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              license: {
                key: faker.random.words(),
                name: faker.random.words(),
                url: faker.random.words(),
                spdx_id: faker.random.words(),
                node_id: faker.random.words(),
                html_url: faker.random.words(),
              },
              organization: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              allow_rebase_merge: faker.datatype.boolean(),
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                owner: {
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.random.words(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.random.words(),
              starred_at: faker.random.words(),
            },
            temp_clone_token: faker.random.words(),
            delete_branch_on_merge: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            code_of_conduct: {
              key: faker.random.words(),
              name: faker.random.words(),
              url: faker.random.words(),
              body: faker.random.words(),
              html_url: faker.random.words(),
            },
            license: {
              key: faker.random.words(),
              name: faker.random.words(),
              spdx_id: faker.random.words(),
              url: faker.random.words(),
              node_id: faker.random.words(),
            },
            forks: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            allow_forking: faker.datatype.boolean(),
          }))
        ),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/teams/:team_id/repos/:owner/:repo', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          name: faker.random.words(),
          full_name: faker.random.words(),
          license: {
            key: faker.random.words(),
            name: faker.random.words(),
            url: faker.random.words(),
            spdx_id: faker.random.words(),
            node_id: faker.random.words(),
            html_url: faker.random.words(),
          },
          forks: faker.datatype.number(),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.random.words(),
          description: faker.random.words(),
          fork: faker.datatype.boolean(),
          url: faker.random.words(),
          archive_url: faker.random.words(),
          assignees_url: faker.random.words(),
          blobs_url: faker.random.words(),
          branches_url: faker.random.words(),
          collaborators_url: faker.random.words(),
          comments_url: faker.random.words(),
          commits_url: faker.random.words(),
          compare_url: faker.random.words(),
          contents_url: faker.random.words(),
          contributors_url: faker.random.words(),
          deployments_url: faker.random.words(),
          downloads_url: faker.random.words(),
          events_url: faker.random.words(),
          forks_url: faker.random.words(),
          git_commits_url: faker.random.words(),
          git_refs_url: faker.random.words(),
          git_tags_url: faker.random.words(),
          git_url: faker.random.words(),
          issue_comment_url: faker.random.words(),
          issue_events_url: faker.random.words(),
          issues_url: faker.random.words(),
          keys_url: faker.random.words(),
          labels_url: faker.random.words(),
          languages_url: faker.random.words(),
          merges_url: faker.random.words(),
          milestones_url: faker.random.words(),
          notifications_url: faker.random.words(),
          pulls_url: faker.random.words(),
          releases_url: faker.random.words(),
          ssh_url: faker.random.words(),
          stargazers_url: faker.random.words(),
          statuses_url: faker.random.words(),
          subscribers_url: faker.random.words(),
          subscription_url: faker.random.words(),
          tags_url: faker.random.words(),
          teams_url: faker.random.words(),
          trees_url: faker.random.words(),
          clone_url: faker.random.words(),
          mirror_url: faker.random.words(),
          hooks_url: faker.random.words(),
          svn_url: faker.random.words(),
          homepage: faker.random.words(),
          language: faker.random.words(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.random.words(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.random.words(),
          pushed_at: faker.random.words(),
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          allow_rebase_merge: faker.datatype.boolean(),
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            full_name: faker.random.words(),
            license: {
              key: faker.random.words(),
              name: faker.random.words(),
              url: faker.random.words(),
              spdx_id: faker.random.words(),
              node_id: faker.random.words(),
              html_url: faker.random.words(),
            },
            organization: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.random.words(),
            description: faker.random.words(),
            fork: faker.datatype.boolean(),
            url: faker.random.words(),
            archive_url: faker.random.words(),
            assignees_url: faker.random.words(),
            blobs_url: faker.random.words(),
            branches_url: faker.random.words(),
            collaborators_url: faker.random.words(),
            comments_url: faker.random.words(),
            commits_url: faker.random.words(),
            compare_url: faker.random.words(),
            contents_url: faker.random.words(),
            contributors_url: faker.random.words(),
            deployments_url: faker.random.words(),
            downloads_url: faker.random.words(),
            events_url: faker.random.words(),
            forks_url: faker.random.words(),
            git_commits_url: faker.random.words(),
            git_refs_url: faker.random.words(),
            git_tags_url: faker.random.words(),
            git_url: faker.random.words(),
            issue_comment_url: faker.random.words(),
            issue_events_url: faker.random.words(),
            issues_url: faker.random.words(),
            keys_url: faker.random.words(),
            labels_url: faker.random.words(),
            languages_url: faker.random.words(),
            merges_url: faker.random.words(),
            milestones_url: faker.random.words(),
            notifications_url: faker.random.words(),
            pulls_url: faker.random.words(),
            releases_url: faker.random.words(),
            ssh_url: faker.random.words(),
            stargazers_url: faker.random.words(),
            statuses_url: faker.random.words(),
            subscribers_url: faker.random.words(),
            subscription_url: faker.random.words(),
            tags_url: faker.random.words(),
            teams_url: faker.random.words(),
            trees_url: faker.random.words(),
            clone_url: faker.random.words(),
            mirror_url: faker.random.words(),
            hooks_url: faker.random.words(),
            svn_url: faker.random.words(),
            homepage: faker.random.words(),
            language: faker.random.words(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.random.words(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.random.words(),
            pushed_at: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            allow_rebase_merge: faker.datatype.boolean(),
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              owner: {
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.random.words(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.random.words(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.random.words(),
            starred_at: faker.random.words(),
          },
          temp_clone_token: faker.random.words(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          master_branch: faker.random.words(),
        }),
      ],
      [ctx.status(204), ctx.json({})],
      [ctx.status(404), ctx.json({})],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.put('/teams/:team_id/repos/:owner/:repo', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/teams/:team_id/repos/:owner/:repo', (req, res, ctx) => {
    const resultArrray = [[ctx.status(204), ctx.json({})]];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/teams/:team_id/teams', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            slug: faker.random.words(),
            description: faker.random.words(),
            privacy: faker.random.words(),
            permission: faker.random.words(),
            permissions: {
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              admin: faker.datatype.boolean(),
            },
            url: faker.random.words(),
            html_url: faker.random.words(),
            members_url: faker.random.words(),
            repositories_url: faker.random.words(),
            parent: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              url: faker.random.words(),
              members_url: faker.random.words(),
              name: faker.random.words(),
              description: faker.random.words(),
              permission: faker.random.words(),
              privacy: faker.random.words(),
              html_url: faker.random.words(),
              repositories_url: faker.random.words(),
              slug: faker.random.words(),
              ldap_dn: faker.random.words(),
            },
          }))
        ),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/user', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(200), ctx.json({})],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.patch('/user', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          login: faker.random.words(),
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          avatar_url: faker.random.words(),
          gravatar_id: faker.random.words(),
          url: faker.random.words(),
          html_url: faker.random.words(),
          followers_url: faker.random.words(),
          following_url: faker.random.words(),
          gists_url: faker.random.words(),
          starred_url: faker.random.words(),
          subscriptions_url: faker.random.words(),
          organizations_url: faker.random.words(),
          repos_url: faker.random.words(),
          events_url: faker.random.words(),
          received_events_url: faker.random.words(),
          type: faker.random.words(),
          site_admin: faker.datatype.boolean(),
          name: faker.random.words(),
          company: faker.random.words(),
          blog: faker.random.words(),
          location: faker.random.words(),
          email: faker.random.words(),
          hireable: faker.datatype.boolean(),
          bio: faker.random.words(),
          twitter_username: faker.random.words(),
          public_repos: faker.datatype.number(),
          public_gists: faker.datatype.number(),
          followers: faker.datatype.number(),
          following: faker.datatype.number(),
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          private_gists: faker.datatype.number(),
          total_private_repos: faker.datatype.number(),
          owned_private_repos: faker.datatype.number(),
          disk_usage: faker.datatype.number(),
          collaborators: faker.datatype.number(),
          two_factor_authentication: faker.datatype.boolean(),
          plan: {
            collaborators: faker.datatype.number(),
            name: faker.random.words(),
            space: faker.datatype.number(),
            private_repos: faker.datatype.number(),
          },
          suspended_at: faker.random.words(),
          business_plus: faker.datatype.boolean(),
          ldap_dn: faker.random.words(),
        }),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/user/emails', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            email: faker.random.words(),
            primary: faker.datatype.boolean(),
            verified: faker.datatype.boolean(),
            visibility: faker.random.words(),
          }))
        ),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/user/emails', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            email: faker.random.words(),
            primary: faker.datatype.boolean(),
            verified: faker.datatype.boolean(),
            visibility: faker.random.words(),
          }))
        ),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/user/emails', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/user/followers', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          }))
        ),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/user/following', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          }))
        ),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/user/following/:username', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.put('/user/following/:username', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/user/following/:username', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/user/gpg_keys', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.datatype.number(),
            primary_key_id: faker.datatype.number(),
            key_id: faker.random.words(),
            public_key: faker.random.words(),
            emails: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              email: faker.random.words(),
              verified: faker.datatype.boolean(),
            })),
            subkeys: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              primary_key_id: faker.datatype.number(),
              key_id: faker.random.words(),
              public_key: faker.random.words(),
              emails: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => ({})),
              subkeys: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => ({})),
              can_sign: faker.datatype.boolean(),
              can_encrypt_comms: faker.datatype.boolean(),
              can_encrypt_storage: faker.datatype.boolean(),
              can_certify: faker.datatype.boolean(),
              created_at: faker.random.words(),
              expires_at: faker.random.words(),
              raw_key: faker.random.words(),
            })),
            can_sign: faker.datatype.boolean(),
            can_encrypt_comms: faker.datatype.boolean(),
            can_encrypt_storage: faker.datatype.boolean(),
            can_certify: faker.datatype.boolean(),
            created_at: faker.random.words(),
            expires_at: faker.random.words(),
            raw_key: faker.random.words(),
          }))
        ),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/user/gpg_keys', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json({
          id: faker.datatype.number(),
          primary_key_id: faker.datatype.number(),
          key_id: faker.random.words(),
          public_key: faker.random.words(),
          emails: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            email: faker.random.words(),
            verified: faker.datatype.boolean(),
          })),
          subkeys: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            primary_key_id: faker.datatype.number(),
            key_id: faker.random.words(),
            public_key: faker.random.words(),
            emails: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({})),
            subkeys: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({})),
            can_sign: faker.datatype.boolean(),
            can_encrypt_comms: faker.datatype.boolean(),
            can_encrypt_storage: faker.datatype.boolean(),
            can_certify: faker.datatype.boolean(),
            created_at: faker.random.words(),
            expires_at: faker.random.words(),
            raw_key: faker.random.words(),
          })),
          can_sign: faker.datatype.boolean(),
          can_encrypt_comms: faker.datatype.boolean(),
          can_encrypt_storage: faker.datatype.boolean(),
          can_certify: faker.datatype.boolean(),
          created_at: faker.random.words(),
          expires_at: faker.random.words(),
          raw_key: faker.random.words(),
        }),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/user/gpg_keys/:gpg_key_id', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.datatype.number(),
          primary_key_id: faker.datatype.number(),
          key_id: faker.random.words(),
          public_key: faker.random.words(),
          emails: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            email: faker.random.words(),
            verified: faker.datatype.boolean(),
          })),
          subkeys: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            primary_key_id: faker.datatype.number(),
            key_id: faker.random.words(),
            public_key: faker.random.words(),
            emails: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({})),
            subkeys: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({})),
            can_sign: faker.datatype.boolean(),
            can_encrypt_comms: faker.datatype.boolean(),
            can_encrypt_storage: faker.datatype.boolean(),
            can_certify: faker.datatype.boolean(),
            created_at: faker.random.words(),
            expires_at: faker.random.words(),
            raw_key: faker.random.words(),
          })),
          can_sign: faker.datatype.boolean(),
          can_encrypt_comms: faker.datatype.boolean(),
          can_encrypt_storage: faker.datatype.boolean(),
          can_certify: faker.datatype.boolean(),
          created_at: faker.random.words(),
          expires_at: faker.random.words(),
          raw_key: faker.random.words(),
        }),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/user/gpg_keys/:gpg_key_id', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/user/installations', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          total_count: faker.datatype.number(),
          installations: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            account: {},
            repository_selection: faker.random.arrayElement([
              'all',
              'selected',
            ]),
            access_tokens_url: faker.random.words(),
            repositories_url: faker.random.words(),
            html_url: faker.random.words(),
            app_id: faker.datatype.number(),
            target_id: faker.datatype.number(),
            target_type: faker.random.words(),
            permissions: {
              actions: faker.random.arrayElement(['read', 'write']),
              administration: faker.random.arrayElement(['read', 'write']),
              checks: faker.random.arrayElement(['read', 'write']),
              contents: faker.random.arrayElement(['read', 'write']),
              deployments: faker.random.arrayElement(['read', 'write']),
              environments: faker.random.arrayElement(['read', 'write']),
              issues: faker.random.arrayElement(['read', 'write']),
              metadata: faker.random.arrayElement(['read', 'write']),
              packages: faker.random.arrayElement(['read', 'write']),
              pages: faker.random.arrayElement(['read', 'write']),
              pull_requests: faker.random.arrayElement(['read', 'write']),
              repository_hooks: faker.random.arrayElement(['read', 'write']),
              repository_projects: faker.random.arrayElement([
                'read',
                'write',
                'admin',
              ]),
              secret_scanning_alerts: faker.random.arrayElement([
                'read',
                'write',
              ]),
              secrets: faker.random.arrayElement(['read', 'write']),
              security_events: faker.random.arrayElement(['read', 'write']),
              single_file: faker.random.arrayElement(['read', 'write']),
              statuses: faker.random.arrayElement(['read', 'write']),
              vulnerability_alerts: faker.random.arrayElement([
                'read',
                'write',
              ]),
              workflows: faker.random.arrayElement(['write']),
              members: faker.random.arrayElement(['read', 'write']),
              organization_administration: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_hooks: faker.random.arrayElement(['read', 'write']),
              organization_plan: faker.random.arrayElement(['read']),
              organization_projects: faker.random.arrayElement([
                'read',
                'write',
                'admin',
              ]),
              organization_packages: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_secrets: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_self_hosted_runners: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_user_blocking: faker.random.arrayElement([
                'read',
                'write',
              ]),
              team_discussions: faker.random.arrayElement(['read', 'write']),
              content_references: faker.random.arrayElement(['read', 'write']),
            },
            events: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            single_file_name: faker.random.words(),
            has_multiple_single_files: faker.datatype.boolean(),
            single_file_paths: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            app_slug: faker.random.words(),
            suspended_by: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            suspended_at: faker.random.words(),
            contact_email: faker.random.words(),
          })),
        }),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(415),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get(
    '/user/installations/:installation_id/repositories',
    (req, res, ctx) => {
      const resultArrray = [
        [
          ctx.status(200),
          ctx.json({
            total_count: faker.datatype.number(),
            repository_selection: faker.random.words(),
            repositories: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              license: {
                key: faker.random.words(),
                name: faker.random.words(),
                url: faker.random.words(),
                spdx_id: faker.random.words(),
                node_id: faker.random.words(),
                html_url: faker.random.words(),
              },
              organization: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              allow_rebase_merge: faker.datatype.boolean(),
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                owner: {
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.random.words(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.random.words(),
              starred_at: faker.random.words(),
            })),
          }),
        ],
        [ctx.status(304), ctx.json({})],
        [
          ctx.status(403),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.put(
    '/user/installations/:installation_id/repositories/:repository_id',
    (req, res, ctx) => {
      const resultArrray = [
        [ctx.status(204), ctx.json({})],
        [ctx.status(304), ctx.json({})],
        [
          ctx.status(403),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.delete(
    '/user/installations/:installation_id/repositories/:repository_id',
    (req, res, ctx) => {
      const resultArrray = [
        [ctx.status(204), ctx.json({})],
        [ctx.status(304), ctx.json({})],
        [
          ctx.status(403),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get('/user/issues', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            url: faker.random.words(),
            repository_url: faker.random.words(),
            labels_url: faker.random.words(),
            comments_url: faker.random.words(),
            events_url: faker.random.words(),
            html_url: faker.random.words(),
            number: faker.datatype.number(),
            state: faker.random.words(),
            title: faker.random.words(),
            body: faker.random.words(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            labels: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({})),
            assignee: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            assignees: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            })),
            milestone: {
              url: faker.random.words(),
              html_url: faker.random.words(),
              labels_url: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              number: faker.datatype.number(),
              state: faker.random.arrayElement(['open', 'closed']),
              title: faker.random.words(),
              description: faker.random.words(),
              creator: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              open_issues: faker.datatype.number(),
              closed_issues: faker.datatype.number(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              closed_at: faker.random.words(),
              due_on: faker.random.words(),
            },
            locked: faker.datatype.boolean(),
            active_lock_reason: faker.random.words(),
            comments: faker.datatype.number(),
            pull_request: {
              merged_at: faker.random.words(),
              diff_url: faker.random.words(),
              html_url: faker.random.words(),
              patch_url: faker.random.words(),
              url: faker.random.words(),
            },
            closed_at: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            draft: faker.datatype.boolean(),
            closed_by: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            body_html: faker.random.words(),
            body_text: faker.random.words(),
            timeline_url: faker.random.words(),
            repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              license: {
                key: faker.random.words(),
                name: faker.random.words(),
                url: faker.random.words(),
                spdx_id: faker.random.words(),
                node_id: faker.random.words(),
                html_url: faker.random.words(),
              },
              organization: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              allow_rebase_merge: faker.datatype.boolean(),
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                owner: {
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.random.words(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.random.words(),
              starred_at: faker.random.words(),
            },
            performed_via_github_app: {
              id: faker.datatype.number(),
              slug: faker.random.words(),
              node_id: faker.random.words(),
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              name: faker.random.words(),
              description: faker.random.words(),
              external_url: faker.random.words(),
              html_url: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                issues: faker.random.words(),
                checks: faker.random.words(),
                metadata: faker.random.words(),
                contents: faker.random.words(),
                deployments: faker.random.words(),
              },
              events: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              installations_count: faker.datatype.number(),
              client_id: faker.random.words(),
              client_secret: faker.random.words(),
              webhook_secret: faker.random.words(),
              pem: faker.random.words(),
            },
            author_association: faker.random.arrayElement([
              'COLLABORATOR',
              'CONTRIBUTOR',
              'FIRST_TIMER',
              'FIRST_TIME_CONTRIBUTOR',
              'MANNEQUIN',
              'MEMBER',
              'NONE',
              'OWNER',
            ]),
            reactions: {
              url: faker.random.words(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          }))
        ),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/user/keys', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            key: faker.random.words(),
            id: faker.datatype.number(),
            url: faker.random.words(),
            title: faker.random.words(),
            created_at: faker.random.words(),
            verified: faker.datatype.boolean(),
            read_only: faker.datatype.boolean(),
          }))
        ),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/user/keys', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json({
          key: faker.random.words(),
          id: faker.datatype.number(),
          url: faker.random.words(),
          title: faker.random.words(),
          created_at: faker.random.words(),
          verified: faker.datatype.boolean(),
          read_only: faker.datatype.boolean(),
        }),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/user/keys/:key_id', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          key: faker.random.words(),
          id: faker.datatype.number(),
          url: faker.random.words(),
          title: faker.random.words(),
          created_at: faker.random.words(),
          verified: faker.datatype.boolean(),
          read_only: faker.datatype.boolean(),
        }),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/user/keys/:key_id', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/user/memberships/orgs', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            url: faker.random.words(),
            state: faker.random.arrayElement(['active', 'pending']),
            role: faker.random.arrayElement([
              'admin',
              'member',
              'billing_manager',
            ]),
            organization_url: faker.random.words(),
            organization: {
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              hooks_url: faker.random.words(),
              issues_url: faker.random.words(),
              members_url: faker.random.words(),
              public_members_url: faker.random.words(),
              avatar_url: faker.random.words(),
              description: faker.random.words(),
            },
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            permissions: {
              can_create_repository: faker.datatype.boolean(),
            },
          }))
        ),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/user/memberships/orgs/:org', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          url: faker.random.words(),
          state: faker.random.arrayElement(['active', 'pending']),
          role: faker.random.arrayElement([
            'admin',
            'member',
            'billing_manager',
          ]),
          organization_url: faker.random.words(),
          organization: {
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            hooks_url: faker.random.words(),
            issues_url: faker.random.words(),
            members_url: faker.random.words(),
            public_members_url: faker.random.words(),
            avatar_url: faker.random.words(),
            description: faker.random.words(),
          },
          user: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          permissions: {
            can_create_repository: faker.datatype.boolean(),
          },
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.patch('/user/memberships/orgs/:org', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          url: faker.random.words(),
          state: faker.random.arrayElement(['active', 'pending']),
          role: faker.random.arrayElement([
            'admin',
            'member',
            'billing_manager',
          ]),
          organization_url: faker.random.words(),
          organization: {
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            hooks_url: faker.random.words(),
            issues_url: faker.random.words(),
            members_url: faker.random.words(),
            public_members_url: faker.random.words(),
            avatar_url: faker.random.words(),
            description: faker.random.words(),
          },
          user: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          permissions: {
            can_create_repository: faker.datatype.boolean(),
          },
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/user/orgs', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            hooks_url: faker.random.words(),
            issues_url: faker.random.words(),
            members_url: faker.random.words(),
            public_members_url: faker.random.words(),
            avatar_url: faker.random.words(),
            description: faker.random.words(),
          }))
        ),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/user/projects', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json({
          owner_url: faker.random.words(),
          url: faker.random.words(),
          html_url: faker.random.words(),
          columns_url: faker.random.words(),
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          name: faker.random.words(),
          body: faker.random.words(),
          number: faker.datatype.number(),
          state: faker.random.words(),
          creator: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          organization_permission: faker.random.arrayElement([
            'read',
            'write',
            'admin',
            'none',
          ]),
          private: faker.datatype.boolean(),
        }),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(415),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/user/public_emails', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            email: faker.random.words(),
            primary: faker.datatype.boolean(),
            verified: faker.datatype.boolean(),
            visibility: faker.random.words(),
          }))
        ),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/user/repos', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            full_name: faker.random.words(),
            license: {
              key: faker.random.words(),
              name: faker.random.words(),
              url: faker.random.words(),
              spdx_id: faker.random.words(),
              node_id: faker.random.words(),
              html_url: faker.random.words(),
            },
            organization: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.random.words(),
            description: faker.random.words(),
            fork: faker.datatype.boolean(),
            url: faker.random.words(),
            archive_url: faker.random.words(),
            assignees_url: faker.random.words(),
            blobs_url: faker.random.words(),
            branches_url: faker.random.words(),
            collaborators_url: faker.random.words(),
            comments_url: faker.random.words(),
            commits_url: faker.random.words(),
            compare_url: faker.random.words(),
            contents_url: faker.random.words(),
            contributors_url: faker.random.words(),
            deployments_url: faker.random.words(),
            downloads_url: faker.random.words(),
            events_url: faker.random.words(),
            forks_url: faker.random.words(),
            git_commits_url: faker.random.words(),
            git_refs_url: faker.random.words(),
            git_tags_url: faker.random.words(),
            git_url: faker.random.words(),
            issue_comment_url: faker.random.words(),
            issue_events_url: faker.random.words(),
            issues_url: faker.random.words(),
            keys_url: faker.random.words(),
            labels_url: faker.random.words(),
            languages_url: faker.random.words(),
            merges_url: faker.random.words(),
            milestones_url: faker.random.words(),
            notifications_url: faker.random.words(),
            pulls_url: faker.random.words(),
            releases_url: faker.random.words(),
            ssh_url: faker.random.words(),
            stargazers_url: faker.random.words(),
            statuses_url: faker.random.words(),
            subscribers_url: faker.random.words(),
            subscription_url: faker.random.words(),
            tags_url: faker.random.words(),
            teams_url: faker.random.words(),
            trees_url: faker.random.words(),
            clone_url: faker.random.words(),
            mirror_url: faker.random.words(),
            hooks_url: faker.random.words(),
            svn_url: faker.random.words(),
            homepage: faker.random.words(),
            language: faker.random.words(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.random.words(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.random.words(),
            pushed_at: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            allow_rebase_merge: faker.datatype.boolean(),
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              owner: {
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.random.words(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.random.words(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.random.words(),
            starred_at: faker.random.words(),
          }))
        ),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.post('/user/repos', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(201),
        ctx.json({
          id: faker.datatype.number(),
          node_id: faker.random.words(),
          name: faker.random.words(),
          full_name: faker.random.words(),
          license: {
            key: faker.random.words(),
            name: faker.random.words(),
            url: faker.random.words(),
            spdx_id: faker.random.words(),
            node_id: faker.random.words(),
            html_url: faker.random.words(),
          },
          organization: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          forks: faker.datatype.number(),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.random.words(),
          description: faker.random.words(),
          fork: faker.datatype.boolean(),
          url: faker.random.words(),
          archive_url: faker.random.words(),
          assignees_url: faker.random.words(),
          blobs_url: faker.random.words(),
          branches_url: faker.random.words(),
          collaborators_url: faker.random.words(),
          comments_url: faker.random.words(),
          commits_url: faker.random.words(),
          compare_url: faker.random.words(),
          contents_url: faker.random.words(),
          contributors_url: faker.random.words(),
          deployments_url: faker.random.words(),
          downloads_url: faker.random.words(),
          events_url: faker.random.words(),
          forks_url: faker.random.words(),
          git_commits_url: faker.random.words(),
          git_refs_url: faker.random.words(),
          git_tags_url: faker.random.words(),
          git_url: faker.random.words(),
          issue_comment_url: faker.random.words(),
          issue_events_url: faker.random.words(),
          issues_url: faker.random.words(),
          keys_url: faker.random.words(),
          labels_url: faker.random.words(),
          languages_url: faker.random.words(),
          merges_url: faker.random.words(),
          milestones_url: faker.random.words(),
          notifications_url: faker.random.words(),
          pulls_url: faker.random.words(),
          releases_url: faker.random.words(),
          ssh_url: faker.random.words(),
          stargazers_url: faker.random.words(),
          statuses_url: faker.random.words(),
          subscribers_url: faker.random.words(),
          subscription_url: faker.random.words(),
          tags_url: faker.random.words(),
          teams_url: faker.random.words(),
          trees_url: faker.random.words(),
          clone_url: faker.random.words(),
          mirror_url: faker.random.words(),
          hooks_url: faker.random.words(),
          svn_url: faker.random.words(),
          homepage: faker.random.words(),
          language: faker.random.words(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.random.words(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.random.words(),
          pushed_at: faker.random.words(),
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          allow_rebase_merge: faker.datatype.boolean(),
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            full_name: faker.random.words(),
            owner: {
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.random.words(),
            description: faker.random.words(),
            fork: faker.datatype.boolean(),
            url: faker.random.words(),
            archive_url: faker.random.words(),
            assignees_url: faker.random.words(),
            blobs_url: faker.random.words(),
            branches_url: faker.random.words(),
            collaborators_url: faker.random.words(),
            comments_url: faker.random.words(),
            commits_url: faker.random.words(),
            compare_url: faker.random.words(),
            contents_url: faker.random.words(),
            contributors_url: faker.random.words(),
            deployments_url: faker.random.words(),
            downloads_url: faker.random.words(),
            events_url: faker.random.words(),
            forks_url: faker.random.words(),
            git_commits_url: faker.random.words(),
            git_refs_url: faker.random.words(),
            git_tags_url: faker.random.words(),
            git_url: faker.random.words(),
            issue_comment_url: faker.random.words(),
            issue_events_url: faker.random.words(),
            issues_url: faker.random.words(),
            keys_url: faker.random.words(),
            labels_url: faker.random.words(),
            languages_url: faker.random.words(),
            merges_url: faker.random.words(),
            milestones_url: faker.random.words(),
            notifications_url: faker.random.words(),
            pulls_url: faker.random.words(),
            releases_url: faker.random.words(),
            ssh_url: faker.random.words(),
            stargazers_url: faker.random.words(),
            statuses_url: faker.random.words(),
            subscribers_url: faker.random.words(),
            subscription_url: faker.random.words(),
            tags_url: faker.random.words(),
            teams_url: faker.random.words(),
            trees_url: faker.random.words(),
            clone_url: faker.random.words(),
            mirror_url: faker.random.words(),
            hooks_url: faker.random.words(),
            svn_url: faker.random.words(),
            homepage: faker.random.words(),
            language: faker.random.words(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.random.words(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.random.words(),
            pushed_at: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.random.words(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
          },
          temp_clone_token: faker.random.words(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          master_branch: faker.random.words(),
          starred_at: faker.random.words(),
        }),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(400),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/user/repository_invitations', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.datatype.number(),
            repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                license: {
                  key: faker.random.words(),
                  name: faker.random.words(),
                  url: faker.random.words(),
                  spdx_id: faker.random.words(),
                  node_id: faker.random.words(),
                  html_url: faker.random.words(),
                },
                organization: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                forks: faker.datatype.number(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                },
                owner: {
                  name: faker.random.words(),
                  email: faker.random.words(),
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                  starred_at: faker.random.words(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                allow_rebase_merge: faker.datatype.boolean(),
                template_repository: {
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  name: faker.random.words(),
                  full_name: faker.random.words(),
                  owner: {
                    login: faker.random.words(),
                    id: faker.datatype.number(),
                    node_id: faker.random.words(),
                    avatar_url: faker.random.words(),
                    gravatar_id: faker.random.words(),
                    url: faker.random.words(),
                    html_url: faker.random.words(),
                    followers_url: faker.random.words(),
                    following_url: faker.random.words(),
                    gists_url: faker.random.words(),
                    starred_url: faker.random.words(),
                    subscriptions_url: faker.random.words(),
                    organizations_url: faker.random.words(),
                    repos_url: faker.random.words(),
                    events_url: faker.random.words(),
                    received_events_url: faker.random.words(),
                    type: faker.random.words(),
                    site_admin: faker.datatype.boolean(),
                  },
                  private: faker.datatype.boolean(),
                  html_url: faker.random.words(),
                  description: faker.random.words(),
                  fork: faker.datatype.boolean(),
                  url: faker.random.words(),
                  archive_url: faker.random.words(),
                  assignees_url: faker.random.words(),
                  blobs_url: faker.random.words(),
                  branches_url: faker.random.words(),
                  collaborators_url: faker.random.words(),
                  comments_url: faker.random.words(),
                  commits_url: faker.random.words(),
                  compare_url: faker.random.words(),
                  contents_url: faker.random.words(),
                  contributors_url: faker.random.words(),
                  deployments_url: faker.random.words(),
                  downloads_url: faker.random.words(),
                  events_url: faker.random.words(),
                  forks_url: faker.random.words(),
                  git_commits_url: faker.random.words(),
                  git_refs_url: faker.random.words(),
                  git_tags_url: faker.random.words(),
                  git_url: faker.random.words(),
                  issue_comment_url: faker.random.words(),
                  issue_events_url: faker.random.words(),
                  issues_url: faker.random.words(),
                  keys_url: faker.random.words(),
                  labels_url: faker.random.words(),
                  languages_url: faker.random.words(),
                  merges_url: faker.random.words(),
                  milestones_url: faker.random.words(),
                  notifications_url: faker.random.words(),
                  pulls_url: faker.random.words(),
                  releases_url: faker.random.words(),
                  ssh_url: faker.random.words(),
                  stargazers_url: faker.random.words(),
                  statuses_url: faker.random.words(),
                  subscribers_url: faker.random.words(),
                  subscription_url: faker.random.words(),
                  tags_url: faker.random.words(),
                  teams_url: faker.random.words(),
                  trees_url: faker.random.words(),
                  clone_url: faker.random.words(),
                  mirror_url: faker.random.words(),
                  hooks_url: faker.random.words(),
                  svn_url: faker.random.words(),
                  homepage: faker.random.words(),
                  language: faker.random.words(),
                  forks_count: faker.datatype.number(),
                  stargazers_count: faker.datatype.number(),
                  watchers_count: faker.datatype.number(),
                  size: faker.datatype.number(),
                  default_branch: faker.random.words(),
                  open_issues_count: faker.datatype.number(),
                  is_template: faker.datatype.boolean(),
                  topics: [
                    ...new Array(faker.datatype.number({ max: 100 })).keys(),
                  ].map(_ => faker.random.words()),
                  has_issues: faker.datatype.boolean(),
                  has_projects: faker.datatype.boolean(),
                  has_wiki: faker.datatype.boolean(),
                  has_pages: faker.datatype.boolean(),
                  has_downloads: faker.datatype.boolean(),
                  archived: faker.datatype.boolean(),
                  disabled: faker.datatype.boolean(),
                  visibility: faker.random.words(),
                  pushed_at: faker.random.words(),
                  created_at: faker.random.words(),
                  updated_at: faker.random.words(),
                  permissions: {
                    admin: faker.datatype.boolean(),
                    maintain: faker.datatype.boolean(),
                    push: faker.datatype.boolean(),
                    triage: faker.datatype.boolean(),
                    pull: faker.datatype.boolean(),
                  },
                  allow_rebase_merge: faker.datatype.boolean(),
                  temp_clone_token: faker.random.words(),
                  allow_squash_merge: faker.datatype.boolean(),
                  allow_auto_merge: faker.datatype.boolean(),
                  delete_branch_on_merge: faker.datatype.boolean(),
                  allow_update_branch: faker.datatype.boolean(),
                  allow_merge_commit: faker.datatype.boolean(),
                  subscribers_count: faker.datatype.number(),
                  network_count: faker.datatype.number(),
                },
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                allow_forking: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
                open_issues: faker.datatype.number(),
                watchers: faker.datatype.number(),
                master_branch: faker.random.words(),
                starred_at: faker.random.words(),
              },
              temp_clone_token: faker.random.words(),
              delete_branch_on_merge: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              code_of_conduct: {
                key: faker.random.words(),
                name: faker.random.words(),
                url: faker.random.words(),
                body: faker.random.words(),
                html_url: faker.random.words(),
              },
              license: {
                key: faker.random.words(),
                name: faker.random.words(),
                spdx_id: faker.random.words(),
                url: faker.random.words(),
                node_id: faker.random.words(),
              },
              forks: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              allow_forking: faker.datatype.boolean(),
            },
            invitee: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            inviter: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            permissions: faker.random.arrayElement([
              'read',
              'write',
              'admin',
              'triage',
              'maintain',
            ]),
            created_at: faker.random.words(),
            expired: faker.datatype.boolean(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            node_id: faker.random.words(),
          }))
        ),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.patch('/user/repository_invitations/:invitation_id', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(409),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete(
    '/user/repository_invitations/:invitation_id',
    (req, res, ctx) => {
      const resultArrray = [
        [ctx.status(204), ctx.json({})],
        [ctx.status(304), ctx.json({})],
        [
          ctx.status(403),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(404),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
        [
          ctx.status(409),
          ctx.json({
            message: faker.random.words(),
            documentation_url: faker.random.words(),
            url: faker.random.words(),
            status: faker.random.words(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArrray));
    }
  ),
  rest.get('/user/starred', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            full_name: faker.random.words(),
            license: {
              key: faker.random.words(),
              name: faker.random.words(),
              url: faker.random.words(),
              spdx_id: faker.random.words(),
              node_id: faker.random.words(),
              html_url: faker.random.words(),
            },
            organization: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.random.words(),
            description: faker.random.words(),
            fork: faker.datatype.boolean(),
            url: faker.random.words(),
            archive_url: faker.random.words(),
            assignees_url: faker.random.words(),
            blobs_url: faker.random.words(),
            branches_url: faker.random.words(),
            collaborators_url: faker.random.words(),
            comments_url: faker.random.words(),
            commits_url: faker.random.words(),
            compare_url: faker.random.words(),
            contents_url: faker.random.words(),
            contributors_url: faker.random.words(),
            deployments_url: faker.random.words(),
            downloads_url: faker.random.words(),
            events_url: faker.random.words(),
            forks_url: faker.random.words(),
            git_commits_url: faker.random.words(),
            git_refs_url: faker.random.words(),
            git_tags_url: faker.random.words(),
            git_url: faker.random.words(),
            issue_comment_url: faker.random.words(),
            issue_events_url: faker.random.words(),
            issues_url: faker.random.words(),
            keys_url: faker.random.words(),
            labels_url: faker.random.words(),
            languages_url: faker.random.words(),
            merges_url: faker.random.words(),
            milestones_url: faker.random.words(),
            notifications_url: faker.random.words(),
            pulls_url: faker.random.words(),
            releases_url: faker.random.words(),
            ssh_url: faker.random.words(),
            stargazers_url: faker.random.words(),
            statuses_url: faker.random.words(),
            subscribers_url: faker.random.words(),
            subscription_url: faker.random.words(),
            tags_url: faker.random.words(),
            teams_url: faker.random.words(),
            trees_url: faker.random.words(),
            clone_url: faker.random.words(),
            mirror_url: faker.random.words(),
            hooks_url: faker.random.words(),
            svn_url: faker.random.words(),
            homepage: faker.random.words(),
            language: faker.random.words(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.random.words(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.random.words(),
            pushed_at: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            allow_rebase_merge: faker.datatype.boolean(),
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              owner: {
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.random.words(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.random.words(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.random.words(),
            starred_at: faker.random.words(),
          }))
        ),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/user/starred/:owner/:repo', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.put('/user/starred/:owner/:repo', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/user/starred/:owner/:repo', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/user/subscriptions', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            full_name: faker.random.words(),
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.random.words(),
            description: faker.random.words(),
            fork: faker.datatype.boolean(),
            url: faker.random.words(),
            archive_url: faker.random.words(),
            assignees_url: faker.random.words(),
            blobs_url: faker.random.words(),
            branches_url: faker.random.words(),
            collaborators_url: faker.random.words(),
            comments_url: faker.random.words(),
            commits_url: faker.random.words(),
            compare_url: faker.random.words(),
            contents_url: faker.random.words(),
            contributors_url: faker.random.words(),
            deployments_url: faker.random.words(),
            downloads_url: faker.random.words(),
            events_url: faker.random.words(),
            forks_url: faker.random.words(),
            git_commits_url: faker.random.words(),
            git_refs_url: faker.random.words(),
            git_tags_url: faker.random.words(),
            git_url: faker.random.words(),
            issue_comment_url: faker.random.words(),
            issue_events_url: faker.random.words(),
            issues_url: faker.random.words(),
            keys_url: faker.random.words(),
            labels_url: faker.random.words(),
            languages_url: faker.random.words(),
            merges_url: faker.random.words(),
            milestones_url: faker.random.words(),
            notifications_url: faker.random.words(),
            pulls_url: faker.random.words(),
            releases_url: faker.random.words(),
            ssh_url: faker.random.words(),
            stargazers_url: faker.random.words(),
            statuses_url: faker.random.words(),
            subscribers_url: faker.random.words(),
            subscription_url: faker.random.words(),
            tags_url: faker.random.words(),
            teams_url: faker.random.words(),
            trees_url: faker.random.words(),
            clone_url: faker.random.words(),
            mirror_url: faker.random.words(),
            hooks_url: faker.random.words(),
            svn_url: faker.random.words(),
            homepage: faker.random.words(),
            language: faker.random.words(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.random.words(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.random.words(),
            pushed_at: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              license: {
                key: faker.random.words(),
                name: faker.random.words(),
                url: faker.random.words(),
                spdx_id: faker.random.words(),
                node_id: faker.random.words(),
                html_url: faker.random.words(),
              },
              organization: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              allow_rebase_merge: faker.datatype.boolean(),
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                owner: {
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.random.words(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.random.words(),
              starred_at: faker.random.words(),
            },
            temp_clone_token: faker.random.words(),
            delete_branch_on_merge: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            code_of_conduct: {
              key: faker.random.words(),
              name: faker.random.words(),
              url: faker.random.words(),
              body: faker.random.words(),
              html_url: faker.random.words(),
            },
            license: {
              key: faker.random.words(),
              name: faker.random.words(),
              spdx_id: faker.random.words(),
              url: faker.random.words(),
              node_id: faker.random.words(),
            },
            forks: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            allow_forking: faker.datatype.boolean(),
          }))
        ),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(401),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/user/teams', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            name: faker.random.words(),
            slug: faker.random.words(),
            description: faker.random.words(),
            privacy: faker.random.arrayElement(['closed', 'secret']),
            permission: faker.random.words(),
            members_url: faker.random.words(),
            repositories_url: faker.random.words(),
            parent: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              url: faker.random.words(),
              members_url: faker.random.words(),
              name: faker.random.words(),
              description: faker.random.words(),
              permission: faker.random.words(),
              privacy: faker.random.words(),
              html_url: faker.random.words(),
              repositories_url: faker.random.words(),
              slug: faker.random.words(),
              ldap_dn: faker.random.words(),
            },
            members_count: faker.datatype.number(),
            repos_count: faker.datatype.number(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            organization: {
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              hooks_url: faker.random.words(),
              issues_url: faker.random.words(),
              members_url: faker.random.words(),
              public_members_url: faker.random.words(),
              avatar_url: faker.random.words(),
              description: faker.random.words(),
              name: faker.random.words(),
              company: faker.random.words(),
              blog: faker.random.words(),
              location: faker.random.words(),
              email: faker.random.words(),
              twitter_username: faker.random.words(),
              is_verified: faker.datatype.boolean(),
              has_organization_projects: faker.datatype.boolean(),
              has_repository_projects: faker.datatype.boolean(),
              public_repos: faker.datatype.number(),
              public_gists: faker.datatype.number(),
              followers: faker.datatype.number(),
              following: faker.datatype.number(),
              html_url: faker.random.words(),
              created_at: faker.random.words(),
              type: faker.random.words(),
              total_private_repos: faker.datatype.number(),
              owned_private_repos: faker.datatype.number(),
              private_gists: faker.datatype.number(),
              disk_usage: faker.datatype.number(),
              collaborators: faker.datatype.number(),
              billing_email: faker.random.words(),
              plan: {
                name: faker.random.words(),
                space: faker.datatype.number(),
                private_repos: faker.datatype.number(),
                filled_seats: faker.datatype.number(),
                seats: faker.datatype.number(),
              },
              default_repository_permission: faker.random.words(),
              members_can_create_repositories: faker.datatype.boolean(),
              two_factor_requirement_enabled: faker.datatype.boolean(),
              members_allowed_repository_creation_type: faker.random.words(),
              members_can_create_public_repositories: faker.datatype.boolean(),
              members_can_create_private_repositories: faker.datatype.boolean(),
              members_can_create_internal_repositories:
                faker.datatype.boolean(),
              members_can_create_pages: faker.datatype.boolean(),
              members_can_create_public_pages: faker.datatype.boolean(),
              members_can_create_private_pages: faker.datatype.boolean(),
              members_can_fork_private_repositories: faker.datatype.boolean(),
              updated_at: faker.random.words(),
            },
            ldap_dn: faker.random.words(),
          }))
        ),
      ],
      [ctx.status(304), ctx.json({})],
      [
        ctx.status(403),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/users', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          }))
        ),
      ],
      [ctx.status(304), ctx.json({})],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/users/:username', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(200), ctx.json({})],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/users/:username/events', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.random.words(),
            type: faker.random.words(),
            actor: {},
            repo: {
              id: faker.datatype.number(),
              name: faker.random.words(),
              url: faker.random.words(),
            },
            org: {},
            payload: {
              action: faker.random.words(),
              issue: {},
              comment: {},
              pages: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => ({
                page_name: faker.random.words(),
                title: faker.random.words(),
                summary: faker.random.words(),
                action: faker.random.words(),
                sha: faker.random.words(),
                html_url: faker.random.words(),
              })),
            },
            public: faker.datatype.boolean(),
            created_at: faker.random.words(),
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/users/:username/events/orgs/:org', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.random.words(),
            type: faker.random.words(),
            actor: {},
            repo: {
              id: faker.datatype.number(),
              name: faker.random.words(),
              url: faker.random.words(),
            },
            org: {},
            payload: {
              action: faker.random.words(),
              issue: {},
              comment: {},
              pages: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => ({
                page_name: faker.random.words(),
                title: faker.random.words(),
                summary: faker.random.words(),
                action: faker.random.words(),
                sha: faker.random.words(),
                html_url: faker.random.words(),
              })),
            },
            public: faker.datatype.boolean(),
            created_at: faker.random.words(),
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/users/:username/events/public', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.random.words(),
            type: faker.random.words(),
            actor: {},
            repo: {
              id: faker.datatype.number(),
              name: faker.random.words(),
              url: faker.random.words(),
            },
            org: {},
            payload: {
              action: faker.random.words(),
              issue: {},
              comment: {},
              pages: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => ({
                page_name: faker.random.words(),
                title: faker.random.words(),
                summary: faker.random.words(),
                action: faker.random.words(),
                sha: faker.random.words(),
                html_url: faker.random.words(),
              })),
            },
            public: faker.datatype.boolean(),
            created_at: faker.random.words(),
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/users/:username/followers', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/users/:username/following', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/users/:username/following/:target_user', (req, res, ctx) => {
    const resultArrray = [
      [ctx.status(204), ctx.json({})],
      [ctx.status(404), ctx.json({})],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/users/:username/gists', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            url: faker.random.words(),
            forks_url: faker.random.words(),
            commits_url: faker.random.words(),
            id: faker.random.words(),
            node_id: faker.random.words(),
            git_pull_url: faker.random.words(),
            git_push_url: faker.random.words(),
            html_url: faker.random.words(),
            files: {},
            public: faker.datatype.boolean(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            description: faker.random.words(),
            comments: faker.datatype.number(),
            user: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            comments_url: faker.random.words(),
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            truncated: faker.datatype.boolean(),
            forks: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({})),
            history: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({})),
          }))
        ),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/users/:username/gpg_keys', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.datatype.number(),
            primary_key_id: faker.datatype.number(),
            key_id: faker.random.words(),
            public_key: faker.random.words(),
            emails: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              email: faker.random.words(),
              verified: faker.datatype.boolean(),
            })),
            subkeys: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              primary_key_id: faker.datatype.number(),
              key_id: faker.random.words(),
              public_key: faker.random.words(),
              emails: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => ({})),
              subkeys: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => ({})),
              can_sign: faker.datatype.boolean(),
              can_encrypt_comms: faker.datatype.boolean(),
              can_encrypt_storage: faker.datatype.boolean(),
              can_certify: faker.datatype.boolean(),
              created_at: faker.random.words(),
              expires_at: faker.random.words(),
              raw_key: faker.random.words(),
            })),
            can_sign: faker.datatype.boolean(),
            can_encrypt_comms: faker.datatype.boolean(),
            can_encrypt_storage: faker.datatype.boolean(),
            can_certify: faker.datatype.boolean(),
            created_at: faker.random.words(),
            expires_at: faker.random.words(),
            raw_key: faker.random.words(),
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/users/:username/hovercard', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          contexts: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            message: faker.random.words(),
            octicon: faker.random.words(),
          })),
        }),
      ],
      [
        ctx.status(404),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          url: faker.random.words(),
          status: faker.random.words(),
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/users/:username/installation', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.datatype.number(),
          account: {},
          repository_selection: faker.random.arrayElement(['all', 'selected']),
          access_tokens_url: faker.random.words(),
          repositories_url: faker.random.words(),
          html_url: faker.random.words(),
          app_id: faker.datatype.number(),
          target_id: faker.datatype.number(),
          target_type: faker.random.words(),
          permissions: {
            actions: faker.random.arrayElement(['read', 'write']),
            administration: faker.random.arrayElement(['read', 'write']),
            checks: faker.random.arrayElement(['read', 'write']),
            contents: faker.random.arrayElement(['read', 'write']),
            deployments: faker.random.arrayElement(['read', 'write']),
            environments: faker.random.arrayElement(['read', 'write']),
            issues: faker.random.arrayElement(['read', 'write']),
            metadata: faker.random.arrayElement(['read', 'write']),
            packages: faker.random.arrayElement(['read', 'write']),
            pages: faker.random.arrayElement(['read', 'write']),
            pull_requests: faker.random.arrayElement(['read', 'write']),
            repository_hooks: faker.random.arrayElement(['read', 'write']),
            repository_projects: faker.random.arrayElement([
              'read',
              'write',
              'admin',
            ]),
            secret_scanning_alerts: faker.random.arrayElement([
              'read',
              'write',
            ]),
            secrets: faker.random.arrayElement(['read', 'write']),
            security_events: faker.random.arrayElement(['read', 'write']),
            single_file: faker.random.arrayElement(['read', 'write']),
            statuses: faker.random.arrayElement(['read', 'write']),
            vulnerability_alerts: faker.random.arrayElement(['read', 'write']),
            workflows: faker.random.arrayElement(['write']),
            members: faker.random.arrayElement(['read', 'write']),
            organization_administration: faker.random.arrayElement([
              'read',
              'write',
            ]),
            organization_hooks: faker.random.arrayElement(['read', 'write']),
            organization_plan: faker.random.arrayElement(['read']),
            organization_projects: faker.random.arrayElement([
              'read',
              'write',
              'admin',
            ]),
            organization_packages: faker.random.arrayElement(['read', 'write']),
            organization_secrets: faker.random.arrayElement(['read', 'write']),
            organization_self_hosted_runners: faker.random.arrayElement([
              'read',
              'write',
            ]),
            organization_user_blocking: faker.random.arrayElement([
              'read',
              'write',
            ]),
            team_discussions: faker.random.arrayElement(['read', 'write']),
            content_references: faker.random.arrayElement(['read', 'write']),
          },
          events: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
          created_at: faker.random.words(),
          updated_at: faker.random.words(),
          single_file_name: faker.random.words(),
          has_multiple_single_files: faker.datatype.boolean(),
          single_file_paths: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => faker.random.words()),
          app_slug: faker.random.words(),
          suspended_by: {
            name: faker.random.words(),
            email: faker.random.words(),
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            avatar_url: faker.random.words(),
            gravatar_id: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            followers_url: faker.random.words(),
            following_url: faker.random.words(),
            gists_url: faker.random.words(),
            starred_url: faker.random.words(),
            subscriptions_url: faker.random.words(),
            organizations_url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            received_events_url: faker.random.words(),
            type: faker.random.words(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.random.words(),
          },
          suspended_at: faker.random.words(),
          contact_email: faker.random.words(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/users/:username/keys', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.datatype.number(),
            key: faker.random.words(),
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/users/:username/orgs', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            login: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            url: faker.random.words(),
            repos_url: faker.random.words(),
            events_url: faker.random.words(),
            hooks_url: faker.random.words(),
            issues_url: faker.random.words(),
            members_url: faker.random.words(),
            public_members_url: faker.random.words(),
            avatar_url: faker.random.words(),
            description: faker.random.words(),
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/users/:username/projects', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            owner_url: faker.random.words(),
            url: faker.random.words(),
            html_url: faker.random.words(),
            columns_url: faker.random.words(),
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            body: faker.random.words(),
            number: faker.datatype.number(),
            state: faker.random.words(),
            creator: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            organization_permission: faker.random.arrayElement([
              'read',
              'write',
              'admin',
              'none',
            ]),
            private: faker.datatype.boolean(),
          }))
        ),
      ],
      [
        ctx.status(422),
        ctx.json({
          message: faker.random.words(),
          documentation_url: faker.random.words(),
          errors: [
            ...new Array(faker.datatype.number({ max: 100 })).keys(),
          ].map(_ => ({
            resource: faker.random.words(),
            field: faker.random.words(),
            message: faker.random.words(),
            code: faker.random.words(),
            index: faker.datatype.number(),
            value: {},
          })),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/users/:username/received_events', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.random.words(),
            type: faker.random.words(),
            actor: {},
            repo: {
              id: faker.datatype.number(),
              name: faker.random.words(),
              url: faker.random.words(),
            },
            org: {},
            payload: {
              action: faker.random.words(),
              issue: {},
              comment: {},
              pages: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => ({
                page_name: faker.random.words(),
                title: faker.random.words(),
                summary: faker.random.words(),
                action: faker.random.words(),
                sha: faker.random.words(),
                html_url: faker.random.words(),
              })),
            },
            public: faker.datatype.boolean(),
            created_at: faker.random.words(),
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/users/:username/received_events/public', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.random.words(),
            type: faker.random.words(),
            actor: {},
            repo: {
              id: faker.datatype.number(),
              name: faker.random.words(),
              url: faker.random.words(),
            },
            org: {},
            payload: {
              action: faker.random.words(),
              issue: {},
              comment: {},
              pages: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => ({
                page_name: faker.random.words(),
                title: faker.random.words(),
                summary: faker.random.words(),
                action: faker.random.words(),
                sha: faker.random.words(),
                html_url: faker.random.words(),
              })),
            },
            public: faker.datatype.boolean(),
            created_at: faker.random.words(),
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/users/:username/repos', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            full_name: faker.random.words(),
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.random.words(),
            description: faker.random.words(),
            fork: faker.datatype.boolean(),
            url: faker.random.words(),
            archive_url: faker.random.words(),
            assignees_url: faker.random.words(),
            blobs_url: faker.random.words(),
            branches_url: faker.random.words(),
            collaborators_url: faker.random.words(),
            comments_url: faker.random.words(),
            commits_url: faker.random.words(),
            compare_url: faker.random.words(),
            contents_url: faker.random.words(),
            contributors_url: faker.random.words(),
            deployments_url: faker.random.words(),
            downloads_url: faker.random.words(),
            events_url: faker.random.words(),
            forks_url: faker.random.words(),
            git_commits_url: faker.random.words(),
            git_refs_url: faker.random.words(),
            git_tags_url: faker.random.words(),
            git_url: faker.random.words(),
            issue_comment_url: faker.random.words(),
            issue_events_url: faker.random.words(),
            issues_url: faker.random.words(),
            keys_url: faker.random.words(),
            labels_url: faker.random.words(),
            languages_url: faker.random.words(),
            merges_url: faker.random.words(),
            milestones_url: faker.random.words(),
            notifications_url: faker.random.words(),
            pulls_url: faker.random.words(),
            releases_url: faker.random.words(),
            ssh_url: faker.random.words(),
            stargazers_url: faker.random.words(),
            statuses_url: faker.random.words(),
            subscribers_url: faker.random.words(),
            subscription_url: faker.random.words(),
            tags_url: faker.random.words(),
            teams_url: faker.random.words(),
            trees_url: faker.random.words(),
            clone_url: faker.random.words(),
            mirror_url: faker.random.words(),
            hooks_url: faker.random.words(),
            svn_url: faker.random.words(),
            homepage: faker.random.words(),
            language: faker.random.words(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.random.words(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.random.words(),
            pushed_at: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              license: {
                key: faker.random.words(),
                name: faker.random.words(),
                url: faker.random.words(),
                spdx_id: faker.random.words(),
                node_id: faker.random.words(),
                html_url: faker.random.words(),
              },
              organization: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              allow_rebase_merge: faker.datatype.boolean(),
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                owner: {
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.random.words(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.random.words(),
              starred_at: faker.random.words(),
            },
            temp_clone_token: faker.random.words(),
            delete_branch_on_merge: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            code_of_conduct: {
              key: faker.random.words(),
              name: faker.random.words(),
              url: faker.random.words(),
              body: faker.random.words(),
              html_url: faker.random.words(),
            },
            license: {
              key: faker.random.words(),
              name: faker.random.words(),
              spdx_id: faker.random.words(),
              url: faker.random.words(),
              node_id: faker.random.words(),
            },
            forks: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            allow_forking: faker.datatype.boolean(),
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.put('/users/:username/site_admin', (req, res, ctx) => {
    const resultArrray = [[ctx.status(204), ctx.json({})]];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/users/:username/site_admin', (req, res, ctx) => {
    const resultArrray = [[ctx.status(204), ctx.json({})]];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/users/:username/starred', (req, res, ctx) => {
    const resultArrray = [[ctx.status(200), ctx.json({})]];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/users/:username/subscriptions', (req, res, ctx) => {
    const resultArrray = [
      [
        ctx.status(200),
        ctx.json(
          [...new Array(faker.datatype.number({ max: 100 })).keys()].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.random.words(),
            name: faker.random.words(),
            full_name: faker.random.words(),
            owner: {
              name: faker.random.words(),
              email: faker.random.words(),
              login: faker.random.words(),
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              avatar_url: faker.random.words(),
              gravatar_id: faker.random.words(),
              url: faker.random.words(),
              html_url: faker.random.words(),
              followers_url: faker.random.words(),
              following_url: faker.random.words(),
              gists_url: faker.random.words(),
              starred_url: faker.random.words(),
              subscriptions_url: faker.random.words(),
              organizations_url: faker.random.words(),
              repos_url: faker.random.words(),
              events_url: faker.random.words(),
              received_events_url: faker.random.words(),
              type: faker.random.words(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.random.words(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.random.words(),
            description: faker.random.words(),
            fork: faker.datatype.boolean(),
            url: faker.random.words(),
            archive_url: faker.random.words(),
            assignees_url: faker.random.words(),
            blobs_url: faker.random.words(),
            branches_url: faker.random.words(),
            collaborators_url: faker.random.words(),
            comments_url: faker.random.words(),
            commits_url: faker.random.words(),
            compare_url: faker.random.words(),
            contents_url: faker.random.words(),
            contributors_url: faker.random.words(),
            deployments_url: faker.random.words(),
            downloads_url: faker.random.words(),
            events_url: faker.random.words(),
            forks_url: faker.random.words(),
            git_commits_url: faker.random.words(),
            git_refs_url: faker.random.words(),
            git_tags_url: faker.random.words(),
            git_url: faker.random.words(),
            issue_comment_url: faker.random.words(),
            issue_events_url: faker.random.words(),
            issues_url: faker.random.words(),
            keys_url: faker.random.words(),
            labels_url: faker.random.words(),
            languages_url: faker.random.words(),
            merges_url: faker.random.words(),
            milestones_url: faker.random.words(),
            notifications_url: faker.random.words(),
            pulls_url: faker.random.words(),
            releases_url: faker.random.words(),
            ssh_url: faker.random.words(),
            stargazers_url: faker.random.words(),
            statuses_url: faker.random.words(),
            subscribers_url: faker.random.words(),
            subscription_url: faker.random.words(),
            tags_url: faker.random.words(),
            teams_url: faker.random.words(),
            trees_url: faker.random.words(),
            clone_url: faker.random.words(),
            mirror_url: faker.random.words(),
            hooks_url: faker.random.words(),
            svn_url: faker.random.words(),
            homepage: faker.random.words(),
            language: faker.random.words(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.random.words(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(faker.datatype.number({ max: 100 })).keys(),
            ].map(_ => faker.random.words()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.random.words(),
            pushed_at: faker.random.words(),
            created_at: faker.random.words(),
            updated_at: faker.random.words(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.random.words(),
              name: faker.random.words(),
              full_name: faker.random.words(),
              license: {
                key: faker.random.words(),
                name: faker.random.words(),
                url: faker.random.words(),
                spdx_id: faker.random.words(),
                node_id: faker.random.words(),
                html_url: faker.random.words(),
              },
              organization: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.random.words(),
                email: faker.random.words(),
                login: faker.random.words(),
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                avatar_url: faker.random.words(),
                gravatar_id: faker.random.words(),
                url: faker.random.words(),
                html_url: faker.random.words(),
                followers_url: faker.random.words(),
                following_url: faker.random.words(),
                gists_url: faker.random.words(),
                starred_url: faker.random.words(),
                subscriptions_url: faker.random.words(),
                organizations_url: faker.random.words(),
                repos_url: faker.random.words(),
                events_url: faker.random.words(),
                received_events_url: faker.random.words(),
                type: faker.random.words(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.random.words(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.random.words(),
              description: faker.random.words(),
              fork: faker.datatype.boolean(),
              url: faker.random.words(),
              archive_url: faker.random.words(),
              assignees_url: faker.random.words(),
              blobs_url: faker.random.words(),
              branches_url: faker.random.words(),
              collaborators_url: faker.random.words(),
              comments_url: faker.random.words(),
              commits_url: faker.random.words(),
              compare_url: faker.random.words(),
              contents_url: faker.random.words(),
              contributors_url: faker.random.words(),
              deployments_url: faker.random.words(),
              downloads_url: faker.random.words(),
              events_url: faker.random.words(),
              forks_url: faker.random.words(),
              git_commits_url: faker.random.words(),
              git_refs_url: faker.random.words(),
              git_tags_url: faker.random.words(),
              git_url: faker.random.words(),
              issue_comment_url: faker.random.words(),
              issue_events_url: faker.random.words(),
              issues_url: faker.random.words(),
              keys_url: faker.random.words(),
              labels_url: faker.random.words(),
              languages_url: faker.random.words(),
              merges_url: faker.random.words(),
              milestones_url: faker.random.words(),
              notifications_url: faker.random.words(),
              pulls_url: faker.random.words(),
              releases_url: faker.random.words(),
              ssh_url: faker.random.words(),
              stargazers_url: faker.random.words(),
              statuses_url: faker.random.words(),
              subscribers_url: faker.random.words(),
              subscription_url: faker.random.words(),
              tags_url: faker.random.words(),
              teams_url: faker.random.words(),
              trees_url: faker.random.words(),
              clone_url: faker.random.words(),
              mirror_url: faker.random.words(),
              hooks_url: faker.random.words(),
              svn_url: faker.random.words(),
              homepage: faker.random.words(),
              language: faker.random.words(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.random.words(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(faker.datatype.number({ max: 100 })).keys(),
              ].map(_ => faker.random.words()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.random.words(),
              pushed_at: faker.random.words(),
              created_at: faker.random.words(),
              updated_at: faker.random.words(),
              allow_rebase_merge: faker.datatype.boolean(),
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.random.words(),
                name: faker.random.words(),
                full_name: faker.random.words(),
                owner: {
                  login: faker.random.words(),
                  id: faker.datatype.number(),
                  node_id: faker.random.words(),
                  avatar_url: faker.random.words(),
                  gravatar_id: faker.random.words(),
                  url: faker.random.words(),
                  html_url: faker.random.words(),
                  followers_url: faker.random.words(),
                  following_url: faker.random.words(),
                  gists_url: faker.random.words(),
                  starred_url: faker.random.words(),
                  subscriptions_url: faker.random.words(),
                  organizations_url: faker.random.words(),
                  repos_url: faker.random.words(),
                  events_url: faker.random.words(),
                  received_events_url: faker.random.words(),
                  type: faker.random.words(),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.random.words(),
                description: faker.random.words(),
                fork: faker.datatype.boolean(),
                url: faker.random.words(),
                archive_url: faker.random.words(),
                assignees_url: faker.random.words(),
                blobs_url: faker.random.words(),
                branches_url: faker.random.words(),
                collaborators_url: faker.random.words(),
                comments_url: faker.random.words(),
                commits_url: faker.random.words(),
                compare_url: faker.random.words(),
                contents_url: faker.random.words(),
                contributors_url: faker.random.words(),
                deployments_url: faker.random.words(),
                downloads_url: faker.random.words(),
                events_url: faker.random.words(),
                forks_url: faker.random.words(),
                git_commits_url: faker.random.words(),
                git_refs_url: faker.random.words(),
                git_tags_url: faker.random.words(),
                git_url: faker.random.words(),
                issue_comment_url: faker.random.words(),
                issue_events_url: faker.random.words(),
                issues_url: faker.random.words(),
                keys_url: faker.random.words(),
                labels_url: faker.random.words(),
                languages_url: faker.random.words(),
                merges_url: faker.random.words(),
                milestones_url: faker.random.words(),
                notifications_url: faker.random.words(),
                pulls_url: faker.random.words(),
                releases_url: faker.random.words(),
                ssh_url: faker.random.words(),
                stargazers_url: faker.random.words(),
                statuses_url: faker.random.words(),
                subscribers_url: faker.random.words(),
                subscription_url: faker.random.words(),
                tags_url: faker.random.words(),
                teams_url: faker.random.words(),
                trees_url: faker.random.words(),
                clone_url: faker.random.words(),
                mirror_url: faker.random.words(),
                hooks_url: faker.random.words(),
                svn_url: faker.random.words(),
                homepage: faker.random.words(),
                language: faker.random.words(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.random.words(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(faker.datatype.number({ max: 100 })).keys(),
                ].map(_ => faker.random.words()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.random.words(),
                pushed_at: faker.random.words(),
                created_at: faker.random.words(),
                updated_at: faker.random.words(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.random.words(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.random.words(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.random.words(),
              starred_at: faker.random.words(),
            },
            temp_clone_token: faker.random.words(),
            delete_branch_on_merge: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            code_of_conduct: {
              key: faker.random.words(),
              name: faker.random.words(),
              url: faker.random.words(),
              body: faker.random.words(),
              html_url: faker.random.words(),
            },
            license: {
              key: faker.random.words(),
              name: faker.random.words(),
              spdx_id: faker.random.words(),
              url: faker.random.words(),
              node_id: faker.random.words(),
            },
            forks: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            allow_forking: faker.datatype.boolean(),
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.put('/users/:username/suspended', (req, res, ctx) => {
    const resultArrray = [[ctx.status(204), ctx.json({})]];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.delete('/users/:username/suspended', (req, res, ctx) => {
    const resultArrray = [[ctx.status(204), ctx.json({})]];
    return res(...faker.random.arrayElement(resultArrray));
  }),
  rest.get('/zen', (req, res, ctx) => {
    const resultArrray = [[ctx.status(200), ctx.json({})]];
    return res(...faker.random.arrayElement(resultArrray));
  }),
];

// This configures a Service Worker with the given request handlers.
const worker = setupWorker(...handlers);

worker.start();
